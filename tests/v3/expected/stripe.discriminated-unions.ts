/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v1/3d_secure": {
    /** <p>Initiate 3D Secure authentication.</p> */
    post: operations["Post3dSecure"];
  };
  "/v1/3d_secure/{three_d_secure}": {
    /** <p>Retrieves a 3D Secure object.</p> */
    get: operations["Get3dSecureThreeDSecure"];
  };
  "/v1/account": {
    /** <p>Retrieves the details of an account.</p> */
    get: operations["GetAccount"];
    /**
     * <p>Updates a connected <a href="/docs/connect/accounts">Express or Custom account</a> by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked <strong>Custom Only</strong> below.) Parameters marked <strong>Custom and Express</strong> are supported by both account types.</p>
     *
     * <p>To update your own account, use the <a href="https://dashboard.stripe.com/account">Dashboard</a>. Refer to our <a href="/docs/connect/updating-accounts">Connect</a> documentation to learn more about updating accounts.</p>
     */
    post: operations["PostAccount"];
    /**
     * <p>With <a href="/docs/connect">Connect</a>, you can delete Custom or Express accounts you manage.</p>
     *
     * <p>Accounts created using test-mode keys can be deleted at any time. Accounts created using live-mode keys can only be deleted once all balances are zero.</p>
     *
     * <p>If you want to delete your own account, use the <a href="https://dashboard.stripe.com/account">account information tab in your account settings</a> instead.</p>
     */
    delete: operations["DeleteAccount"];
  };
  "/v1/account/bank_accounts": {
    /** <p>Create an external account for a given account.</p> */
    post: operations["PostAccountBankAccounts"];
  };
  "/v1/account/bank_accounts/{id}": {
    /** <p>Retrieve a specified external account for a given account.</p> */
    get: operations["GetAccountBankAccountsId"];
    /**
     * <p>Updates the metadata, account holder name, and account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>
     * <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
     */
    post: operations["PostAccountBankAccountsId"];
    /** <p>Delete a specified external account for a given account.</p> */
    delete: operations["DeleteAccountBankAccountsId"];
  };
  "/v1/account/capabilities": {
    /** <p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p> */
    get: operations["GetAccountCapabilities"];
  };
  "/v1/account/capabilities/{capability}": {
    /** <p>Retrieves information about the specified Account Capability.</p> */
    get: operations["GetAccountCapabilitiesCapability"];
    /** <p>Updates an existing Account Capability.</p> */
    post: operations["PostAccountCapabilitiesCapability"];
  };
  "/v1/account/external_accounts": {
    /** <p>List external accounts for an account.</p> */
    get: operations["GetAccountExternalAccounts"];
    /** <p>Create an external account for a given account.</p> */
    post: operations["PostAccountExternalAccounts"];
  };
  "/v1/account/external_accounts/{id}": {
    /** <p>Retrieve a specified external account for a given account.</p> */
    get: operations["GetAccountExternalAccountsId"];
    /**
     * <p>Updates the metadata, account holder name, and account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>
     * <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
     */
    post: operations["PostAccountExternalAccountsId"];
    /** <p>Delete a specified external account for a given account.</p> */
    delete: operations["DeleteAccountExternalAccountsId"];
  };
  "/v1/account/login_links": {
    /**
     * <p>Creates a single-use login link for an Express account to access their Stripe dashboard.</p>
     *
     * <p><strong>You may only create login links for <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
     */
    post: operations["PostAccountLoginLinks"];
  };
  "/v1/account/logout": {
    /**
     * <p>Invalidates all sessions for a light account, for a platform to use during platform logout.</p>
     *
     * <p><strong>You may only log out <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
     */
    put: operations["PutAccountLogout"];
  };
  "/v1/account/people": {
    /** <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p> */
    get: operations["GetAccountPeople"];
    /** <p>Creates a new person.</p> */
    post: operations["PostAccountPeople"];
  };
  "/v1/account/people/{person}": {
    /** <p>Retrieves an existing person.</p> */
    get: operations["GetAccountPeoplePerson"];
    /** <p>Updates an existing person.</p> */
    post: operations["PostAccountPeoplePerson"];
    /** <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p> */
    delete: operations["DeleteAccountPeoplePerson"];
  };
  "/v1/account/persons": {
    /** <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p> */
    get: operations["GetAccountPersons"];
    /** <p>Creates a new person.</p> */
    post: operations["PostAccountPersons"];
  };
  "/v1/account/persons/{person}": {
    /** <p>Retrieves an existing person.</p> */
    get: operations["GetAccountPersonsPerson"];
    /** <p>Updates an existing person.</p> */
    post: operations["PostAccountPersonsPerson"];
    /** <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p> */
    delete: operations["DeleteAccountPersonsPerson"];
  };
  "/v1/account_links": {
    /** <p>Creates an AccountLink object that returns a single-use Stripe URL that the user can redirect their user to in order to take them through the Connect Onboarding flow.</p> */
    post: operations["PostAccountLinks"];
  };
  "/v1/accounts": {
    /** <p>Returns a list of accounts connected to your platform via <a href="/docs/connect">Connect</a>. If you’re not a platform, the list is empty.</p> */
    get: operations["GetAccounts"];
    /**
     * <p>With <a href="/docs/connect">Connect</a>, you can create Stripe accounts for your users.
     * To do this, you’ll first need to <a href="https://dashboard.stripe.com/account/applications/settings">register your platform</a>.</p>
     *
     * <p>For Standard accounts, parameters other than <code>country</code>, <code>email</code>, and <code>type</code>
     * are used to prefill the account application that we ask the account holder to complete.</p>
     */
    post: operations["PostAccounts"];
  };
  "/v1/accounts/{account}": {
    /** <p>Retrieves the details of an account.</p> */
    get: operations["GetAccountsAccount"];
    /**
     * <p>Updates a connected <a href="/docs/connect/accounts">Express or Custom account</a> by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked <strong>Custom Only</strong> below.) Parameters marked <strong>Custom and Express</strong> are supported by both account types.</p>
     *
     * <p>To update your own account, use the <a href="https://dashboard.stripe.com/account">Dashboard</a>. Refer to our <a href="/docs/connect/updating-accounts">Connect</a> documentation to learn more about updating accounts.</p>
     */
    post: operations["PostAccountsAccount"];
    /**
     * <p>With <a href="/docs/connect">Connect</a>, you can delete Custom or Express accounts you manage.</p>
     *
     * <p>Accounts created using test-mode keys can be deleted at any time. Accounts created using live-mode keys can only be deleted once all balances are zero.</p>
     *
     * <p>If you want to delete your own account, use the <a href="https://dashboard.stripe.com/account">account information tab in your account settings</a> instead.</p>
     */
    delete: operations["DeleteAccountsAccount"];
  };
  "/v1/accounts/{account}/bank_accounts": {
    /** <p>Create an external account for a given account.</p> */
    post: operations["PostAccountsAccountBankAccounts"];
  };
  "/v1/accounts/{account}/bank_accounts/{id}": {
    /** <p>Retrieve a specified external account for a given account.</p> */
    get: operations["GetAccountsAccountBankAccountsId"];
    /**
     * <p>Updates the metadata, account holder name, and account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>
     * <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
     */
    post: operations["PostAccountsAccountBankAccountsId"];
    /** <p>Delete a specified external account for a given account.</p> */
    delete: operations["DeleteAccountsAccountBankAccountsId"];
  };
  "/v1/accounts/{account}/capabilities": {
    /** <p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p> */
    get: operations["GetAccountsAccountCapabilities"];
  };
  "/v1/accounts/{account}/capabilities/{capability}": {
    /** <p>Retrieves information about the specified Account Capability.</p> */
    get: operations["GetAccountsAccountCapabilitiesCapability"];
    /** <p>Updates an existing Account Capability.</p> */
    post: operations["PostAccountsAccountCapabilitiesCapability"];
  };
  "/v1/accounts/{account}/external_accounts": {
    /** <p>List external accounts for an account.</p> */
    get: operations["GetAccountsAccountExternalAccounts"];
    /** <p>Create an external account for a given account.</p> */
    post: operations["PostAccountsAccountExternalAccounts"];
  };
  "/v1/accounts/{account}/external_accounts/{id}": {
    /** <p>Retrieve a specified external account for a given account.</p> */
    get: operations["GetAccountsAccountExternalAccountsId"];
    /**
     * <p>Updates the metadata, account holder name, and account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>
     * <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
     */
    post: operations["PostAccountsAccountExternalAccountsId"];
    /** <p>Delete a specified external account for a given account.</p> */
    delete: operations["DeleteAccountsAccountExternalAccountsId"];
  };
  "/v1/accounts/{account}/login_links": {
    /**
     * <p>Creates a single-use login link for an Express account to access their Stripe dashboard.</p>
     *
     * <p><strong>You may only create login links for <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
     */
    post: operations["PostAccountsAccountLoginLinks"];
  };
  "/v1/accounts/{account}/logout": {
    /**
     * <p>Invalidates all sessions for a light account, for a platform to use during platform logout.</p>
     *
     * <p><strong>You may only log out <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
     */
    put: operations["PutAccountsAccountLogout"];
  };
  "/v1/accounts/{account}/people": {
    /** <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p> */
    get: operations["GetAccountsAccountPeople"];
    /** <p>Creates a new person.</p> */
    post: operations["PostAccountsAccountPeople"];
  };
  "/v1/accounts/{account}/people/{person}": {
    /** <p>Retrieves an existing person.</p> */
    get: operations["GetAccountsAccountPeoplePerson"];
    /** <p>Updates an existing person.</p> */
    post: operations["PostAccountsAccountPeoplePerson"];
    /** <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p> */
    delete: operations["DeleteAccountsAccountPeoplePerson"];
  };
  "/v1/accounts/{account}/persons": {
    /** <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p> */
    get: operations["GetAccountsAccountPersons"];
    /** <p>Creates a new person.</p> */
    post: operations["PostAccountsAccountPersons"];
  };
  "/v1/accounts/{account}/persons/{person}": {
    /** <p>Retrieves an existing person.</p> */
    get: operations["GetAccountsAccountPersonsPerson"];
    /** <p>Updates an existing person.</p> */
    post: operations["PostAccountsAccountPersonsPerson"];
    /** <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p> */
    delete: operations["DeleteAccountsAccountPersonsPerson"];
  };
  "/v1/accounts/{account}/reject": {
    /**
     * <p>With <a href="/docs/connect">Connect</a>, you may flag accounts as suspicious.</p>
     *
     * <p>Test-mode Custom and Express accounts can be rejected at any time. Accounts created using live-mode keys may only be rejected once all balances are zero.</p>
     */
    post: operations["PostAccountsAccountReject"];
  };
  "/v1/apple_pay/domains": {
    /** <p>List apple pay domains.</p> */
    get: operations["GetApplePayDomains"];
    /** <p>Create an apple pay domain.</p> */
    post: operations["PostApplePayDomains"];
  };
  "/v1/apple_pay/domains/{domain}": {
    /** <p>Retrieve an apple pay domain.</p> */
    get: operations["GetApplePayDomainsDomain"];
    /** <p>Delete an apple pay domain.</p> */
    delete: operations["DeleteApplePayDomainsDomain"];
  };
  "/v1/application_fees": {
    /** <p>Returns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.</p> */
    get: operations["GetApplicationFees"];
  };
  "/v1/application_fees/{fee}/refunds/{id}": {
    /** <p>By default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.</p> */
    get: operations["GetApplicationFeesFeeRefundsId"];
    /**
     * <p>Updates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
     *
     * <p>This request only accepts metadata as an argument.</p>
     */
    post: operations["PostApplicationFeesFeeRefundsId"];
  };
  "/v1/application_fees/{id}": {
    /** <p>Retrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.</p> */
    get: operations["GetApplicationFeesId"];
  };
  "/v1/application_fees/{id}/refund": {
    post: operations["PostApplicationFeesIdRefund"];
  };
  "/v1/application_fees/{id}/refunds": {
    /** <p>You can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p> */
    get: operations["GetApplicationFeesIdRefunds"];
    /**
     * <p>Refunds an application fee that has previously been collected but not yet refunded.
     * Funds will be refunded to the Stripe account from which the fee was originally collected.</p>
     *
     * <p>You can optionally refund only part of an application fee.
     * You can do so multiple times, until the entire fee has been refunded.</p>
     *
     * <p>Once entirely refunded, an application fee can’t be refunded again.
     * This method will raise an error when called on an already-refunded application fee,
     * or when trying to refund more money than is left on an application fee.</p>
     */
    post: operations["PostApplicationFeesIdRefunds"];
  };
  "/v1/balance": {
    /**
     * <p>Retrieves the current account balance, based on the authentication that was used to make the request.
     *  For a sample request, see <a href="/docs/connect/account-balances#accounting-for-negative-balances">Accounting for negative balances</a>.</p>
     */
    get: operations["GetBalance"];
  };
  "/v1/balance/history": {
    /**
     * <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>
     *
     * <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
     */
    get: operations["GetBalanceHistory"];
  };
  "/v1/balance/history/{id}": {
    /**
     * <p>Retrieves the balance transaction with the given ID.</p>
     *
     * <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
     */
    get: operations["GetBalanceHistoryId"];
  };
  "/v1/balance_transactions": {
    /**
     * <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>
     *
     * <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
     */
    get: operations["GetBalanceTransactions"];
  };
  "/v1/balance_transactions/{id}": {
    /**
     * <p>Retrieves the balance transaction with the given ID.</p>
     *
     * <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
     */
    get: operations["GetBalanceTransactionsId"];
  };
  "/v1/billing_portal/sessions": {
    /** <p>Creates a session of the Self-service Portal.</p> */
    post: operations["PostBillingPortalSessions"];
  };
  "/v1/bitcoin/receivers": {
    /** <p>Returns a list of your receivers. Receivers are returned sorted by creation date, with the most recently created receivers appearing first.</p> */
    get: operations["GetBitcoinReceivers"];
  };
  "/v1/bitcoin/receivers/{id}": {
    /** <p>Retrieves the Bitcoin receiver with the given ID.</p> */
    get: operations["GetBitcoinReceiversId"];
  };
  "/v1/bitcoin/receivers/{receiver}/transactions": {
    /** <p>List bitcoin transacitons for a given receiver.</p> */
    get: operations["GetBitcoinReceiversReceiverTransactions"];
  };
  "/v1/bitcoin/transactions": {
    /** <p>List bitcoin transacitons for a given receiver.</p> */
    get: operations["GetBitcoinTransactions"];
  };
  "/v1/charges": {
    /** <p>Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.</p> */
    get: operations["GetCharges"];
    /** <p>To charge a credit card or other payment source, you create a <code>Charge</code> object. If your API key is in test mode, the supplied payment source (e.g., card) won’t actually be charged, although everything else will occur as if in live mode. (Stripe assumes that the charge would have completed successfully).</p> */
    post: operations["PostCharges"];
  };
  "/v1/charges/{charge}": {
    /** <p>Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.</p> */
    get: operations["GetChargesCharge"];
    /** <p>Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
    post: operations["PostChargesCharge"];
  };
  "/v1/charges/{charge}/capture": {
    /**
     * <p>Capture the payment of an existing, uncaptured, charge. This is the second half of the two-step payment flow, where first you <a href="#create_charge">created a charge</a> with the capture option set to false.</p>
     *
     * <p>Uncaptured payments expire exactly seven days after they are created. If they are not captured by that point in time, they will be marked as refunded and will no longer be capturable.</p>
     */
    post: operations["PostChargesChargeCapture"];
  };
  "/v1/charges/{charge}/dispute": {
    /** <p>Retrieve a dispute for a specified charge.</p> */
    get: operations["GetChargesChargeDispute"];
    post: operations["PostChargesChargeDispute"];
  };
  "/v1/charges/{charge}/dispute/close": {
    post: operations["PostChargesChargeDisputeClose"];
  };
  "/v1/charges/{charge}/refund": {
    /**
     * <p>When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.</p>
     *
     * <p>Creating a new refund will refund a charge that has previously been created but not yet refunded.
     * Funds will be refunded to the credit or debit card that was originally charged.</p>
     *
     * <p>You can optionally refund only part of a charge.
     * You can do so multiple times, until the entire charge has been refunded.</p>
     *
     * <p>Once entirely refunded, a charge can’t be refunded again.
     * This method will raise an error when called on an already-refunded charge,
     * or when trying to refund more money than is left on a charge.</p>
     */
    post: operations["PostChargesChargeRefund"];
  };
  "/v1/charges/{charge}/refunds": {
    /** <p>You can see a list of the refunds belonging to a specific charge. Note that the 10 most recent refunds are always available by default on the charge object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p> */
    get: operations["GetChargesChargeRefunds"];
    /** <p>Create a refund.</p> */
    post: operations["PostChargesChargeRefunds"];
  };
  "/v1/charges/{charge}/refunds/{refund}": {
    /** <p>Retrieves the details of an existing refund.</p> */
    get: operations["GetChargesChargeRefundsRefund"];
    /** <p>Update a specified refund.</p> */
    post: operations["PostChargesChargeRefundsRefund"];
  };
  "/v1/checkout/sessions": {
    /** <p>Returns a list of Checkout Sessions.</p> */
    get: operations["GetCheckoutSessions"];
    /** <p>Creates a Session object.</p> */
    post: operations["PostCheckoutSessions"];
  };
  "/v1/checkout/sessions/{session}": {
    /** <p>Retrieves a Session object.</p> */
    get: operations["GetCheckoutSessionsSession"];
  };
  "/v1/country_specs": {
    /** <p>Lists all Country Spec objects available in the API.</p> */
    get: operations["GetCountrySpecs"];
  };
  "/v1/country_specs/{country}": {
    /** <p>Returns a Country Spec for a given Country code.</p> */
    get: operations["GetCountrySpecsCountry"];
  };
  "/v1/coupons": {
    /** <p>Returns a list of your coupons.</p> */
    get: operations["GetCoupons"];
    /**
     * <p>You can create coupons easily via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.</p>
     *
     * <p>A coupon has either a <code>percent_off</code> or an <code>amount_off</code> and <code>currency</code>. If you set an <code>amount_off</code>, that amount will be subtracted from any invoice’s subtotal. For example, an invoice with a subtotal of <currency>100</currency> will have a final total of <currency>0</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it and an invoice with a subtotal of <currency>300</currency> will have a final total of <currency>100</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it.</p>
     */
    post: operations["PostCoupons"];
  };
  "/v1/coupons/{coupon}": {
    /** <p>Retrieves the coupon with the given ID.</p> */
    get: operations["GetCouponsCoupon"];
    /** <p>Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not editable.</p> */
    post: operations["PostCouponsCoupon"];
    /** <p>You can delete coupons via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means that new customers can’t redeem the coupon. You can also delete coupons via the API.</p> */
    delete: operations["DeleteCouponsCoupon"];
  };
  "/v1/credit_notes": {
    /** <p>Returns a list of credit notes.</p> */
    get: operations["GetCreditNotes"];
    /**
     * <p>Issue a credit note to adjust the amount of a finalized invoice. For a <code>status=open</code> invoice, a credit note reduces
     * its <code>amount_due</code>. For a <code>status=paid</code> invoice, a credit note does not affect its <code>amount_due</code>. Instead, it can result
     * in any combination of the following:</p>
     *
     * <ul>
     *  <li>Refund: create a new refund (using <code>refund_amount</code>) or link an existing refund (using <code>refund</code>).</li>
     *  <li>Customer balance credit: credit the customer’s balance (using <code>credit_amount</code>) which will be automatically applied to their next invoice when it’s finalized.</li>
     *  <li>Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using <code>out_of_band_amount</code>).</li>
     * </ul>
     *
     * <p>For post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.</p>
     *
     * <p>You may issue multiple credit notes for an invoice. Each credit note will increment the invoice’s <code>pre_payment_credit_notes_amount</code>
     * or <code>post_payment_credit_notes_amount</code> depending on its <code>status</code> at the time of credit note creation.</p>
     */
    post: operations["PostCreditNotes"];
  };
  "/v1/credit_notes/preview": {
    /** <p>Get a preview of a credit note without creating it.</p> */
    get: operations["GetCreditNotesPreview"];
  };
  "/v1/credit_notes/preview/lines": {
    /** <p>When retrieving a credit note preview, you’ll get a <strong>lines</strong> property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.</p> */
    get: operations["GetCreditNotesPreviewLines"];
  };
  "/v1/credit_notes/{credit_note}/lines": {
    /** <p>When retrieving a credit note, you’ll get a <strong>lines</strong> property containing the the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p> */
    get: operations["GetCreditNotesCreditNoteLines"];
  };
  "/v1/credit_notes/{id}": {
    /** <p>Retrieves the credit note object with the given identifier.</p> */
    get: operations["GetCreditNotesId"];
    /** <p>Updates an existing credit note.</p> */
    post: operations["PostCreditNotesId"];
  };
  "/v1/credit_notes/{id}/void": {
    /** <p>Marks a credit note as void. Learn more about <a href="/docs/billing/invoices/credit-notes#voiding">voiding credit notes</a>.</p> */
    post: operations["PostCreditNotesIdVoid"];
  };
  "/v1/customers": {
    /** <p>Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.</p> */
    get: operations["GetCustomers"];
    /** <p>Creates a new customer object.</p> */
    post: operations["PostCustomers"];
  };
  "/v1/customers/{customer}": {
    /** <p>Retrieves the details of an existing customer. You need only supply the unique customer identifier that was returned upon customer creation.</p> */
    get: operations["GetCustomersCustomer"];
    /**
     * <p>Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the <strong>source</strong> parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the <strong>source</strong> parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the <code>past_due</code> state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the <strong>default_source</strong> for a customer will not trigger this behavior.</p>
     *
     * <p>This request accepts mostly the same arguments as the customer creation call.</p>
     */
    post: operations["PostCustomersCustomer"];
    /** <p>Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.</p> */
    delete: operations["DeleteCustomersCustomer"];
  };
  "/v1/customers/{customer}/balance_transactions": {
    /** <p>Returns a list of transactions that updated the customer’s <a href="/docs/api/customers/object#customer_object-balance"><code>balance</code></a>.</p> */
    get: operations["GetCustomersCustomerBalanceTransactions"];
    /** <p>Creates an immutable transaction that updates the customer’s <a href="/docs/api/customers/object#customer_object-balance"><code>balance</code></a>.</p> */
    post: operations["PostCustomersCustomerBalanceTransactions"];
  };
  "/v1/customers/{customer}/balance_transactions/{transaction}": {
    /** <p>Retrieves a specific transaction that updated the customer’s <a href="/docs/api/customers/object#customer_object-balance"><code>balance</code></a>.</p> */
    get: operations["GetCustomersCustomerBalanceTransactionsTransaction"];
    /** <p>Most customer balance transaction fields are immutable, but you may update its <code>description</code> and <code>metadata</code>.</p> */
    post: operations["PostCustomersCustomerBalanceTransactionsTransaction"];
  };
  "/v1/customers/{customer}/bank_accounts": {
    /** <p>You can see a list of the bank accounts belonging to a Customer. Note that the 10 most recent sources are always available by default on the Customer. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional bank accounts.</p> */
    get: operations["GetCustomersCustomerBankAccounts"];
    /**
     * <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
     *
     * <p>If the card’s owner has no default card, then the new card will become the default.
     * However, if the owner already has a default, then it will not change.
     * To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
     */
    post: operations["PostCustomersCustomerBankAccounts"];
  };
  "/v1/customers/{customer}/bank_accounts/{id}": {
    /** <p>By default, you can see the 10 most recent sources stored on a Customer directly on the object, but you can also retrieve details about a specific bank account stored on the Stripe account.</p> */
    get: operations["GetCustomersCustomerBankAccountsId"];
    /** <p>Update a specified source for a given customer.</p> */
    post: operations["PostCustomersCustomerBankAccountsId"];
    /** <p>Delete a specified source for a given customer.</p> */
    delete: operations["DeleteCustomersCustomerBankAccountsId"];
  };
  "/v1/customers/{customer}/bank_accounts/{id}/verify": {
    /** <p>Verify a specified bank account for a given customer.</p> */
    post: operations["PostCustomersCustomerBankAccountsIdVerify"];
  };
  "/v1/customers/{customer}/cards": {
    /**
     * <p>You can see a list of the cards belonging to a customer.
     * Note that the 10 most recent sources are always available on the <code>Customer</code> object.
     * If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional cards.</p>
     */
    get: operations["GetCustomersCustomerCards"];
    /**
     * <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
     *
     * <p>If the card’s owner has no default card, then the new card will become the default.
     * However, if the owner already has a default, then it will not change.
     * To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
     */
    post: operations["PostCustomersCustomerCards"];
  };
  "/v1/customers/{customer}/cards/{id}": {
    /** <p>You can always see the 10 most recent cards directly on a customer; this method lets you retrieve details about a specific card stored on the customer.</p> */
    get: operations["GetCustomersCustomerCardsId"];
    /** <p>Update a specified source for a given customer.</p> */
    post: operations["PostCustomersCustomerCardsId"];
    /** <p>Delete a specified source for a given customer.</p> */
    delete: operations["DeleteCustomersCustomerCardsId"];
  };
  "/v1/customers/{customer}/discount": {
    get: operations["GetCustomersCustomerDiscount"];
    /** <p>Removes the currently applied discount on a customer.</p> */
    delete: operations["DeleteCustomersCustomerDiscount"];
  };
  "/v1/customers/{customer}/sources": {
    /** <p>List sources for a specified customer.</p> */
    get: operations["GetCustomersCustomerSources"];
    /**
     * <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
     *
     * <p>If the card’s owner has no default card, then the new card will become the default.
     * However, if the owner already has a default, then it will not change.
     * To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
     */
    post: operations["PostCustomersCustomerSources"];
  };
  "/v1/customers/{customer}/sources/{id}": {
    /** <p>Retrieve a specified source for a given customer.</p> */
    get: operations["GetCustomersCustomerSourcesId"];
    /** <p>Update a specified source for a given customer.</p> */
    post: operations["PostCustomersCustomerSourcesId"];
    /** <p>Delete a specified source for a given customer.</p> */
    delete: operations["DeleteCustomersCustomerSourcesId"];
  };
  "/v1/customers/{customer}/sources/{id}/verify": {
    /** <p>Verify a specified bank account for a given customer.</p> */
    post: operations["PostCustomersCustomerSourcesIdVerify"];
  };
  "/v1/customers/{customer}/subscriptions": {
    /** <p>You can see a list of the customer’s active subscriptions. Note that the 10 most recent active subscriptions are always available by default on the customer object. If you need more than those 10, you can use the limit and starting_after parameters to page through additional subscriptions.</p> */
    get: operations["GetCustomersCustomerSubscriptions"];
    /** <p>Creates a new subscription on an existing customer.</p> */
    post: operations["PostCustomersCustomerSubscriptions"];
  };
  "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}": {
    /** <p>Retrieves the subscription with the given ID.</p> */
    get: operations["GetCustomersCustomerSubscriptionsSubscriptionExposedId"];
    /** <p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href="#upcoming_invoice">upcoming invoice</a> endpoint.</p> */
    post: operations["PostCustomersCustomerSubscriptionsSubscriptionExposedId"];
    /**
     * <p>Cancels a customer’s subscription. If you set the <code>at_period_end</code> parameter to <code>true</code>, the subscription will remain active until the end of the period, at which point it will be canceled and not renewed. Otherwise, with the default <code>false</code> value, the subscription is terminated immediately. In either case, the customer will not be charged again for the subscription.</p>
     *
     * <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>
     *
     * <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
     */
    delete: operations["DeleteCustomersCustomerSubscriptionsSubscriptionExposedId"];
  };
  "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}/discount": {
    get: operations["GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount"];
    /** <p>Removes the currently applied discount on a customer.</p> */
    delete: operations["DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount"];
  };
  "/v1/customers/{customer}/tax_ids": {
    /** <p>Returns a list of tax IDs for a customer.</p> */
    get: operations["GetCustomersCustomerTaxIds"];
    /** <p>Creates a new <code>TaxID</code> object for a customer.</p> */
    post: operations["PostCustomersCustomerTaxIds"];
  };
  "/v1/customers/{customer}/tax_ids/{id}": {
    /** <p>Retrieves the <code>TaxID</code> object with the given identifier.</p> */
    get: operations["GetCustomersCustomerTaxIdsId"];
    /** <p>Deletes an existing <code>TaxID</code> object.</p> */
    delete: operations["DeleteCustomersCustomerTaxIdsId"];
  };
  "/v1/disputes": {
    /** <p>Returns a list of your disputes.</p> */
    get: operations["GetDisputes"];
  };
  "/v1/disputes/{dispute}": {
    /** <p>Retrieves the dispute with the given ID.</p> */
    get: operations["GetDisputesDispute"];
    /**
     * <p>When you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your <a href="https://dashboard.stripe.com/disputes">dashboard</a>, but if you prefer, you can use the API to submit evidence programmatically.</p>
     *
     * <p>Depending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our <a href="/docs/disputes/categories">guide to dispute types</a>.</p>
     */
    post: operations["PostDisputesDispute"];
  };
  "/v1/disputes/{dispute}/close": {
    /**
     * <p>Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.</p>
     *
     * <p>The status of the dispute will change from <code>needs_response</code> to <code>lost</code>. <em>Closing a dispute is irreversible</em>.</p>
     */
    post: operations["PostDisputesDisputeClose"];
  };
  "/v1/ephemeral_keys": {
    /** <p>Creates a short-lived API key for a given resource.</p> */
    post: operations["PostEphemeralKeys"];
  };
  "/v1/ephemeral_keys/{key}": {
    /** <p>Invalidates a short-lived API key for a given resource.</p> */
    delete: operations["DeleteEphemeralKeysKey"];
  };
  "/v1/events": {
    /** <p>List events, going back up to 30 days. Each event data is rendered according to Stripe API version at its creation time, specified in <a href="/docs/api/events/object">event object</a> <code>api_version</code> attribute (not according to your current Stripe API version or <code>Stripe-Version</code> header).</p> */
    get: operations["GetEvents"];
  };
  "/v1/events/{id}": {
    /** <p>Retrieves the details of an event. Supply the unique identifier of the event, which you might have received in a webhook.</p> */
    get: operations["GetEventsId"];
  };
  "/v1/exchange_rates": {
    /** <p>Returns a list of objects that contain the rates at which foreign currencies are converted to one another. Only shows the currencies for which Stripe supports.</p> */
    get: operations["GetExchangeRates"];
  };
  "/v1/exchange_rates/{currency}": {
    /** <p>Retrieves the exchange rates from the given currency to every supported currency.</p> */
    get: operations["GetExchangeRatesCurrency"];
  };
  "/v1/file_links": {
    /** <p>Returns a list of file links.</p> */
    get: operations["GetFileLinks"];
    /** <p>Creates a new file link object.</p> */
    post: operations["PostFileLinks"];
  };
  "/v1/file_links/{link}": {
    /** <p>Retrieves the file link with the given ID.</p> */
    get: operations["GetFileLinksLink"];
    /** <p>Updates an existing file link object. Expired links can no longer be updated.</p> */
    post: operations["PostFileLinksLink"];
  };
  "/v1/files": {
    /** <p>Returns a list of the files that your account has access to. The files are returned sorted by creation date, with the most recently created files appearing first.</p> */
    get: operations["GetFiles"];
    /**
     * <p>To upload a file to Stripe, you’ll need to send a request of type <code>multipart/form-data</code>. The request should contain the file you would like to upload, as well as the parameters for creating a file.</p>
     *
     * <p>All of Stripe’s officially supported Client libraries should have support for sending <code>multipart/form-data</code>.</p>
     */
    post: operations["PostFiles"];
  };
  "/v1/files/{file}": {
    /** <p>Retrieves the details of an existing file object. Supply the unique file ID from a file, and Stripe will return the corresponding file object. To access file contents, see the <a href="/docs/file-upload#download-file-contents">File Upload Guide</a>.</p> */
    get: operations["GetFilesFile"];
  };
  "/v1/invoiceitems": {
    /** <p>Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.</p> */
    get: operations["GetInvoiceitems"];
    /** <p>Creates an item to be added to a draft invoice. If no invoice is specified, the item will be on the next invoice created for the customer specified.</p> */
    post: operations["PostInvoiceitems"];
  };
  "/v1/invoiceitems/{invoiceitem}": {
    /** <p>Retrieves the invoice item with the given ID.</p> */
    get: operations["GetInvoiceitemsInvoiceitem"];
    /** <p>Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed.</p> */
    post: operations["PostInvoiceitemsInvoiceitem"];
    /** <p>Deletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.</p> */
    delete: operations["DeleteInvoiceitemsInvoiceitem"];
  };
  "/v1/invoices": {
    /** <p>You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.</p> */
    get: operations["GetInvoices"];
    /** <p>This endpoint creates a draft invoice for a given customer. The draft invoice created pulls in all pending invoice items on that customer, including prorations.</p> */
    post: operations["PostInvoices"];
  };
  "/v1/invoices/upcoming": {
    /**
     * <p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discount that is applicable to the customer.</p>
     *
     * <p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p>
     *
     * <p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass a <code>proration_date</code> parameter when doing the actual subscription update. The value passed in should be the same as the <code>subscription_proration_date</code> returned on the upcoming invoice resource. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period[start]</code> is equal to the <code>subscription_proration_date</code> on the upcoming invoice resource.</p>
     */
    get: operations["GetInvoicesUpcoming"];
  };
  "/v1/invoices/upcoming/lines": {
    /** <p>When retrieving an upcoming invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p> */
    get: operations["GetInvoicesUpcomingLines"];
  };
  "/v1/invoices/{invoice}": {
    /** <p>Retrieves the invoice with the given ID.</p> */
    get: operations["GetInvoicesInvoice"];
    /**
     * <p>Draft invoices are fully editable. Once an invoice is <a href="/docs/billing/invoices/workflow#finalized">finalized</a>,
     * monetary values, as well as <code>collection_method</code>, become uneditable.</p>
     *
     * <p>If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on,
     * sending reminders for, or <a href="/docs/billing/invoices/reconciliation">automatically reconciling</a> invoices, pass
     * <code>auto_advance=false</code>.</p>
     */
    post: operations["PostInvoicesInvoice"];
    /** <p>Permanently deletes a draft invoice. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized, it must be <a href="#void_invoice">voided</a>.</p> */
    delete: operations["DeleteInvoicesInvoice"];
  };
  "/v1/invoices/{invoice}/finalize": {
    /** <p>Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.</p> */
    post: operations["PostInvoicesInvoiceFinalize"];
  };
  "/v1/invoices/{invoice}/lines": {
    /** <p>When retrieving an invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p> */
    get: operations["GetInvoicesInvoiceLines"];
  };
  "/v1/invoices/{invoice}/mark_uncollectible": {
    /** <p>Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.</p> */
    post: operations["PostInvoicesInvoiceMarkUncollectible"];
  };
  "/v1/invoices/{invoice}/pay": {
    /** <p>Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.</p> */
    post: operations["PostInvoicesInvoicePay"];
  };
  "/v1/invoices/{invoice}/send": {
    /**
     * <p>Stripe will automatically send invoices to customers according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.</p>
     *
     * <p>Requests made in test-mode result in no emails being sent, despite sending an <code>invoice.sent</code> event.</p>
     */
    post: operations["PostInvoicesInvoiceSend"];
  };
  "/v1/invoices/{invoice}/void": {
    /** <p>Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to <a href="#delete_invoice">deletion</a>, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.</p> */
    post: operations["PostInvoicesInvoiceVoid"];
  };
  "/v1/issuer_fraud_records": {
    /** <p>Returns a list of issuer fraud records.</p> */
    get: operations["GetIssuerFraudRecords"];
  };
  "/v1/issuer_fraud_records/{issuer_fraud_record}": {
    /**
     * <p>Retrieves the details of an issuer fraud record that has previously been created. </p>
     *
     * <p>Please refer to the <a href="#issuer_fraud_record_object">issuer fraud record</a> object reference for more details.</p>
     */
    get: operations["GetIssuerFraudRecordsIssuerFraudRecord"];
  };
  "/v1/issuing/authorizations": {
    /** <p>Returns a list of Issuing <code>Authorization</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
    get: operations["GetIssuingAuthorizations"];
  };
  "/v1/issuing/authorizations/{authorization}": {
    /** <p>Retrieves an Issuing <code>Authorization</code> object.</p> */
    get: operations["GetIssuingAuthorizationsAuthorization"];
    /** <p>Updates the specified Issuing <code>Authorization</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
    post: operations["PostIssuingAuthorizationsAuthorization"];
  };
  "/v1/issuing/authorizations/{authorization}/approve": {
    /** <p>Approves a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real-time authorization</a> flow.</p> */
    post: operations["PostIssuingAuthorizationsAuthorizationApprove"];
  };
  "/v1/issuing/authorizations/{authorization}/decline": {
    /** <p>Declines a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real time authorization</a> flow.</p> */
    post: operations["PostIssuingAuthorizationsAuthorizationDecline"];
  };
  "/v1/issuing/cardholders": {
    /** <p>Returns a list of Issuing <code>Cardholder</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
    get: operations["GetIssuingCardholders"];
    /** <p>Creates a new Issuing <code>Cardholder</code> object that can be issued cards.</p> */
    post: operations["PostIssuingCardholders"];
  };
  "/v1/issuing/cardholders/{cardholder}": {
    /** <p>Retrieves an Issuing <code>Cardholder</code> object.</p> */
    get: operations["GetIssuingCardholdersCardholder"];
    /** <p>Updates the specified Issuing <code>Cardholder</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
    post: operations["PostIssuingCardholdersCardholder"];
  };
  "/v1/issuing/cards": {
    /** <p>Returns a list of Issuing <code>Card</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
    get: operations["GetIssuingCards"];
    /** <p>Creates an Issuing <code>Card</code> object.</p> */
    post: operations["PostIssuingCards"];
  };
  "/v1/issuing/cards/{card}": {
    /** <p>Retrieves an Issuing <code>Card</code> object.</p> */
    get: operations["GetIssuingCardsCard"];
    /** <p>Updates the specified Issuing <code>Card</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
    post: operations["PostIssuingCardsCard"];
  };
  "/v1/issuing/disputes": {
    /** <p>Returns a list of Issuing <code>Dispute</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
    get: operations["GetIssuingDisputes"];
    /** <p>Creates an Issuing <code>Dispute</code> object.</p> */
    post: operations["PostIssuingDisputes"];
  };
  "/v1/issuing/disputes/{dispute}": {
    /** <p>Retrieves an Issuing <code>Dispute</code> object.</p> */
    get: operations["GetIssuingDisputesDispute"];
    /** <p>Updates the specified Issuing <code>Dispute</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
    post: operations["PostIssuingDisputesDispute"];
  };
  "/v1/issuing/settlements": {
    /** <p>Returns a list of Issuing <code>Settlement</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
    get: operations["GetIssuingSettlements"];
  };
  "/v1/issuing/settlements/{settlement}": {
    /** <p>Retrieves an Issuing <code>Settlement</code> object.</p> */
    get: operations["GetIssuingSettlementsSettlement"];
    /** <p>Updates the specified Issuing <code>Settlement</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
    post: operations["PostIssuingSettlementsSettlement"];
  };
  "/v1/issuing/transactions": {
    /** <p>Returns a list of Issuing <code>Transaction</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
    get: operations["GetIssuingTransactions"];
  };
  "/v1/issuing/transactions/{transaction}": {
    /** <p>Retrieves an Issuing <code>Transaction</code> object.</p> */
    get: operations["GetIssuingTransactionsTransaction"];
    /** <p>Updates the specified Issuing <code>Transaction</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
    post: operations["PostIssuingTransactionsTransaction"];
  };
  "/v1/mandates/{mandate}": {
    /** <p>Retrieves a Mandate object.</p> */
    get: operations["GetMandatesMandate"];
  };
  "/v1/order_returns": {
    /** <p>Returns a list of your order returns. The returns are returned sorted by creation date, with the most recently created return appearing first.</p> */
    get: operations["GetOrderReturns"];
  };
  "/v1/order_returns/{id}": {
    /** <p>Retrieves the details of an existing order return. Supply the unique order ID from either an order return creation request or the order return list, and Stripe will return the corresponding order information.</p> */
    get: operations["GetOrderReturnsId"];
  };
  "/v1/orders": {
    /** <p>Returns a list of your orders. The orders are returned sorted by creation date, with the most recently created orders appearing first.</p> */
    get: operations["GetOrders"];
    /** <p>Creates a new order object.</p> */
    post: operations["PostOrders"];
  };
  "/v1/orders/{id}": {
    /** <p>Retrieves the details of an existing order. Supply the unique order ID from either an order creation request or the order list, and Stripe will return the corresponding order information.</p> */
    get: operations["GetOrdersId"];
    /** <p>Updates the specific order by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
    post: operations["PostOrdersId"];
  };
  "/v1/orders/{id}/pay": {
    /** <p>Pay an order by providing a <code>source</code> to create a payment.</p> */
    post: operations["PostOrdersIdPay"];
  };
  "/v1/orders/{id}/returns": {
    /** <p>Return all or part of an order. The order must have a status of <code>paid</code> or <code>fulfilled</code> before it can be returned. Once all items have been returned, the order will become <code>canceled</code> or <code>returned</code> depending on which status the order started in.</p> */
    post: operations["PostOrdersIdReturns"];
  };
  "/v1/payment_intents": {
    /** <p>Returns a list of PaymentIntents.</p> */
    get: operations["GetPaymentIntents"];
    /**
     * <p>Creates a PaymentIntent object.</p>
     *
     * <p>After the PaymentIntent is created, attach a payment method and <a href="/docs/api/payment_intents/confirm">confirm</a>
     * to continue the payment. You can read more about the different payment flows
     * available via the Payment Intents API <a href="/docs/payments/payment-intents">here</a>.</p>
     *
     * <p>When <code>confirm=true</code> is used during creation, it is equivalent to creating
     * and confirming the PaymentIntent in the same call. You may use any parameters
     * available in the <a href="/docs/api/payment_intents/confirm">confirm API</a> when <code>confirm=true</code>
     * is supplied.</p>
     */
    post: operations["PostPaymentIntents"];
  };
  "/v1/payment_intents/{intent}": {
    /**
     * <p>Retrieves the details of a PaymentIntent that has previously been created. </p>
     *
     * <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>
     *
     * <p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href="#payment_intent_object">payment intent</a> object reference for more details.</p>
     */
    get: operations["GetPaymentIntentsIntent"];
    /**
     * <p>Updates properties on a PaymentIntent object without confirming.</p>
     *
     * <p>Depending on which properties you update, you may need to confirm the
     * PaymentIntent again. For example, updating the <code>payment_method</code> will
     * always require you to confirm the PaymentIntent again. If you prefer to
     * update and confirm at the same time, we recommend updating properties via
     * the <a href="/docs/api/payment_intents/confirm">confirm API</a> instead.</p>
     */
    post: operations["PostPaymentIntentsIntent"];
  };
  "/v1/payment_intents/{intent}/cancel": {
    /**
     * <p>A PaymentIntent object can be canceled when it is in one of these statuses: <code>requires_payment_method</code>, <code>requires_capture</code>, <code>requires_confirmation</code>, <code>requires_action</code>. </p>
     *
     * <p>Once canceled, no additional charges will be made by the PaymentIntent and any operations on the PaymentIntent will fail with an error. For PaymentIntents with <code>status='requires_capture'</code>, the remaining <code>amount_capturable</code> will automatically be refunded.</p>
     */
    post: operations["PostPaymentIntentsIntentCancel"];
  };
  "/v1/payment_intents/{intent}/capture": {
    /**
     * <p>Capture the funds of an existing uncaptured PaymentIntent when its status is <code>requires_capture</code>.</p>
     *
     * <p>Uncaptured PaymentIntents will be canceled exactly seven days after they are created.</p>
     *
     * <p>Learn more about <a href="/docs/payments/capture-later">separate authorization and capture</a>.</p>
     */
    post: operations["PostPaymentIntentsIntentCapture"];
  };
  "/v1/payment_intents/{intent}/confirm": {
    /**
     * <p>Confirm that your customer intends to pay with current or provided
     * payment method. Upon confirmation, the PaymentIntent will attempt to initiate
     * a payment.</p>
     *
     * <p>If the selected payment method requires additional authentication steps, the
     * PaymentIntent will transition to the <code>requires_action</code> status and
     * suggest additional actions via <code>next_action</code>. If payment fails,
     * the PaymentIntent will transition to the <code>requires_payment_method</code> status. If
     * payment succeeds, the PaymentIntent will transition to the <code>succeeded</code>
     * status (or <code>requires_capture</code>, if <code>capture_method</code> is set to <code>manual</code>).</p>
     *
     * <p>If the <code>confirmation_method</code> is <code>automatic</code>, payment may be attempted
     * using our <a href="/docs/stripe-js/reference#stripe-handle-card-payment">client SDKs</a>
     * and the PaymentIntent’s <a href="#payment_intent_object-client_secret">client_secret</a>.
     * After <code>next_action</code>s are handled by the client, no additional
     * confirmation is required to complete the payment.</p>
     *
     * <p>If the <code>confirmation_method</code> is <code>manual</code>, all payment attempts must be
     * initiated using a secret key.
     * If any actions are required for the payment, the PaymentIntent will
     * return to the <code>requires_confirmation</code> state
     * after those actions are completed. Your server needs to then
     * explicitly re-confirm the PaymentIntent to initiate the next payment
     * attempt. Read the <a href="/docs/payments/payment-intents/web-manual">expanded documentation</a>
     * to learn more about manual confirmation.</p>
     */
    post: operations["PostPaymentIntentsIntentConfirm"];
  };
  "/v1/payment_methods": {
    /** <p>Returns a list of PaymentMethods for a given Customer</p> */
    get: operations["GetPaymentMethods"];
    /** <p>Creates a PaymentMethod object. Read the <a href="/docs/stripe-js/reference#stripe-create-payment-method">Stripe.js reference</a> to learn how to create PaymentMethods via Stripe.js.</p> */
    post: operations["PostPaymentMethods"];
  };
  "/v1/payment_methods/{payment_method}": {
    /** <p>Retrieves a PaymentMethod object.</p> */
    get: operations["GetPaymentMethodsPaymentMethod"];
    /** <p>Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.</p> */
    post: operations["PostPaymentMethodsPaymentMethod"];
  };
  "/v1/payment_methods/{payment_method}/attach": {
    /**
     * <p>Attaches a PaymentMethod object to a Customer.</p>
     *
     * <p>To attach a new PaymentMethod to a customer for future payments, we recommend you use a <a href="/docs/api/setup_intents">SetupIntent</a>
     * or a PaymentIntent with <a href="/docs/api/payment_intents/create#create_payment_intent-setup_future_usage">setup_future_usage</a>.
     * These approaches will perform any necessary steps to ensure that the PaymentMethod can be used in a future payment. Using the
     * <code>/v1/payment_methods/:id/attach</code> endpoint does not ensure that future payments can be made with the attached PaymentMethod.
     * See <a href="/docs/payments/payment-intents#future-usage">Optimizing cards for future payments</a> for more information about setting up future payments.</p>
     *
     * <p>To use this PaymentMethod as the default for invoice or subscription payments,
     * set <a href="/docs/api/customers/update#update_customer-invoice_settings-default_payment_method"><code>invoice_settings.default_payment_method</code></a>,
     * on the Customer to the PaymentMethod’s ID.</p>
     */
    post: operations["PostPaymentMethodsPaymentMethodAttach"];
  };
  "/v1/payment_methods/{payment_method}/detach": {
    /** <p>Detaches a PaymentMethod object from a Customer.</p> */
    post: operations["PostPaymentMethodsPaymentMethodDetach"];
  };
  "/v1/payouts": {
    /** <p>Returns a list of existing payouts sent to third-party bank accounts or that Stripe has sent you. The payouts are returned in sorted order, with the most recently created payouts appearing first.</p> */
    get: operations["GetPayouts"];
    /**
     * <p>To send funds to your own bank account, you create a new payout object. Your <a href="#balance">Stripe balance</a> must be able to cover the payout amount, or you’ll receive an “Insufficient Funds” error.</p>
     *
     * <p>If your API key is in test mode, money won’t actually be sent, though everything else will occur as if in live mode.</p>
     *
     * <p>If you are creating a manual payout on a Stripe account that uses multiple payment source types, you’ll need to specify the source type balance that the payout should draw from. The <a href="#balance_object">balance object</a> details available and pending amounts by source type.</p>
     */
    post: operations["PostPayouts"];
  };
  "/v1/payouts/{payout}": {
    /** <p>Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list, and Stripe will return the corresponding payout information.</p> */
    get: operations["GetPayoutsPayout"];
    /** <p>Updates the specified payout by setting the values of the parameters passed. Any parameters not provided will be left unchanged. This request accepts only the metadata as arguments.</p> */
    post: operations["PostPayoutsPayout"];
  };
  "/v1/payouts/{payout}/cancel": {
    /** <p>A previously created payout can be canceled if it has not yet been paid out. Funds will be refunded to your available balance. You may not cancel automatic Stripe payouts.</p> */
    post: operations["PostPayoutsPayoutCancel"];
  };
  "/v1/plans": {
    /** <p>Returns a list of your plans.</p> */
    get: operations["GetPlans"];
    /** <p>You can create plans using the API, or in the Stripe <a href="https://dashboard.stripe.com/subscriptions/products">Dashboard</a>.</p> */
    post: operations["PostPlans"];
  };
  "/v1/plans/{plan}": {
    /** <p>Retrieves the plan with the given ID.</p> */
    get: operations["GetPlansPlan"];
    /** <p>Updates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a plan’s ID, amount, currency, or billing cycle.</p> */
    post: operations["PostPlansPlan"];
    /** <p>Deleting plans means new subscribers can’t be added. Existing subscribers aren’t affected.</p> */
    delete: operations["DeletePlansPlan"];
  };
  "/v1/products": {
    /** <p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.</p> */
    get: operations["GetProducts"];
    /** <p>Creates a new product object. To create a product for use with orders, see <a href="#create_product">Products</a>.</p> */
    post: operations["PostProducts"];
  };
  "/v1/products/{id}": {
    /** <p>Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.</p> */
    get: operations["GetProductsId"];
    /** <p>Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
    post: operations["PostProductsId"];
    /** <p>Delete a product. Deleting a product with type=<code>good</code> is only possible if it has no SKUs associated with it. Deleting a product with type=<code>service</code> is only possible if it has no plans associated with it.</p> */
    delete: operations["DeleteProductsId"];
  };
  "/v1/radar/early_fraud_warnings": {
    /** <p>Returns a list of early fraud warnings.</p> */
    get: operations["GetRadarEarlyFraudWarnings"];
  };
  "/v1/radar/early_fraud_warnings/{early_fraud_warning}": {
    /**
     * <p>Retrieves the details of an early fraud warning that has previously been created. </p>
     *
     * <p>Please refer to the <a href="#early_fraud_warning_object">early fraud warning</a> object reference for more details.</p>
     */
    get: operations["GetRadarEarlyFraudWarningsEarlyFraudWarning"];
  };
  "/v1/radar/value_list_items": {
    /** <p>Returns a list of <code>ValueListItem</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
    get: operations["GetRadarValueListItems"];
    /** <p>Creates a new <code>ValueListItem</code> object, which is added to the specified parent value list.</p> */
    post: operations["PostRadarValueListItems"];
  };
  "/v1/radar/value_list_items/{item}": {
    /** <p>Retrieves a <code>ValueListItem</code> object.</p> */
    get: operations["GetRadarValueListItemsItem"];
    /** <p>Deletes a <code>ValueListItem</code> object, removing it from its parent value list.</p> */
    delete: operations["DeleteRadarValueListItemsItem"];
  };
  "/v1/radar/value_lists": {
    /** <p>Returns a list of <code>ValueList</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
    get: operations["GetRadarValueLists"];
    /** <p>Creates a new <code>ValueList</code> object, which can then be referenced in rules.</p> */
    post: operations["PostRadarValueLists"];
  };
  "/v1/radar/value_lists/{value_list}": {
    /** <p>Retrieves a <code>ValueList</code> object.</p> */
    get: operations["GetRadarValueListsValueList"];
    /** <p>Updates a <code>ValueList</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that <code>item_type</code> is immutable.</p> */
    post: operations["PostRadarValueListsValueList"];
    /** <p>Deletes a <code>ValueList</code> object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.</p> */
    delete: operations["DeleteRadarValueListsValueList"];
  };
  "/v1/recipients": {
    /** <p>Returns a list of your recipients. The recipients are returned sorted by creation date, with the most recently created recipients appearing first.</p> */
    get: operations["GetRecipients"];
    /**
     * <p>Creates a new <code>Recipient</code> object and verifies the recipient’s identity.
     * Also verifies the recipient’s bank account information or debit card, if either is provided.</p>
     */
    post: operations["PostRecipients"];
  };
  "/v1/recipients/{id}": {
    /** <p>Retrieves the details of an existing recipient. You need only supply the unique recipient identifier that was returned upon recipient creation.</p> */
    get: operations["GetRecipientsId"];
    /**
     * <p>Updates the specified recipient by setting the values of the parameters passed.
     * Any parameters not provided will be left unchanged.</p>
     *
     * <p>If you update the name or tax ID, the identity verification will automatically be rerun.
     * If you update the bank account, the bank account validation will automatically be rerun.</p>
     */
    post: operations["PostRecipientsId"];
    /** <p>Permanently deletes a recipient. It cannot be undone.</p> */
    delete: operations["DeleteRecipientsId"];
  };
  "/v1/refunds": {
    /** <p>Returns a list of all refunds you’ve previously created. The refunds are returned in sorted order, with the most recent refunds appearing first. For convenience, the 10 most recent refunds are always available by default on the charge object.</p> */
    get: operations["GetRefunds"];
    /** <p>Create a refund.</p> */
    post: operations["PostRefunds"];
  };
  "/v1/refunds/{refund}": {
    /** <p>Retrieves the details of an existing refund.</p> */
    get: operations["GetRefundsRefund"];
    /**
     * <p>Updates the specified refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
     *
     * <p>This request only accepts <code>metadata</code> as an argument.</p>
     */
    post: operations["PostRefundsRefund"];
  };
  "/v1/reporting/report_runs": {
    /** <p>Returns a list of Report Runs, with the most recent appearing first. (Requires a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p> */
    get: operations["GetReportingReportRuns"];
    /** <p>Creates a new object and begin running the report. (Requires a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p> */
    post: operations["PostReportingReportRuns"];
  };
  "/v1/reporting/report_runs/{report_run}": {
    /** <p>Retrieves the details of an existing Report Run. (Requires a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p> */
    get: operations["GetReportingReportRunsReportRun"];
  };
  "/v1/reporting/report_types": {
    /** <p>Returns a full list of Report Types. (Requires a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p> */
    get: operations["GetReportingReportTypes"];
  };
  "/v1/reporting/report_types/{report_type}": {
    /** <p>Retrieves the details of a Report Type. (Requires a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p> */
    get: operations["GetReportingReportTypesReportType"];
  };
  "/v1/reviews": {
    /** <p>Returns a list of <code>Review</code> objects that have <code>open</code> set to <code>true</code>. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
    get: operations["GetReviews"];
  };
  "/v1/reviews/{review}": {
    /** <p>Retrieves a <code>Review</code> object.</p> */
    get: operations["GetReviewsReview"];
  };
  "/v1/reviews/{review}/approve": {
    /** <p>Approves a <code>Review</code> object, closing it and removing it from the list of reviews.</p> */
    post: operations["PostReviewsReviewApprove"];
  };
  "/v1/setup_intents": {
    /** <p>Returns a list of SetupIntents.</p> */
    get: operations["GetSetupIntents"];
    /**
     * <p>Creates a SetupIntent object.</p>
     *
     * <p>After the SetupIntent is created, attach a payment method and <a href="/docs/api/setup_intents/confirm">confirm</a>
     * to collect any required permissions to charge the payment method later.</p>
     */
    post: operations["PostSetupIntents"];
  };
  "/v1/setup_intents/{intent}": {
    /**
     * <p>Retrieves the details of a SetupIntent that has previously been created. </p>
     *
     * <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>
     *
     * <p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href="#setup_intent_object">SetupIntent</a> object reference for more details.</p>
     */
    get: operations["GetSetupIntentsIntent"];
    /** <p>Updates a SetupIntent object.</p> */
    post: operations["PostSetupIntentsIntent"];
  };
  "/v1/setup_intents/{intent}/cancel": {
    /**
     * <p>A SetupIntent object can be canceled when it is in one of these statuses: <code>requires_payment_method</code>, <code>requires_capture</code>, <code>requires_confirmation</code>, <code>requires_action</code>. </p>
     *
     * <p>Once canceled, setup is abandoned and any operations on the SetupIntent will fail with an error.</p>
     */
    post: operations["PostSetupIntentsIntentCancel"];
  };
  "/v1/setup_intents/{intent}/confirm": {
    /**
     * <p>Confirm that your customer intends to set up the current or
     * provided payment method. For example, you would confirm a SetupIntent
     * when a customer hits the “Save” button on a payment method management
     * page on your website.</p>
     *
     * <p>If the selected payment method does not require any additional
     * steps from the customer, the SetupIntent will transition to the
     * <code>succeeded</code> status.</p>
     *
     * <p>Otherwise, it will transition to the <code>requires_action</code> status and
     * suggest additional actions via <code>next_action</code>. If setup fails,
     * the SetupIntent will transition to the
     * <code>requires_payment_method</code> status.</p>
     */
    post: operations["PostSetupIntentsIntentConfirm"];
  };
  "/v1/sigma/scheduled_query_runs": {
    /** <p>Returns a list of scheduled query runs.</p> */
    get: operations["GetSigmaScheduledQueryRuns"];
  };
  "/v1/sigma/scheduled_query_runs/{scheduled_query_run}": {
    /** <p>Retrieves the details of an scheduled query run.</p> */
    get: operations["GetSigmaScheduledQueryRunsScheduledQueryRun"];
  };
  "/v1/skus": {
    /** <p>Returns a list of your SKUs. The SKUs are returned sorted by creation date, with the most recently created SKUs appearing first.</p> */
    get: operations["GetSkus"];
    /** <p>Creates a new SKU associated with a product.</p> */
    post: operations["PostSkus"];
  };
  "/v1/skus/{id}": {
    /** <p>Retrieves the details of an existing SKU. Supply the unique SKU identifier from either a SKU creation request or from the product, and Stripe will return the corresponding SKU information.</p> */
    get: operations["GetSkusId"];
    /**
     * <p>Updates the specific SKU by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
     *
     * <p>Note that a SKU’s <code>attributes</code> are not editable. Instead, you would need to deactivate the existing SKU and create a new one with the new attribute values.</p>
     */
    post: operations["PostSkusId"];
    /** <p>Delete a SKU. Deleting a SKU is only possible until it has been used in an order.</p> */
    delete: operations["DeleteSkusId"];
  };
  "/v1/sources": {
    /** <p>Creates a new source object.</p> */
    post: operations["PostSources"];
  };
  "/v1/sources/{source}": {
    /** <p>Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.</p> */
    get: operations["GetSourcesSource"];
    /**
     * <p>Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
     *
     * <p>This request accepts the <code>metadata</code> and <code>owner</code> as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our <a href="/docs/sources">payment method guides</a> for more detail.</p>
     */
    post: operations["PostSourcesSource"];
  };
  "/v1/sources/{source}/mandate_notifications/{mandate_notification}": {
    /** <p>Retrieves a new Source MandateNotification.</p> */
    get: operations["GetSourcesSourceMandateNotificationsMandateNotification"];
  };
  "/v1/sources/{source}/source_transactions": {
    /** <p>List source transactions for a given source.</p> */
    get: operations["GetSourcesSourceSourceTransactions"];
  };
  "/v1/sources/{source}/source_transactions/{source_transaction}": {
    /** <p>Retrieve an existing source transaction object. Supply the unique source ID from a source creation request and the source transaction ID and Stripe will return the corresponding up-to-date source object information.</p> */
    get: operations["GetSourcesSourceSourceTransactionsSourceTransaction"];
  };
  "/v1/sources/{source}/verify": {
    /** <p>Verify a given source.</p> */
    post: operations["PostSourcesSourceVerify"];
  };
  "/v1/subscription_items": {
    /** <p>Returns a list of your subscription items for a given subscription.</p> */
    get: operations["GetSubscriptionItems"];
    /** <p>Adds a new item to an existing subscription. No existing items will be changed or replaced.</p> */
    post: operations["PostSubscriptionItems"];
  };
  "/v1/subscription_items/{item}": {
    /** <p>Retrieves the invoice item with the given ID.</p> */
    get: operations["GetSubscriptionItemsItem"];
    /** <p>Updates the plan or quantity of an item on a current subscription.</p> */
    post: operations["PostSubscriptionItemsItem"];
    /** <p>Deletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.</p> */
    delete: operations["DeleteSubscriptionItemsItem"];
  };
  "/v1/subscription_items/{subscription_item}/usage_record_summaries": {
    /**
     * <p>For the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that’s been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the billing plan’s month of September).</p>
     *
     * <p>The list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn’t ended yet. Since new usage records can still be added, the returned summary information for the subscription item’s ID should be seen as unstable until the subscription billing period ends.</p>
     */
    get: operations["GetSubscriptionItemsSubscriptionItemUsageRecordSummaries"];
  };
  "/v1/subscription_items/{subscription_item}/usage_records": {
    /**
     * <p>Creates a usage record for a specified subscription item and date, and fills it with a quantity.</p>
     *
     * <p>Usage records provide <code>quantity</code> information that Stripe uses to track how much a customer is using your service. With usage information and the pricing model set up by the <a href="https://stripe.com/docs/billing/subscriptions/metered-billing">metered billing</a> plan, Stripe helps you send accurate invoices to your customers.</p>
     *
     * <p>The default calculation for usage is to add up all the <code>quantity</code> values of the usage records within a billing period. You can change this default behavior with the billing plan’s <code>aggregate_usage</code> <a href="/docs/api/plans/create#create_plan-aggregate_usage">parameter</a>. When there is more than one usage record with the same timestamp, Stripe adds the <code>quantity</code> values together. In most cases, this is the desired resolution, however, you can change this behavior with the <code>action</code> parameter.</p>
     *
     * <p>The default pricing model for metered billing is <a href="/docs/api/plans/object#plan_object-billing_scheme">per-unit pricing</a>. For finer granularity, you can configure metered billing to have a <a href="https://stripe.com/docs/billing/subscriptions/tiers">tiered pricing</a> model.</p>
     */
    post: operations["PostSubscriptionItemsSubscriptionItemUsageRecords"];
  };
  "/v1/subscription_schedules": {
    /** <p>Retrieves the list of your subscription schedules.</p> */
    get: operations["GetSubscriptionSchedules"];
    /** <p>Creates a new subscription schedule object. Each customer can have up to 25 active or scheduled subscriptions.</p> */
    post: operations["PostSubscriptionSchedules"];
  };
  "/v1/subscription_schedules/{schedule}": {
    /** <p>Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.</p> */
    get: operations["GetSubscriptionSchedulesSchedule"];
    /** <p>Updates an existing subscription schedule.</p> */
    post: operations["PostSubscriptionSchedulesSchedule"];
  };
  "/v1/subscription_schedules/{schedule}/cancel": {
    /** <p>Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is <code>not_started</code> or <code>active</code>.</p> */
    post: operations["PostSubscriptionSchedulesScheduleCancel"];
  };
  "/v1/subscription_schedules/{schedule}/release": {
    /** <p>Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is <code>not_started</code> or <code>active</code>. If the subscription schedule is currently associated with a subscription, releasing it will remove its <code>subscription</code> property and set the subscription’s ID to the <code>released_subscription</code> property.</p> */
    post: operations["PostSubscriptionSchedulesScheduleRelease"];
  };
  "/v1/subscriptions": {
    /** <p>By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify <code>status=canceled</code>.</p> */
    get: operations["GetSubscriptions"];
    /** <p>Creates a new subscription on an existing customer. Each customer can have up to 25 active or scheduled subscriptions.</p> */
    post: operations["PostSubscriptions"];
  };
  "/v1/subscriptions/{subscription_exposed_id}": {
    /** <p>Retrieves the subscription with the given ID.</p> */
    get: operations["GetSubscriptionsSubscriptionExposedId"];
    /** <p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href="#upcoming_invoice">upcoming invoice</a> endpoint.</p> */
    post: operations["PostSubscriptionsSubscriptionExposedId"];
    /**
     * <p>Cancels a customer’s subscription immediately. The customer will not be charged again for the subscription.</p>
     *
     * <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>
     *
     * <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
     */
    delete: operations["DeleteSubscriptionsSubscriptionExposedId"];
  };
  "/v1/subscriptions/{subscription_exposed_id}/discount": {
    /** <p>Removes the currently applied discount on a subscription.</p> */
    delete: operations["DeleteSubscriptionsSubscriptionExposedIdDiscount"];
  };
  "/v1/tax_rates": {
    /** <p>Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.</p> */
    get: operations["GetTaxRates"];
    /** <p>Creates a new tax rate.</p> */
    post: operations["PostTaxRates"];
  };
  "/v1/tax_rates/{tax_rate}": {
    /** <p>Retrieves a tax rate with the given ID</p> */
    get: operations["GetTaxRatesTaxRate"];
    /** <p>Updates an existing tax rate.</p> */
    post: operations["PostTaxRatesTaxRate"];
  };
  "/v1/terminal/connection_tokens": {
    /** <p>To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.</p> */
    post: operations["PostTerminalConnectionTokens"];
  };
  "/v1/terminal/locations": {
    /** <p>Returns a list of <code>Location</code> objects.</p> */
    get: operations["GetTerminalLocations"];
    /** <p>Creates a new <code>Location</code> object.</p> */
    post: operations["PostTerminalLocations"];
  };
  "/v1/terminal/locations/{location}": {
    /** <p>Retrieves a <code>Location</code> object.</p> */
    get: operations["GetTerminalLocationsLocation"];
    /** <p>Updates a <code>Location</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
    post: operations["PostTerminalLocationsLocation"];
    /** <p>Deletes a <code>Location</code> object.</p> */
    delete: operations["DeleteTerminalLocationsLocation"];
  };
  "/v1/terminal/readers": {
    /** <p>Returns a list of <code>Reader</code> objects.</p> */
    get: operations["GetTerminalReaders"];
    /** <p>Creates a new <code>Reader</code> object.</p> */
    post: operations["PostTerminalReaders"];
  };
  "/v1/terminal/readers/{reader}": {
    /** <p>Retrieves a <code>Reader</code> object.</p> */
    get: operations["GetTerminalReadersReader"];
    /** <p>Updates a <code>Reader</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
    post: operations["PostTerminalReadersReader"];
    /** <p>Deletes a <code>Reader</code> object.</p> */
    delete: operations["DeleteTerminalReadersReader"];
  };
  "/v1/tokens": {
    /**
     * <p>Creates a single-use token that represents a bank account’s details.
     * This token can be used with any API method in place of a bank account dictionary. This token can be used only once, by attaching it to a <a href="#accounts">Custom account</a>.</p>
     */
    post: operations["PostTokens"];
  };
  "/v1/tokens/{token}": {
    /** <p>Retrieves the token with the given ID.</p> */
    get: operations["GetTokensToken"];
  };
  "/v1/topups": {
    /** <p>Returns a list of top-ups.</p> */
    get: operations["GetTopups"];
    /** <p>Top up the balance of an account</p> */
    post: operations["PostTopups"];
  };
  "/v1/topups/{topup}": {
    /** <p>Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.</p> */
    get: operations["GetTopupsTopup"];
    /** <p>Updates the metadata of a top-up. Other top-up details are not editable by design.</p> */
    post: operations["PostTopupsTopup"];
  };
  "/v1/topups/{topup}/cancel": {
    /** <p>Cancels a top-up. Only pending top-ups can be canceled.</p> */
    post: operations["PostTopupsTopupCancel"];
  };
  "/v1/transfers": {
    /** <p>Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.</p> */
    get: operations["GetTransfers"];
    /** <p>To send funds from your Stripe account to a connected account, you create a new transfer object. Your <a href="#balance">Stripe balance</a> must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds” error.</p> */
    post: operations["PostTransfers"];
  };
  "/v1/transfers/{id}/reversals": {
    /** <p>You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional reversals.</p> */
    get: operations["GetTransfersIdReversals"];
    /**
     * <p>When you create a new reversal, you must specify a transfer to create it on.</p>
     *
     * <p>When reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.</p>
     *
     * <p>Once entirely reversed, a transfer can’t be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.</p>
     */
    post: operations["PostTransfersIdReversals"];
  };
  "/v1/transfers/{transfer}": {
    /** <p>Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.</p> */
    get: operations["GetTransfersTransfer"];
    /**
     * <p>Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
     *
     * <p>This request accepts only metadata as an argument.</p>
     */
    post: operations["PostTransfersTransfer"];
  };
  "/v1/transfers/{transfer}/reversals/{id}": {
    /** <p>By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.</p> */
    get: operations["GetTransfersTransferReversalsId"];
    /**
     * <p>Updates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
     *
     * <p>This request only accepts metadata and description as arguments.</p>
     */
    post: operations["PostTransfersTransferReversalsId"];
  };
  "/v1/webhook_endpoints": {
    /** <p>Returns a list of your webhook endpoints.</p> */
    get: operations["GetWebhookEndpoints"];
    /** <p>A webhook endpoint must have a <code>url</code> and a list of <code>enabled_events</code>. You may optionally specify the Boolean <code>connect</code> parameter. If set to true, then a Connect webhook endpoint that notifies the specified <code>url</code> about events from all connected accounts is created; otherwise an account webhook endpoint that notifies the specified <code>url</code> only about events from your account is created. You can also create webhook endpoints in the <a href="https://dashboard.stripe.com/account/webhooks">webhooks settings</a> section of the Dashboard.</p> */
    post: operations["PostWebhookEndpoints"];
  };
  "/v1/webhook_endpoints/{webhook_endpoint}": {
    /** <p>Retrieves the webhook endpoint with the given ID.</p> */
    get: operations["GetWebhookEndpointsWebhookEndpoint"];
    /** <p>Updates the webhook endpoint. You may edit the <code>url</code>, the list of <code>enabled_events</code>, and the status of your endpoint.</p> */
    post: operations["PostWebhookEndpointsWebhookEndpoint"];
    /** <p>You can also delete webhook endpoints via the <a href="https://dashboard.stripe.com/account/webhooks">webhook endpoint management</a> page of the Stripe dashboard.</p> */
    delete: operations["DeleteWebhookEndpointsWebhookEndpoint"];
  };
}

export interface components {
  schemas: {
    /**
     * This is an object representing a Stripe account. You can retrieve it to see
     * properties on the account like its current e-mail address or if the account is
     * enabled yet to make live charges.
     *
     * Some properties, marked below, are available only to platforms that want to
     * [create and manage Express or Custom accounts](https://stripe.com/docs/connect/accounts).
     */
    account: {
      /** Business information about the account. */
      business_profile?: Partial<components["schemas"]["account_business_profile"]> | null;
      /** The business type. */
      business_type?: ("company" | "government_entity" | "individual" | "non_profit") | null;
      capabilities?: components["schemas"]["account_capabilities"];
      /** Whether the account can create live charges. */
      charges_enabled?: boolean;
      company?: components["schemas"]["legal_entity_company"];
      /** The account's country. */
      country?: string;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created?: number;
      /** Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts). */
      default_currency?: string;
      /** Whether account details have been submitted. Standard accounts cannot receive payouts before this is true. */
      details_submitted?: boolean;
      /** The primary user's email address. */
      email?: string | null;
      /** External accounts (bank accounts and debit cards) currently attached to this account */
      external_accounts?: {
        /** The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards. */
        data: (Partial<components["schemas"]["bank_account"]> & Partial<components["schemas"]["card"]>)[];
        /** True if this list has another page of items after this one that can be fetched. */
        has_more: boolean;
        /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
        object: "list";
        /** The URL where this list can be accessed. */
        url: string;
      };
      /** Unique identifier for the object. */
      id: string;
      individual?: components["schemas"]["person"];
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata?: { [key: string]: string };
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "account";
      /** Whether Stripe can send payouts to this account. */
      payouts_enabled?: boolean;
      requirements?: components["schemas"]["account_requirements"];
      /** Options for customizing how the account functions within Stripe. */
      settings?: Partial<components["schemas"]["account_settings"]> | null;
      tos_acceptance?: components["schemas"]["account_tos_acceptance"];
      /** The Stripe account type. Can be `standard`, `express`, or `custom`. */
      type?: "custom" | "express" | "standard";
    };
    account_branding_settings: {
      /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) An icon for the account. Must be square and at least 128px x 128px. */
      icon?: (Partial<string> & Partial<components["schemas"]["file"]>) | null;
      /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A logo for the account that will be used in Checkout instead of the icon and without the account's name next to it if provided. Must be at least 128px x 128px. */
      logo?: (Partial<string> & Partial<components["schemas"]["file"]>) | null;
      /** A CSS hex color value representing the primary branding color for this account */
      primary_color?: string | null;
      /** A CSS hex color value representing the secondary branding color for this account */
      secondary_color?: string | null;
    };
    account_business_profile: {
      /** [The merchant category code for the account](https://stripe.com/docs/connect/setting-mcc). MCCs are used to classify businesses based on the goods or services they provide. */
      mcc?: string | null;
      /** The customer-facing business name. */
      name?: string | null;
      /** Internal-only description of the product sold or service provided by the business. It's used by Stripe for risk and underwriting purposes. */
      product_description?: string | null;
      /** A publicly available mailing address for sending support issues to. */
      support_address?: Partial<components["schemas"]["address"]> | null;
      /** A publicly available email address for sending support issues to. */
      support_email?: string | null;
      /** A publicly available phone number to call with support issues. */
      support_phone?: string | null;
      /** A publicly available website for handling support issues. */
      support_url?: string | null;
      /** The business's publicly available website. */
      url?: string | null;
    };
    account_capabilities: {
      /** The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges. */
      au_becs_debit_payments?: "active" | "inactive" | "pending";
      /** The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards */
      card_issuing?: "active" | "inactive" | "pending";
      /** The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges. */
      card_payments?: "active" | "inactive" | "pending";
      /** The status of the legacy payments capability of the account. */
      legacy_payments?: "active" | "inactive" | "pending";
      /** The status of the tax reporting 1099-K (US) capability of the account. */
      tax_reporting_us_1099_k?: "active" | "inactive" | "pending";
      /** The status of the tax reporting 1099-MISC (US) capability of the account. */
      tax_reporting_us_1099_misc?: "active" | "inactive" | "pending";
      /** The status of the transfers capability of the account, or whether your platform can transfer funds to the account. */
      transfers?: "active" | "inactive" | "pending";
    };
    account_capability_requirements: {
      /** The date the fields in `currently_due` must be collected by to keep the capability enabled for the account. */
      current_deadline?: number | null;
      /** The fields that need to be collected to keep the capability enabled. If not collected by the `current_deadline`, these fields appear in `past_due` as well, and the capability is disabled. */
      currently_due: string[];
      /** If the capability is disabled, this string describes why. Possible values are `requirement.fields_needed`, `pending.onboarding`, `pending.review`, `rejected_fraud`, or `rejected.other`. */
      disabled_reason?: string | null;
      /** The fields that need to be collected again because validation or verification failed for some reason. */
      errors: components["schemas"]["account_requirements_error"][];
      /** The fields that need to be collected assuming all volume thresholds are reached. As they become required, these fields appear in `currently_due` as well, and the `current_deadline` is set. */
      eventually_due: string[];
      /** The fields that weren't collected by the `current_deadline`. These fields need to be collected to enable the capability for the account. */
      past_due: string[];
      /** Fields that may become required depending on the results of verification or review. An empty array unless an asynchronous verification is pending. If verification fails, the fields in this array become required and move to `currently_due` or `past_due`. */
      pending_verification: string[];
    };
    account_card_payments_settings: {
      decline_on?: components["schemas"]["account_decline_charge_on"];
      /** The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. `statement_descriptor_prefix` is useful for maximizing descriptor space for the dynamic portion. */
      statement_descriptor_prefix?: string | null;
    };
    account_dashboard_settings: {
      /** The display name for this account. This is used on the Stripe Dashboard to differentiate between accounts. */
      display_name?: string | null;
      /** The timezone used in the Stripe Dashboard for this account. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones). */
      timezone?: string | null;
    };
    account_decline_charge_on: {
      /** Whether Stripe automatically declines charges with an incorrect ZIP or postal code. This setting only applies when a ZIP or postal code is provided and they fail bank verification. */
      avs_failure: boolean;
      /** Whether Stripe automatically declines charges with an incorrect CVC. This setting only applies when a CVC is provided and it fails bank verification. */
      cvc_failure: boolean;
    };
    /**
     * Account Links are the means by which a Connect platform grants a connected account permission to access
     * Stripe-hosted applications, such as Connect Onboarding.
     *
     * Related guide: [Connect Onboarding](https://stripe.com/docs/connect/connect-onboarding).
     */
    account_link: {
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** The timestamp at which this account link will expire. */
      expires_at: number;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "account_link";
      /** The URL for the account link. */
      url: string;
    };
    account_payments_settings: {
      /** The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. */
      statement_descriptor?: string | null;
      /** The Kana variation of the default text that appears on credit card statements when a charge is made (Japan only) */
      statement_descriptor_kana?: string | null;
      /** The Kanji variation of the default text that appears on credit card statements when a charge is made (Japan only) */
      statement_descriptor_kanji?: string | null;
    };
    account_payout_settings: {
      /** A Boolean indicating if Stripe should try to reclaim negative balances from an attached bank account. See our [Understanding Connect Account Balances](https://stripe.com/docs/connect/account-balances) documentation for details. Default value is `true` for Express accounts and `false` for Custom accounts. */
      debit_negative_balances: boolean;
      schedule: components["schemas"]["transfer_schedule"];
      /** The text that appears on the bank account statement for payouts. If not set, this defaults to the platform's bank descriptor as set in the Dashboard. */
      statement_descriptor?: string | null;
    };
    account_requirements: {
      /** The date the fields in `currently_due` must be collected by to keep payouts enabled for the account. These fields might block payouts sooner if the next threshold is reached before these fields are collected. */
      current_deadline?: number | null;
      /** The fields that need to be collected to keep the account enabled. If not collected by the `current_deadline`, these fields appear in `past_due` as well, and the account is disabled. */
      currently_due?: string[] | null;
      /** If the account is disabled, this string describes why the account can’t create charges or receive payouts. Can be `requirements.past_due`, `requirements.pending_verification`, `rejected.fraud`, `rejected.terms_of_service`, `rejected.listed`, `rejected.other`, `listed`, `under_review`, or `other`. */
      disabled_reason?: string | null;
      /** The fields that need to be collected again because validation or verification failed for some reason. */
      errors?: components["schemas"]["account_requirements_error"][] | null;
      /** The fields that need to be collected assuming all volume thresholds are reached. As they become required, these fields appear in `currently_due` as well, and the `current_deadline` is set. */
      eventually_due?: string[] | null;
      /** The fields that weren't collected by the `current_deadline`. These fields need to be collected to re-enable the account. */
      past_due?: string[] | null;
      /** Fields that may become required depending on the results of verification or review. An empty array unless an asynchronous verification is pending. If verification fails, the fields in this array become required and move to `currently_due` or `past_due`. */
      pending_verification?: string[] | null;
    };
    account_requirements_error: {
      /** The code for the type of error. */
      code:
        | "invalid_address_city_state_postal_code"
        | "invalid_street_address"
        | "invalid_value_other"
        | "verification_document_address_mismatch"
        | "verification_document_address_missing"
        | "verification_document_corrupt"
        | "verification_document_country_not_supported"
        | "verification_document_dob_mismatch"
        | "verification_document_duplicate_type"
        | "verification_document_expired"
        | "verification_document_failed_copy"
        | "verification_document_failed_greyscale"
        | "verification_document_failed_other"
        | "verification_document_failed_test_mode"
        | "verification_document_fraudulent"
        | "verification_document_id_number_mismatch"
        | "verification_document_id_number_missing"
        | "verification_document_incomplete"
        | "verification_document_invalid"
        | "verification_document_manipulated"
        | "verification_document_missing_back"
        | "verification_document_missing_front"
        | "verification_document_name_mismatch"
        | "verification_document_name_missing"
        | "verification_document_nationality_mismatch"
        | "verification_document_not_readable"
        | "verification_document_not_uploaded"
        | "verification_document_photo_mismatch"
        | "verification_document_too_large"
        | "verification_document_type_not_supported"
        | "verification_failed_address_match"
        | "verification_failed_business_iec_number"
        | "verification_failed_document_match"
        | "verification_failed_id_number_match"
        | "verification_failed_keyed_identity"
        | "verification_failed_keyed_match"
        | "verification_failed_name_match"
        | "verification_failed_other";
      /** An informative message that indicates the error type and provides additional details about the error. */
      reason: string;
      /** The specific user onboarding requirement field (in the requirements hash) that needs to be resolved. */
      requirement: string;
    };
    account_settings: {
      branding: components["schemas"]["account_branding_settings"];
      card_payments: components["schemas"]["account_card_payments_settings"];
      dashboard: components["schemas"]["account_dashboard_settings"];
      payments: components["schemas"]["account_payments_settings"];
      payouts?: components["schemas"]["account_payout_settings"];
    };
    account_tos_acceptance: {
      /** The Unix timestamp marking when the Stripe Services Agreement was accepted by the account representative */
      date?: number | null;
      /** The IP address from which the Stripe Services Agreement was accepted by the account representative */
      ip?: string | null;
      /** The user agent of the browser from which the Stripe Services Agreement was accepted by the account representative */
      user_agent?: string | null;
    };
    address: {
      /** City, district, suburb, town, or village. */
      city?: string | null;
      /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
      country?: string | null;
      /** Address line 1 (e.g., street, PO Box, or company name). */
      line1?: string | null;
      /** Address line 2 (e.g., apartment, suite, unit, or building). */
      line2?: string | null;
      /** ZIP or postal code. */
      postal_code?: string | null;
      /** State, county, province, or region. */
      state?: string | null;
    };
    alipay_account: {
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** The ID of the customer associated with this Alipay Account. */
      customer?:
        | (Partial<string> &
            Partial<components["schemas"]["customer"]> &
            Partial<components["schemas"]["deleted_customer"]>)
        | null;
      /** Uniquely identifies the account and will be the same across all Alipay account objects that are linked to the same Alipay account. */
      fingerprint: string;
      /** Unique identifier for the object. */
      id: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata?: { [key: string]: string };
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "alipay_account";
      /** If the Alipay account object is not reusable, the exact amount that you can create a charge for. */
      payment_amount?: number | null;
      /** If the Alipay account object is not reusable, the exact currency that you can create a charge for. */
      payment_currency?: string | null;
      /** True if you can create multiple payments using this account. If the account is reusable, then you can freely choose the amount of each payment. */
      reusable: boolean;
      /** Whether this Alipay account object has ever been used for a payment. */
      used: boolean;
      /** The username for the Alipay account. */
      username: string;
    };
    api_errors: {
      /** For card errors, the ID of the failed charge. */
      charge?: string;
      /** For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported. */
      code?: string;
      /** For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one. */
      decline_code?: string;
      /** A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported. */
      doc_url?: string;
      /** A human-readable message providing more details about the error. For card errors, these messages can be shown to your users. */
      message?: string;
      /** If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field. */
      param?: string;
      payment_intent?: components["schemas"]["payment_intent"];
      payment_method?: components["schemas"]["payment_method"];
      setup_intent?: components["schemas"]["setup_intent"];
      /** The source object for errors returned on a request involving a source. */
      source?: Partial<components["schemas"]["bank_account"]> &
        Partial<components["schemas"]["card"]> &
        Partial<components["schemas"]["source"]>;
      /** The type of error returned. One of `api_connection_error`, `api_error`, `authentication_error`, `card_error`, `idempotency_error`, `invalid_request_error`, or `rate_limit_error` */
      type:
        | "api_connection_error"
        | "api_error"
        | "authentication_error"
        | "card_error"
        | "idempotency_error"
        | "invalid_request_error"
        | "rate_limit_error";
    };
    apple_pay_domain: {
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      domain_name: string;
      /** Unique identifier for the object. */
      id: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "apple_pay_domain";
    };
    application: {
      /** Unique identifier for the object. */
      id: string;
      /** The name of the application. */
      name?: string | null;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "application";
    };
    application_fee: {
      /** ID of the Stripe account this fee was taken from. */
      account: Partial<string> & Partial<components["schemas"]["account"]>;
      /** Amount earned, in %s. */
      amount: number;
      /** Amount in %s refunded (can be less than the amount attribute on the fee if a partial refund was issued) */
      amount_refunded: number;
      /** ID of the Connect application that earned the fee. */
      application: Partial<string> & Partial<components["schemas"]["application"]>;
      /** Balance transaction that describes the impact of this collected application fee on your account balance (not including refunds). */
      balance_transaction?: (Partial<string> & Partial<components["schemas"]["balance_transaction"]>) | null;
      /** ID of the charge that the application fee was taken from. */
      charge: Partial<string> & Partial<components["schemas"]["charge"]>;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** Unique identifier for the object. */
      id: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "application_fee";
      /** ID of the corresponding charge on the platform account, if this fee was the result of a charge using the `destination` parameter. */
      originating_transaction?: (Partial<string> & Partial<components["schemas"]["charge"]>) | null;
      /** Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false. */
      refunded: boolean;
      /** A list of refunds that have been applied to the fee. */
      refunds: {
        /** Details about each object. */
        data: components["schemas"]["fee_refund"][];
        /** True if this list has another page of items after this one that can be fetched. */
        has_more: boolean;
        /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
        object: "list";
        /** The URL where this list can be accessed. */
        url: string;
      };
    };
    /**
     * This is an object representing your Stripe balance. You can retrieve it to see
     * the balance currently on your Stripe account.
     *
     * You can also retrieve the balance history, which contains a list of
     * [transactions](https://stripe.com/docs/reporting/balance-transaction-types) that contributed to the balance
     * (charges, payouts, and so forth).
     *
     * The available and pending amounts for each currency are broken down further by
     * payment source types.
     *
     * Related guide: [Understanding Connect Account Balances](https://stripe.com/docs/connect/account-balances).
     */
    balance: {
      /** Funds that are available to be transferred or paid out, whether automatically by Stripe or explicitly via the [Transfers API](https://stripe.com/docs/api#transfers) or [Payouts API](https://stripe.com/docs/api#payouts). The available balance for each currency and payment type can be found in the `source_types` property. */
      available: components["schemas"]["balance_amount"][];
      /** Funds held due to negative balances on connected Custom accounts. The connect reserve balance for each currency and payment type can be found in the `source_types` property. */
      connect_reserved?: components["schemas"]["balance_amount"][];
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "balance";
      /** Funds that are not yet available in the balance, due to the 7-day rolling pay cycle. The pending balance for each currency, and for each payment type, can be found in the `source_types` property. */
      pending: components["schemas"]["balance_amount"][];
    };
    balance_amount: {
      /** Balance amount. */
      amount: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      source_types?: components["schemas"]["balance_amount_by_source_type"];
    };
    balance_amount_by_source_type: {
      /** Amount for bank account. */
      bank_account?: number;
      /** Amount for card. */
      card?: number;
      /** Amount for FPX. */
      fpx?: number;
    };
    /**
     * Balance transactions represent funds moving through your Stripe account.
     * They're created for every type of transaction that comes into or flows out of your Stripe account balance.
     *
     * Related guide: [Balance Transaction Types](https://stripe.com/docs/reports/balance-transaction-types).
     */
    balance_transaction: {
      /** Gross amount of the transaction, in %s. */
      amount: number;
      /** The date the transaction's net funds will become available in the Stripe balance. */
      available_on: number;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** An arbitrary string attached to the object. Often useful for displaying to users. */
      description?: string | null;
      /** The exchange rate used, if applicable, for this transaction. Specifically, if money was converted from currency A to currency B, then the `amount` in currency A, times `exchange_rate`, would be the `amount` in currency B. For example, suppose you charged a customer 10.00 EUR. Then the PaymentIntent's `amount` would be `1000` and `currency` would be `eur`. Suppose this was converted into 12.34 USD in your Stripe account. Then the BalanceTransaction's `amount` would be `1234`, `currency` would be `usd`, and `exchange_rate` would be `1.234`. */
      exchange_rate?: number | null;
      /** Fees (in %s) paid for this transaction. */
      fee: number;
      /** Detailed breakdown of fees (in %s) paid for this transaction. */
      fee_details: components["schemas"]["fee"][];
      /** Unique identifier for the object. */
      id: string;
      /** Net amount of the transaction, in %s. */
      net: number;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "balance_transaction";
      /** [Learn more](https://stripe.com/docs/reports/reporting-categories) about how reporting categories can help you understand balance transactions from an accounting perspective. */
      reporting_category: string;
      /** The Stripe object to which this transaction is related. */
      source?:
        | (Partial<string> &
            Partial<components["schemas"]["application_fee"]> &
            Partial<components["schemas"]["charge"]> &
            Partial<components["schemas"]["connect_collection_transfer"]> &
            Partial<components["schemas"]["dispute"]> &
            Partial<components["schemas"]["fee_refund"]> &
            Partial<components["schemas"]["issuing.authorization"]> &
            Partial<components["schemas"]["issuing.transaction"]> &
            Partial<components["schemas"]["payout"]> &
            Partial<components["schemas"]["platform_tax_fee"]> &
            Partial<components["schemas"]["refund"]> &
            Partial<components["schemas"]["reserve_transaction"]> &
            Partial<components["schemas"]["tax_deducted_at_source"]> &
            Partial<components["schemas"]["topup"]> &
            Partial<components["schemas"]["transfer"]> &
            Partial<components["schemas"]["transfer_reversal"]>)
        | null;
      /** If the transaction's net funds are available in the Stripe balance yet. Either `available` or `pending`. */
      status: string;
      /** Transaction type: `adjustment`, `advance`, `advance_funding`, `application_fee`, `application_fee_refund`, `charge`, `connect_collection_transfer`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_transaction`, `payment`, `payment_failure_refund`, `payment_refund`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. [Learn more](https://stripe.com/docs/reports/balance-transaction-types) about balance transaction types and what they represent. If you are looking to classify transactions for accounting purposes, you might want to consider `reporting_category` instead. */
      type:
        | "adjustment"
        | "advance"
        | "advance_funding"
        | "application_fee"
        | "application_fee_refund"
        | "charge"
        | "connect_collection_transfer"
        | "issuing_authorization_hold"
        | "issuing_authorization_release"
        | "issuing_transaction"
        | "payment"
        | "payment_failure_refund"
        | "payment_refund"
        | "payout"
        | "payout_cancel"
        | "payout_failure"
        | "refund"
        | "refund_failure"
        | "reserve_transaction"
        | "reserved_funds"
        | "stripe_fee"
        | "stripe_fx_fee"
        | "tax_fee"
        | "topup"
        | "topup_reversal"
        | "transfer"
        | "transfer_cancel"
        | "transfer_failure"
        | "transfer_refund";
    };
    /**
     * These bank accounts are payment methods on `Customer` objects.
     *
     * On the other hand [External Accounts](https://stripe.com/docs/api#external_accounts) are transfer
     * destinations on `Account` objects for [Custom accounts](https://stripe.com/docs/connect/custom-accounts).
     * They can be bank accounts or debit cards as well, and are documented in the links above.
     *
     * Related guide: [Processing ACH & Bank Transfers](https://stripe.com/docs/payments/ach-bank-transfers).
     */
    bank_account: {
      /** The ID of the account that the bank account is associated with. */
      account?: (Partial<string> & Partial<components["schemas"]["account"]>) | null;
      /** The name of the person or business that owns the bank account. */
      account_holder_name?: string | null;
      /** The type of entity that holds the account. This can be either `individual` or `company`. */
      account_holder_type?: string | null;
      /** Name of the bank associated with the routing number (e.g., `WELLS FARGO`). */
      bank_name?: string | null;
      /** Two-letter ISO code representing the country the bank account is located in. */
      country: string;
      /** Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. */
      currency: string;
      /** The ID of the customer that the bank account is associated with. */
      customer?:
        | (Partial<string> &
            Partial<components["schemas"]["customer"]> &
            Partial<components["schemas"]["deleted_customer"]>)
        | null;
      /** Whether this bank account is the default external account for its currency. */
      default_for_currency?: boolean | null;
      /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
      fingerprint?: string | null;
      /** Unique identifier for the object. */
      id: string;
      /** The last four digits of the bank account number. */
      last4: string;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata?: { [key: string]: string } | null;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "bank_account";
      /** The routing transit number for the bank account. */
      routing_number?: string | null;
      /**
       * For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn't had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a transfer sent to this bank account fails, we'll set the status to `errored` and will not continue to send transfers until the bank details are updated.
       *
       * For external accounts, possible values are `new` and `errored`. Validations aren't run against external accounts because they're only used for payouts. This means the other statuses don't apply. If a transfer fails, the status is set to `errored` and transfers are stopped until account details are updated.
       */
      status: string;
    };
    billing_details: {
      /** Billing address. */
      address?: Partial<components["schemas"]["address"]> | null;
      /** Email address. */
      email?: string | null;
      /** Full name. */
      name?: string | null;
      /** Billing phone number (including extension). */
      phone?: string | null;
    };
    /**
     * A Session describes the instantiation of the Self-serve Portal for
     * a particular customer. By visiting the Self-serve Portal's URL, the customer
     * can manage their subscriptions and view their invoice payment history. For security reasons,
     * Sessions are short-lived and will expire if the customer does not visit the URL.
     * Create Sessions on-demand.
     *
     * Related guide: [Self-serve Portal](https://stripe.com/docs/billing/subscriptions/integrating-self-serve).
     */
    "billing_portal.session": {
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** The ID of the customer for this session. */
      customer: string;
      /** Unique identifier for the object. */
      id: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "billing_portal.session";
      /** The URL to which Stripe should send customers when they click on the link to return to your website. */
      return_url: string;
      /** The short-lived URL of the session giving customers access to the self-serve portal. */
      url: string;
    };
    bitcoin_receiver: {
      /** True when this bitcoin receiver has received a non-zero amount of bitcoin. */
      active: boolean;
      /** The amount of `currency` that you are collecting as payment. */
      amount: number;
      /** The amount of `currency` to which `bitcoin_amount_received` has been converted. */
      amount_received: number;
      /** The amount of bitcoin that the customer should send to fill the receiver. The `bitcoin_amount` is denominated in Satoshi: there are 10^8 Satoshi in one bitcoin. */
      bitcoin_amount: number;
      /** The amount of bitcoin that has been sent by the customer to this receiver. */
      bitcoin_amount_received: number;
      /** This URI can be displayed to the customer as a clickable link (to activate their bitcoin client) or as a QR code (for mobile wallets). */
      bitcoin_uri: string;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) to which the bitcoin will be converted. */
      currency: string;
      /** The customer ID of the bitcoin receiver. */
      customer?: string | null;
      /** An arbitrary string attached to the object. Often useful for displaying to users. */
      description?: string | null;
      /** The customer's email address, set by the API call that creates the receiver. */
      email?: string | null;
      /** This flag is initially false and updates to true when the customer sends the `bitcoin_amount` to this receiver. */
      filled: boolean;
      /** Unique identifier for the object. */
      id: string;
      /** A bitcoin address that is specific to this receiver. The customer can send bitcoin to this address to fill the receiver. */
      inbound_address: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: { [key: string]: string };
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "bitcoin_receiver";
      /** The ID of the payment created from the receiver, if any. Hidden when viewing the receiver with a publishable key. */
      payment?: string | null;
      /** The refund address of this bitcoin receiver. */
      refund_address?: string | null;
      /** A list with one entry for each time that the customer sent bitcoin to the receiver. Hidden when viewing the receiver with a publishable key. */
      transactions?: {
        /** Details about each object. */
        data: components["schemas"]["bitcoin_transaction"][];
        /** True if this list has another page of items after this one that can be fetched. */
        has_more: boolean;
        /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
        object: "list";
        /** The URL where this list can be accessed. */
        url: string;
      };
      /** This receiver contains uncaptured funds that can be used for a payment or refunded. */
      uncaptured_funds: boolean;
      /** Indicate if this source is used for payment. */
      used_for_payment?: boolean | null;
    };
    bitcoin_transaction: {
      /** The amount of `currency` that the transaction was converted to in real-time. */
      amount: number;
      /** The amount of bitcoin contained in the transaction. */
      bitcoin_amount: number;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) to which this transaction was converted. */
      currency: string;
      /** Unique identifier for the object. */
      id: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "bitcoin_transaction";
      /** The receiver to which this transaction was sent. */
      receiver: string;
    };
    /**
     * This is an object representing a capability for a Stripe account.
     *
     * Related guide: [Capabilities Overview](https://stripe.com/docs/connect/capabilities-overview).
     */
    capability: {
      /** The account for which the capability enables functionality. */
      account: Partial<string> & Partial<components["schemas"]["account"]>;
      /** The identifier for the capability. */
      id: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "capability";
      /** Whether the capability has been requested. */
      requested: boolean;
      /** Time at which the capability was requested. Measured in seconds since the Unix epoch. */
      requested_at?: number | null;
      requirements?: components["schemas"]["account_capability_requirements"];
      /** The status of the capability. Can be `active`, `inactive`, `pending`, or `unrequested`. */
      status: "active" | "disabled" | "inactive" | "pending" | "unrequested";
    };
    /**
     * You can store multiple cards on a customer in order to charge the customer
     * later. You can also store multiple debit cards on a recipient in order to
     * transfer to those cards later.
     *
     * Related guide: [Card Payments with Sources](https://stripe.com/docs/sources/cards).
     */
    card: {
      /** The account this card belongs to. This attribute will not be in the card object if the card belongs to a customer or recipient instead. */
      account?: (Partial<string> & Partial<components["schemas"]["account"]>) | null;
      /** City/District/Suburb/Town/Village. */
      address_city?: string | null;
      /** Billing address country, if provided when creating card. */
      address_country?: string | null;
      /** Address line 1 (Street address/PO Box/Company name). */
      address_line1?: string | null;
      /** If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
      address_line1_check?: string | null;
      /** Address line 2 (Apartment/Suite/Unit/Building). */
      address_line2?: string | null;
      /** State/County/Province/Region. */
      address_state?: string | null;
      /** ZIP or postal code. */
      address_zip?: string | null;
      /** If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
      address_zip_check?: string | null;
      /** A set of available payout methods for this card. Will be either `["standard"]` or `["standard", "instant"]`. Only values from this set should be passed as the `method` when creating a transfer. */
      available_payout_methods?: ("instant" | "standard")[] | null;
      /** Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`. */
      brand: string;
      /** Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
      country?: string | null;
      currency?: string | null;
      /** The customer that this card belongs to. This attribute will not be in the card object if the card belongs to an account or recipient instead. */
      customer?:
        | (Partial<string> &
            Partial<components["schemas"]["customer"]> &
            Partial<components["schemas"]["deleted_customer"]>)
        | null;
      /** If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
      cvc_check?: string | null;
      /** Whether this card is the default external account for its currency. */
      default_for_currency?: boolean | null;
      /** (For tokenized numbers only.) The last four digits of the device account number. */
      dynamic_last4?: string | null;
      /** Two-digit number representing the card's expiration month. */
      exp_month: number;
      /** Four-digit number representing the card's expiration year. */
      exp_year: number;
      /** Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number,for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number. */
      fingerprint?: string | null;
      /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
      funding: string;
      /** Unique identifier for the object. */
      id: string;
      /** The last four digits of the card. */
      last4: string;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: { [key: string]: string };
      /** Cardholder name. */
      name?: string | null;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "card";
      /** The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead. */
      recipient?: (Partial<string> & Partial<components["schemas"]["recipient"]>) | null;
      /** If the card number is tokenized, this is the method that was used. Can be `amex_express_checkout`, `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null. */
      tokenization_method?: string | null;
    };
    card_mandate_payment_method_details: { [key: string]: any };
    /**
     * To charge a credit or a debit card, you create a `Charge` object. You can
     * retrieve and refund individual charges as well as list all charges. Charges
     * are identified by a unique, random ID.
     *
     * Related guide: [Accept a payment with the Charges API](https://stripe.com/docs/payments/accept-a-payment-charges).
     */
    charge: {
      /** Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
      amount: number;
      /** Amount in %s refunded (can be less than the amount attribute on the charge if a partial refund was issued). */
      amount_refunded: number;
      /** ID of the Connect application that created the charge. */
      application?: (Partial<string> & Partial<components["schemas"]["application"]>) | null;
      /** The application fee (if any) for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details. */
      application_fee?: (Partial<string> & Partial<components["schemas"]["application_fee"]>) | null;
      /** The amount of the application fee (if any) for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details. */
      application_fee_amount?: number | null;
      /** ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes). */
      balance_transaction?: (Partial<string> & Partial<components["schemas"]["balance_transaction"]>) | null;
      billing_details: components["schemas"]["billing_details"];
      /** The full statement descriptor that is passed to card networks, and that is displayed on your customers' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined. */
      calculated_statement_descriptor?: string | null;
      /** If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured. */
      captured: boolean;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** ID of the customer this charge is for if one exists. */
      customer?:
        | (Partial<string> &
            Partial<components["schemas"]["customer"]> &
            Partial<components["schemas"]["deleted_customer"]>)
        | null;
      /** An arbitrary string attached to the object. Often useful for displaying to users. */
      description?: string | null;
      /** Whether the charge has been disputed. */
      disputed: boolean;
      /** Error code explaining reason for charge failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes). */
      failure_code?: string | null;
      /** Message to user further explaining reason for charge failure if available. */
      failure_message?: string | null;
      /** Information on fraud assessments for the charge. */
      fraud_details?: Partial<components["schemas"]["charge_fraud_details"]> | null;
      /** Unique identifier for the object. */
      id: string;
      /** ID of the invoice this charge is for if one exists. */
      invoice?: (Partial<string> & Partial<components["schemas"]["invoice"]>) | null;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: { [key: string]: string };
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "charge";
      /** The account (if any) the charge was made on behalf of without triggering an automatic transfer. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers) for details. */
      on_behalf_of?: (Partial<string> & Partial<components["schemas"]["account"]>) | null;
      /** ID of the order this charge is for if one exists. */
      order?: (Partial<string> & Partial<components["schemas"]["order"]>) | null;
      /** Details about whether the payment was accepted, and why. See [understanding declines](https://stripe.com/docs/declines) for details. */
      outcome?: Partial<components["schemas"]["charge_outcome"]> | null;
      /** `true` if the charge succeeded, or was successfully authorized for later capture. */
      paid: boolean;
      /** ID of the PaymentIntent associated with this charge, if one exists. */
      payment_intent?: (Partial<string> & Partial<components["schemas"]["payment_intent"]>) | null;
      /** ID of the payment method used in this charge. */
      payment_method?: string | null;
      /** Details about the payment method at the time of the transaction. */
      payment_method_details?: Partial<components["schemas"]["payment_method_details"]> | null;
      /** This is the email address that the receipt for this charge was sent to. */
      receipt_email?: string | null;
      /** This is the transaction number that appears on email receipts sent for this charge. This attribute will be `null` until a receipt has been sent. */
      receipt_number?: string | null;
      /** This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt. */
      receipt_url?: string | null;
      /** Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false. */
      refunded: boolean;
      /** A list of refunds that have been applied to the charge. */
      refunds: {
        /** Details about each object. */
        data: components["schemas"]["refund"][];
        /** True if this list has another page of items after this one that can be fetched. */
        has_more: boolean;
        /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
        object: "list";
        /** The URL where this list can be accessed. */
        url: string;
      };
      /** ID of the review associated with this charge if one exists. */
      review?: (Partial<string> & Partial<components["schemas"]["review"]>) | null;
      /** Shipping information for the charge. */
      shipping?: Partial<components["schemas"]["shipping"]> | null;
      /** The transfer ID which created this charge. Only present if the charge came from another Stripe account. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details. */
      source_transfer?: (Partial<string> & Partial<components["schemas"]["transfer"]>) | null;
      /** For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customers’ statements. Must contain at least one letter, maximum 22 characters. */
      statement_descriptor?: string | null;
      /** Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
      statement_descriptor_suffix?: string | null;
      /** The status of the payment is either `succeeded`, `pending`, or `failed`. */
      status: string;
      /** ID of the transfer to the `destination` account (only applicable if the charge was created using the `destination` parameter). */
      transfer?: Partial<string> & Partial<components["schemas"]["transfer"]>;
      /** An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details. */
      transfer_data?: Partial<components["schemas"]["charge_transfer_data"]> | null;
      /** A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details. */
      transfer_group?: string | null;
    };
    charge_fraud_details: {
      /** Assessments from Stripe. If set, the value is `fraudulent`. */
      stripe_report?: string;
      /** Assessments reported by you. If set, possible values of are `safe` and `fraudulent`. */
      user_report?: string;
    };
    charge_outcome: {
      /** Possible values are `approved_by_network`, `declined_by_network`, `not_sent_to_network`, and `reversed_after_approval`. The value `reversed_after_approval` indicates the payment was [blocked by Stripe](https://stripe.com/docs/declines#blocked-payments) after bank authorization, and may temporarily appear as "pending" on a cardholder's statement. */
      network_status?: string | null;
      /** An enumerated value providing a more detailed explanation of the outcome's `type`. Charges blocked by Radar's default block rule have the value `highest_risk_level`. Charges placed in review by Radar's default review rule have the value `elevated_risk_level`. Charges authorized, blocked, or placed in review by custom rules have the value `rule`. See [understanding declines](https://stripe.com/docs/declines) for more details. */
      reason?: string | null;
      /** Stripe's evaluation of the riskiness of the payment. Possible values for evaluated payments are `normal`, `elevated`, `highest`. For non-card payments, and card-based payments predating the public assignment of risk levels, this field will have the value `not_assessed`. In the event of an error in the evaluation, this field will have the value `unknown`. */
      risk_level?: string;
      /** Stripe's evaluation of the riskiness of the payment. Possible values for evaluated payments are between 0 and 100. For non-card payments, card-based payments predating the public assignment of risk scores, or in the event of an error during evaluation, this field will not be present. This field is only available with Radar for Fraud Teams. */
      risk_score?: number;
      /** The ID of the Radar rule that matched the payment, if applicable. */
      rule?: Partial<string> & Partial<components["schemas"]["rule"]>;
      /** A human-readable description of the outcome type and reason, designed for you (the recipient of the payment), not your customer. */
      seller_message?: string | null;
      /** Possible values are `authorized`, `manual_review`, `issuer_declined`, `blocked`, and `invalid`. See [understanding declines](https://stripe.com/docs/declines) and [Radar reviews](https://stripe.com/docs/radar/reviews) for details. */
      type: string;
    };
    charge_transfer_data: {
      /** The amount transferred to the destination account, if specified. By default, the entire charge amount is transferred to the destination account. */
      amount?: number | null;
      /** ID of an existing, connected Stripe account to transfer funds to if `transfer_data` was specified in the charge request. */
      destination: Partial<string> & Partial<components["schemas"]["account"]>;
    };
    /**
     * A Checkout Session represents your customer's session as they pay for
     * one-time purchases or subscriptions through [Checkout](https://stripe.com/docs/payments/checkout).
     * We recommend creating a new Session each time your customer attempts to pay.
     *
     * Once payment is successful, the Checkout Session will contain a reference
     * to the [Customer](https://stripe.com/docs/api/customers), and either the successful
     * [PaymentIntent](https://stripe.com/docs/api/payment_intents) or an active
     * [Subscription](https://stripe.com/docs/api/subscriptions).
     *
     * You can create a Checkout Session on your server and pass its ID to the
     * client to begin Checkout.
     *
     * Related guide: [Checkout Server Quickstart](https://stripe.com/docs/payments/checkout/api).
     */
    "checkout.session": {
      /**
       * The value (`auto` or `required`) for whether Checkout collected the
       * customer's billing address.
       */
      billing_address_collection?: string | null;
      /** The URL the customer will be directed to if they decide to cancel payment and return to your website. */
      cancel_url: string;
      /**
       * A unique string to reference the Checkout Session. This can be a
       * customer ID, a cart ID, or similar, and can be used to reconcile the
       * session with your internal systems.
       */
      client_reference_id?: string | null;
      /**
       * The ID of the customer for this session.
       * For Checkout Sessions in `payment` or `subscription` mode, Checkout
       * will create a new customer object based on information provided
       * during the session unless an existing customer was provided when
       * the session was created.
       */
      customer?: (Partial<string> & Partial<components["schemas"]["customer"]>) | null;
      /**
       * If provided, this value will be used when the Customer object is created.
       * If not provided, customers will be asked to enter their email address.
       * Use this parameter to prefill customer data if you already have an email
       * on file. To access information about the customer once a session is
       * complete, use the `customer` field.
       */
      customer_email?: string | null;
      /** The line items, plans, or SKUs purchased by the customer. */
      display_items?: components["schemas"]["checkout_session_display_item"][] | null;
      /**
       * Unique identifier for the object. Used to pass to `redirectToCheckout`
       * in Stripe.js.
       */
      id: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used. */
      locale?:
        | (
            | "auto"
            | "da"
            | "de"
            | "en"
            | "es"
            | "fi"
            | "fr"
            | "it"
            | "ja"
            | "ms"
            | "nb"
            | "nl"
            | "pl"
            | "pt"
            | "pt-BR"
            | "sv"
            | "zh"
          )
        | null;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata?: { [key: string]: string } | null;
      /** The mode of the Checkout Session, one of `payment`, `setup`, or `subscription`. */
      mode?: ("payment" | "setup" | "subscription") | null;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "checkout.session";
      /** The ID of the PaymentIntent for Checkout Sessions in `payment` mode. */
      payment_intent?: (Partial<string> & Partial<components["schemas"]["payment_intent"]>) | null;
      /**
       * A list of the types of payment methods (e.g. card) this Checkout
       * Session is allowed to accept.
       */
      payment_method_types: string[];
      /** The ID of the SetupIntent for Checkout Sessions in `setup` mode. */
      setup_intent?: (Partial<string> & Partial<components["schemas"]["setup_intent"]>) | null;
      /** Shipping information for this Checkout Session. */
      shipping?: Partial<components["schemas"]["shipping"]> | null;
      /** When set, provides configuration for Checkout to collect a shipping address from a customer. */
      shipping_address_collection?: Partial<
        components["schemas"]["payment_pages_payment_page_resources_shipping_address_collection"]
      > | null;
      /**
       * Describes the type of transaction being performed by Checkout in order to customize
       * relevant text on the page, such as the submit button. `submit_type` can only be
       * specified on Checkout Sessions in `payment` mode, but not Checkout Sessions
       * in `subscription` or `setup` mode.
       */
      submit_type?: ("auto" | "book" | "donate" | "pay") | null;
      /** The ID of the subscription for Checkout Sessions in `subscription` mode. */
      subscription?: (Partial<string> & Partial<components["schemas"]["subscription"]>) | null;
      /**
       * The URL the customer will be directed to after the payment or
       * subscription creation is successful.
       */
      success_url: string;
    };
    checkout_session_custom_display_item_description: {
      /** The description of the line item. */
      description?: string | null;
      /** The images of the line item. */
      images?: string[] | null;
      /** The name of the line item. */
      name: string;
    };
    checkout_session_display_item: {
      /** Amount for the display item. */
      amount?: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency?: string;
      custom?: components["schemas"]["checkout_session_custom_display_item_description"];
      plan?: components["schemas"]["plan"];
      /** Quantity of the display item being purchased. */
      quantity?: number;
      sku?: components["schemas"]["sku"];
      /** The type of display item. One of `custom`, `plan` or `sku` */
      type?: string;
    };
    connect_collection_transfer: {
      /** Amount transferred, in %s. */
      amount: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** ID of the account that funds are being collected for. */
      destination: Partial<string> & Partial<components["schemas"]["account"]>;
      /** Unique identifier for the object. */
      id: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "connect_collection_transfer";
    };
    /**
     * Stripe needs to collect certain pieces of information about each account
     * created. These requirements can differ depending on the account's country. The
     * Country Specs API makes these rules available to your integration.
     *
     * You can also view the information from this API call as [an online
     * guide](/docs/connect/required-verification-information).
     */
    country_spec: {
      /** The default currency for this country. This applies to both payment methods and bank accounts. */
      default_currency: string;
      /** Unique identifier for the object. Represented as the ISO country code for this country. */
      id: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "country_spec";
      /** Currencies that can be accepted in the specific country (for transfers). */
      supported_bank_account_currencies: { [key: string]: string[] };
      /** Currencies that can be accepted in the specified country (for payments). */
      supported_payment_currencies: string[];
      /** Payment methods available in the specified country. You may need to enable some payment methods (e.g., [ACH](https://stripe.com/docs/ach)) on your account before they appear in this list. The `stripe` payment method refers to [charging through your platform](https://stripe.com/docs/connect/destination-charges). */
      supported_payment_methods: string[];
      /** Countries that can accept transfers from the specified country. */
      supported_transfer_countries: string[];
      verification_fields: components["schemas"]["country_spec_verification_fields"];
    };
    country_spec_verification_field_details: {
      /** Additional fields which are only required for some users. */
      additional: string[];
      /** Fields which every account must eventually provide. */
      minimum: string[];
    };
    country_spec_verification_fields: {
      company: components["schemas"]["country_spec_verification_field_details"];
      individual: components["schemas"]["country_spec_verification_field_details"];
    };
    /**
     * A coupon contains information about a percent-off or amount-off discount you
     * might want to apply to a customer. Coupons may be applied to [invoices](https://stripe.com/docs/api#invoices) or
     * [orders](https://stripe.com/docs/api#create_order-coupon). Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge).
     */
    coupon: {
      /** Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer. */
      amount_off?: number | null;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** If `amount_off` has been set, the three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the amount to take off. */
      currency?: string | null;
      /** One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount. */
      duration: "forever" | "once" | "repeating";
      /** If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`. */
      duration_in_months?: number | null;
      /** Unique identifier for the object. */
      id: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid. */
      max_redemptions?: number | null;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: { [key: string]: string };
      /** Name of the coupon displayed to customers on for instance invoices or receipts. */
      name?: string | null;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "coupon";
      /** Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a %s100 invoice %s50 instead. */
      percent_off?: number | null;
      /** Date after which the coupon can no longer be redeemed. */
      redeem_by?: number | null;
      /** Number of times this coupon has been applied to a customer. */
      times_redeemed: number;
      /** Taking account of the above properties, whether this coupon can still be applied to a customer. */
      valid: boolean;
    };
    /**
     * Issue a credit note to adjust an invoice's amount after the invoice is finalized.
     *
     * Related guide: [Credit Notes](https://stripe.com/docs/billing/invoices/credit-notes).
     */
    credit_note: {
      /** The integer amount in **%s** representing the total amount of the credit note, including tax. */
      amount: number;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** ID of the customer. */
      customer: Partial<string> & Partial<components["schemas"]["customer"]>;
      /** Customer balance transaction related to this credit note. */
      customer_balance_transaction?:
        | (Partial<string> & Partial<components["schemas"]["customer_balance_transaction"]>)
        | null;
      /** The integer amount in **%s** representing the amount of the discount that was credited. */
      discount_amount: number;
      /** Unique identifier for the object. */
      id: string;
      /** ID of the invoice. */
      invoice: Partial<string> & Partial<components["schemas"]["invoice"]>;
      /** Line items that make up the credit note */
      lines: {
        /** Details about each object. */
        data: components["schemas"]["credit_note_line_item"][];
        /** True if this list has another page of items after this one that can be fetched. */
        has_more: boolean;
        /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
        object: "list";
        /** The URL where this list can be accessed. */
        url: string;
      };
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** Customer-facing text that appears on the credit note PDF. */
      memo?: string | null;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: { [key: string]: string };
      /** A unique number that identifies this particular credit note and appears on the PDF of the credit note and its associated invoice. */
      number: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "credit_note";
      /** Amount that was credited outside of Stripe. */
      out_of_band_amount?: number | null;
      /** The link to download the PDF of the credit note. */
      pdf: string;
      /** Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory` */
      reason?: ("duplicate" | "fraudulent" | "order_change" | "product_unsatisfactory") | null;
      /** Refund related to this credit note. */
      refund?: (Partial<string> & Partial<components["schemas"]["refund"]>) | null;
      /** Status of this credit note, one of `issued` or `void`. Learn more about [voiding credit notes](https://stripe.com/docs/billing/invoices/credit-notes#voiding). */
      status: "issued" | "void";
      /** The integer amount in **%s** representing the amount of the credit note, excluding tax and discount. */
      subtotal: number;
      /** The aggregate amounts calculated per tax rate for all line items. */
      tax_amounts: components["schemas"]["credit_note_tax_amount"][];
      /** The integer amount in **%s** representing the total amount of the credit note, including tax and discount. */
      total: number;
      /** Type of this credit note, one of `pre_payment` or `post_payment`. A `pre_payment` credit note means it was issued when the invoice was open. A `post_payment` credit note means it was issued when the invoice was paid. */
      type: "post_payment" | "pre_payment";
      /** The time that the credit note was voided. */
      voided_at?: number | null;
    };
    credit_note_line_item: {
      /** The integer amount in **%s** representing the gross amount being credited for this line item, excluding (exclusive) tax and discounts. */
      amount: number;
      /** Description of the item being credited. */
      description?: string | null;
      /** The integer amount in **%s** representing the discount being credited for this line item. */
      discount_amount: number;
      /** Unique identifier for the object. */
      id: string;
      /** ID of the invoice line item being credited */
      invoice_line_item?: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "credit_note_line_item";
      /** The number of units of product being credited. */
      quantity?: number | null;
      /** The amount of tax calculated per tax rate for this line item */
      tax_amounts: components["schemas"]["credit_note_tax_amount"][];
      /** The tax rates which apply to the line item. */
      tax_rates: components["schemas"]["tax_rate"][];
      /** The type of the credit note line item, one of `invoice_line_item` or `custom_line_item`. When the type is `invoice_line_item` there is an additional `invoice_line_item` property on the resource the value of which is the id of the credited line item on the invoice. */
      type: "custom_line_item" | "invoice_line_item";
      /** The cost of each unit of product being credited. */
      unit_amount?: number | null;
      /** Same as `unit_amount`, but contains a decimal value with at most 12 decimal places. */
      unit_amount_decimal?: string | null;
    };
    credit_note_tax_amount: {
      /** The amount, in %s, of the tax. */
      amount: number;
      /** Whether this tax amount is inclusive or exclusive. */
      inclusive: boolean;
      /** The tax rate that was applied to get this tax amount. */
      tax_rate: Partial<string> & Partial<components["schemas"]["tax_rate"]>;
    };
    /**
     * `Customer` objects allow you to perform recurring charges, and to track
     * multiple charges, that are associated with the same customer. The API allows
     * you to create, delete, and update your customers. You can retrieve individual
     * customers as well as a list of all your customers.
     *
     * Related guide: [Saving Cards with Customers](https://stripe.com/docs/saving-cards).
     */
    customer: {
      /** The customer's address. */
      address?: Partial<components["schemas"]["address"]> | null;
      /** Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized. */
      balance?: number;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes. */
      currency?: string | null;
      /**
       * ID of the default payment source for the customer.
       *
       * If you are using payment methods created via the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) field instead.
       */
      default_source?:
        | (Partial<string> &
            Partial<components["schemas"]["alipay_account"]> &
            Partial<components["schemas"]["bank_account"]> &
            Partial<components["schemas"]["bitcoin_receiver"]> &
            Partial<components["schemas"]["card"]> &
            Partial<components["schemas"]["source"]>)
        | null;
      /** When the customer's latest invoice is billed by charging automatically, delinquent is true if the invoice's latest charge is failed. When the customer's latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date. */
      delinquent?: boolean | null;
      /** An arbitrary string attached to the object. Often useful for displaying to users. */
      description?: string | null;
      /** Describes the current discount active on the customer, if there is one. */
      discount?: Partial<components["schemas"]["discount"]> | null;
      /** The customer's email address. */
      email?: string | null;
      /** Unique identifier for the object. */
      id: string;
      /** The prefix for the customer used to generate unique invoice numbers. */
      invoice_prefix?: string | null;
      invoice_settings?: components["schemas"]["invoice_setting_customer_setting"];
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata?: { [key: string]: string };
      /** The customer's full name or business name. */
      name?: string | null;
      /** The suffix of the customer's next invoice number, e.g., 0001. */
      next_invoice_sequence?: number;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "customer";
      /** The customer's phone number. */
      phone?: string | null;
      /** The customer's preferred locales (languages), ordered by preference. */
      preferred_locales?: string[] | null;
      /** Mailing and shipping address for the customer. Appears on invoices emailed to this customer. */
      shipping?: Partial<components["schemas"]["shipping"]> | null;
      /** The customer's payment sources, if any. */
      sources: {
        /** Details about each object. */
        data: (Partial<components["schemas"]["alipay_account"]> &
          Partial<components["schemas"]["bank_account"]> &
          Partial<components["schemas"]["bitcoin_receiver"]> &
          Partial<components["schemas"]["card"]> &
          Partial<components["schemas"]["source"]>)[];
        /** True if this list has another page of items after this one that can be fetched. */
        has_more: boolean;
        /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
        object: "list";
        /** The URL where this list can be accessed. */
        url: string;
      };
      /** The customer's current subscriptions, if any. */
      subscriptions?: {
        /** Details about each object. */
        data: components["schemas"]["subscription"][];
        /** True if this list has another page of items after this one that can be fetched. */
        has_more: boolean;
        /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
        object: "list";
        /** The URL where this list can be accessed. */
        url: string;
      };
      /** Describes the customer's tax exemption status. One of `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the text **"Reverse charge"**. */
      tax_exempt?: ("exempt" | "none" | "reverse") | null;
      /** The customer's tax IDs. */
      tax_ids?: {
        /** Details about each object. */
        data: components["schemas"]["tax_id"][];
        /** True if this list has another page of items after this one that can be fetched. */
        has_more: boolean;
        /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
        object: "list";
        /** The URL where this list can be accessed. */
        url: string;
      };
    };
    customer_acceptance: {
      /** The time at which the customer accepted the Mandate. */
      accepted_at?: number | null;
      offline?: components["schemas"]["offline_acceptance"];
      online?: components["schemas"]["online_acceptance"];
      /** The type of customer acceptance information included with the Mandate. One of `online` or `offline`. */
      type: "offline" | "online";
    };
    /**
     * Each customer has a [`balance`](https://stripe.com/docs/api/customers/object#customer_object-balance) value,
     * which denotes a debit or credit that's automatically applied to their next invoice upon finalization.
     * You may modify the value directly by using the [update customer API](https://stripe.com/docs/api/customers/update),
     * or by creating a Customer Balance Transaction, which increments or decrements the customer's `balance` by the specified `amount`.
     *
     * Related guide: [Customer Balance](https://stripe.com/docs/billing/customer/balance) to learn more.
     */
    customer_balance_transaction: {
      /** The amount of the transaction. A negative value is a credit for the customer's balance, and a positive value is a debit to the customer's `balance`. */
      amount: number;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** The ID of the credit note (if any) related to the transaction. */
      credit_note?: (Partial<string> & Partial<components["schemas"]["credit_note"]>) | null;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** The ID of the customer the transaction belongs to. */
      customer: Partial<string> & Partial<components["schemas"]["customer"]>;
      /** An arbitrary string attached to the object. Often useful for displaying to users. */
      description?: string | null;
      /** The customer's `balance` after the transaction was applied. A negative value decreases the amount due on the customer's next invoice. A positive value increases the amount due on the customer's next invoice. */
      ending_balance: number;
      /** Unique identifier for the object. */
      id: string;
      /** The ID of the invoice (if any) related to the transaction. */
      invoice?: (Partial<string> & Partial<components["schemas"]["invoice"]>) | null;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata?: { [key: string]: string } | null;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "customer_balance_transaction";
      /** Transaction type: `adjustment`, `applied_to_invoice`, `credit_note`, `initial`, `invoice_too_large`, `invoice_too_small`, `unspent_receiver_credit`, or `unapplied_from_invoice`. See the [Customer Balance page](https://stripe.com/docs/billing/customer/balance#types) to learn more about transaction types. */
      type:
        | "adjustment"
        | "applied_to_invoice"
        | "credit_note"
        | "initial"
        | "invoice_too_large"
        | "invoice_too_small"
        | "migration"
        | "unapplied_from_invoice"
        | "unspent_receiver_credit";
    };
    deleted_account: {
      /** Always true for a deleted object */
      deleted: true;
      /** Unique identifier for the object. */
      id: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "account";
    };
    deleted_alipay_account: {
      /** Always true for a deleted object */
      deleted: true;
      /** Unique identifier for the object. */
      id: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "alipay_account";
    };
    deleted_apple_pay_domain: {
      /** Always true for a deleted object */
      deleted: true;
      /** Unique identifier for the object. */
      id: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "apple_pay_domain";
    };
    deleted_bank_account: {
      /** Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. */
      currency?: string | null;
      /** Always true for a deleted object */
      deleted: true;
      /** Unique identifier for the object. */
      id: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "bank_account";
    };
    deleted_bitcoin_receiver: {
      /** Always true for a deleted object */
      deleted: true;
      /** Unique identifier for the object. */
      id: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "bitcoin_receiver";
    };
    deleted_card: {
      /** Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. */
      currency?: string | null;
      /** Always true for a deleted object */
      deleted: true;
      /** Unique identifier for the object. */
      id: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "card";
    };
    deleted_coupon: {
      /** Always true for a deleted object */
      deleted: true;
      /** Unique identifier for the object. */
      id: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "coupon";
    };
    deleted_customer: {
      /** Always true for a deleted object */
      deleted: true;
      /** Unique identifier for the object. */
      id: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "customer";
    };
    deleted_discount: {
      /** Always true for a deleted object */
      deleted: true;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "discount";
    };
    deleted_external_account: Partial<components["schemas"]["deleted_bank_account"]> &
      Partial<components["schemas"]["deleted_card"]>;
    deleted_invoice: {
      /** Always true for a deleted object */
      deleted: true;
      /** Unique identifier for the object. */
      id: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "invoice";
    };
    deleted_invoiceitem: {
      /** Always true for a deleted object */
      deleted: true;
      /** Unique identifier for the object. */
      id: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "invoiceitem";
    };
    deleted_payment_source: Partial<components["schemas"]["deleted_alipay_account"]> &
      Partial<components["schemas"]["deleted_bank_account"]> &
      Partial<components["schemas"]["deleted_bitcoin_receiver"]> &
      Partial<components["schemas"]["deleted_card"]>;
    deleted_person: {
      /** Always true for a deleted object */
      deleted: true;
      /** Unique identifier for the object. */
      id: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "person";
    };
    deleted_plan: {
      /** Always true for a deleted object */
      deleted: true;
      /** Unique identifier for the object. */
      id: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "plan";
    };
    deleted_product: {
      /** Always true for a deleted object */
      deleted: true;
      /** Unique identifier for the object. */
      id: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "product";
    };
    "deleted_radar.value_list": {
      /** Always true for a deleted object */
      deleted: true;
      /** Unique identifier for the object. */
      id: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "radar.value_list";
    };
    "deleted_radar.value_list_item": {
      /** Always true for a deleted object */
      deleted: true;
      /** Unique identifier for the object. */
      id: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "radar.value_list_item";
    };
    deleted_recipient: {
      /** Always true for a deleted object */
      deleted: true;
      /** Unique identifier for the object. */
      id: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "recipient";
    };
    deleted_sku: {
      /** Always true for a deleted object */
      deleted: true;
      /** Unique identifier for the object. */
      id: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "sku";
    };
    deleted_subscription_item: {
      /** Always true for a deleted object */
      deleted: true;
      /** Unique identifier for the object. */
      id: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "subscription_item";
    };
    deleted_tax_id: {
      /** Always true for a deleted object */
      deleted: true;
      /** Unique identifier for the object. */
      id: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "tax_id";
    };
    "deleted_terminal.location": {
      /** Always true for a deleted object */
      deleted: true;
      /** Unique identifier for the object. */
      id: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "terminal.location";
    };
    "deleted_terminal.reader": {
      /** Always true for a deleted object */
      deleted: true;
      /** Unique identifier for the object. */
      id: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "terminal.reader";
    };
    deleted_webhook_endpoint: {
      /** Always true for a deleted object */
      deleted: true;
      /** Unique identifier for the object. */
      id: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "webhook_endpoint";
    };
    delivery_estimate: {
      /** If `type` is `"exact"`, `date` will be the expected delivery date in the format YYYY-MM-DD. */
      date?: string;
      /** If `type` is `"range"`, `earliest` will be be the earliest delivery date in the format YYYY-MM-DD. */
      earliest?: string;
      /** If `type` is `"range"`, `latest` will be the latest delivery date in the format YYYY-MM-DD. */
      latest?: string;
      /** The type of estimate. Must be either `"range"` or `"exact"`. */
      type: string;
    };
    /**
     * A discount represents the actual application of a coupon to a particular
     * customer. It contains information about when the discount began and when it
     * will end.
     *
     * Related guide: [Applying Discounts to Subscriptions](https://stripe.com/docs/billing/subscriptions/discounts).
     */
    discount: {
      coupon: components["schemas"]["coupon"];
      /** The ID of the customer associated with this discount. */
      customer?:
        | (Partial<string> &
            Partial<components["schemas"]["customer"]> &
            Partial<components["schemas"]["deleted_customer"]>)
        | null;
      /** If the coupon has a duration of `repeating`, the date that this discount will end. If the coupon has a duration of `once` or `forever`, this attribute will be null. */
      end?: number | null;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "discount";
      /** Date that the coupon was applied. */
      start: number;
      /** The subscription that this coupon is applied to, if it is applied to a particular subscription. */
      subscription?: string | null;
    };
    /**
     * A dispute occurs when a customer questions your charge with their card issuer.
     * When this happens, you're given the opportunity to respond to the dispute with
     * evidence that shows that the charge is legitimate. You can find more
     * information about the dispute process in our [Disputes and
     * Fraud](/docs/disputes) documentation.
     *
     * Related guide: [Disputes and Fraud](https://stripe.com/docs/disputes).
     */
    dispute: {
      /** Disputed amount. Usually the amount of the charge, but can differ (usually because of currency fluctuation or because only part of the order is disputed). */
      amount: number;
      /** List of zero, one, or two balance transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute. */
      balance_transactions: components["schemas"]["balance_transaction"][];
      /** ID of the charge that was disputed. */
      charge: Partial<string> & Partial<components["schemas"]["charge"]>;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      evidence: components["schemas"]["dispute_evidence"];
      evidence_details: components["schemas"]["dispute_evidence_details"];
      /** Unique identifier for the object. */
      id: string;
      /** If true, it is still possible to refund the disputed payment. Once the payment has been fully refunded, no further funds will be withdrawn from your Stripe account as a result of this dispute. */
      is_charge_refundable: boolean;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: { [key: string]: string };
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "dispute";
      /** ID of the PaymentIntent that was disputed. */
      payment_intent?: (Partial<string> & Partial<components["schemas"]["payment_intent"]>) | null;
      /** Reason given by cardholder for dispute. Possible values are `bank_cannot_process`, `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`, `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`, `product_not_received`, `product_unacceptable`, `subscription_canceled`, or `unrecognized`. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories). */
      reason: string;
      /** Current status of dispute. Possible values are `warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `charge_refunded`, `won`, or `lost`. */
      status:
        | "charge_refunded"
        | "lost"
        | "needs_response"
        | "under_review"
        | "warning_closed"
        | "warning_needs_response"
        | "warning_under_review"
        | "won";
    };
    dispute_evidence: {
      /** Any server or activity logs showing proof that the customer accessed or downloaded the purchased digital product. This information should include IP addresses, corresponding timestamps, and any detailed recorded activity. */
      access_activity_log?: string | null;
      /** The billing address provided by the customer. */
      billing_address?: string | null;
      /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your subscription cancellation policy, as shown to the customer. */
      cancellation_policy?: (Partial<string> & Partial<components["schemas"]["file"]>) | null;
      /** An explanation of how and when the customer was shown your refund policy prior to purchase. */
      cancellation_policy_disclosure?: string | null;
      /** A justification for why the customer's subscription was not canceled. */
      cancellation_rebuttal?: string | null;
      /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any communication with the customer that you feel is relevant to your case. Examples include emails proving that the customer received the product or service, or demonstrating their use of or satisfaction with the product or service. */
      customer_communication?: (Partial<string> & Partial<components["schemas"]["file"]>) | null;
      /** The email address of the customer. */
      customer_email_address?: string | null;
      /** The name of the customer. */
      customer_name?: string | null;
      /** The IP address that the customer used when making the purchase. */
      customer_purchase_ip?: string | null;
      /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A relevant document or contract showing the customer's signature. */
      customer_signature?: (Partial<string> & Partial<components["schemas"]["file"]>) | null;
      /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation for the prior charge that can uniquely identify the charge, such as a receipt, shipping label, work order, etc. This document should be paired with a similar document from the disputed payment that proves the two payments are separate. */
      duplicate_charge_documentation?: (Partial<string> & Partial<components["schemas"]["file"]>) | null;
      /** An explanation of the difference between the disputed charge versus the prior charge that appears to be a duplicate. */
      duplicate_charge_explanation?: string | null;
      /** The Stripe ID for the prior charge which appears to be a duplicate of the disputed charge. */
      duplicate_charge_id?: string | null;
      /** A description of the product or service that was sold. */
      product_description?: string | null;
      /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any receipt or message sent to the customer notifying them of the charge. */
      receipt?: (Partial<string> & Partial<components["schemas"]["file"]>) | null;
      /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your refund policy, as shown to the customer. */
      refund_policy?: (Partial<string> & Partial<components["schemas"]["file"]>) | null;
      /** Documentation demonstrating that the customer was shown your refund policy prior to purchase. */
      refund_policy_disclosure?: string | null;
      /** A justification for why the customer is not entitled to a refund. */
      refund_refusal_explanation?: string | null;
      /** The date on which the customer received or began receiving the purchased service, in a clear human-readable format. */
      service_date?: string | null;
      /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a service was provided to the customer. This could include a copy of a signed contract, work order, or other form of written agreement. */
      service_documentation?: (Partial<string> & Partial<components["schemas"]["file"]>) | null;
      /** The address to which a physical product was shipped. You should try to include as complete address information as possible. */
      shipping_address?: string | null;
      /** The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. If multiple carriers were used for this purchase, please separate them with commas. */
      shipping_carrier?: string | null;
      /** The date on which a physical product began its route to the shipping address, in a clear human-readable format. */
      shipping_date?: string | null;
      /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a product was shipped to the customer at the same address the customer provided to you. This could include a copy of the shipment receipt, shipping label, etc. It should show the customer's full shipping address, if possible. */
      shipping_documentation?: (Partial<string> & Partial<components["schemas"]["file"]>) | null;
      /** The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. */
      shipping_tracking_number?: string | null;
      /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any additional evidence or statements. */
      uncategorized_file?: (Partial<string> & Partial<components["schemas"]["file"]>) | null;
      /** Any additional evidence or statements. */
      uncategorized_text?: string | null;
    };
    dispute_evidence_details: {
      /** Date by which evidence must be submitted in order to successfully challenge dispute. Will be null if the customer's bank or credit card company doesn't allow a response for this particular dispute. */
      due_by?: number | null;
      /** Whether evidence has been staged for this dispute. */
      has_evidence: boolean;
      /** Whether the last evidence submission was submitted past the due date. Defaults to `false` if no evidence submissions have occurred. If `true`, then delivery of the latest evidence is *not* guaranteed. */
      past_due: boolean;
      /** The number of times evidence has been submitted. Typically, you may only submit evidence once. */
      submission_count: number;
    };
    ephemeral_key: {
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Time at which the key will expire. Measured in seconds since the Unix epoch. */
      expires: number;
      /** Unique identifier for the object. */
      id: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "ephemeral_key";
      /** The key's secret. You can use this value to make authorized requests to the Stripe API. */
      secret?: string;
    };
    /** An error response from the Stripe API */
    error: {
      error: components["schemas"]["api_errors"];
    };
    /**
     * Events are our way of letting you know when something interesting happens in
     * your account. When an interesting event occurs, we create a new `Event`
     * object. For example, when a charge succeeds, we create a `charge.succeeded`
     * event; and when an invoice payment attempt fails, we create an
     * `invoice.payment_failed` event. Note that many API requests may cause multiple
     * events to be created. For example, if you create a new subscription for a
     * customer, you will receive both a `customer.subscription.created` event and a
     * `charge.succeeded` event.
     *
     * Events occur when the state of another API resource changes. The state of that
     * resource at the time of the change is embedded in the event's data field. For
     * example, a `charge.succeeded` event will contain a charge, and an
     * `invoice.payment_failed` event will contain an invoice.
     *
     * As with other API resources, you can use endpoints to retrieve an
     * [individual event](https://stripe.com/docs/api#retrieve_event) or a [list of events](https://stripe.com/docs/api#list_events)
     * from the API. We also have a separate
     * [webhooks](http://en.wikipedia.org/wiki/Webhook) system for sending the
     * `Event` objects directly to an endpoint on your server. Webhooks are managed
     * in your
     * [account settings](https://dashboard.stripe.com/account/webhooks'),
     * and our [Using Webhooks](https://stripe.com/docs/webhooks) guide will help you get set up.
     *
     * When using [Connect](https://stripe.com/docs/connect), you can also receive notifications of
     * events that occur in connected accounts. For these events, there will be an
     * additional `account` attribute in the received `Event` object.
     *
     * **NOTE:** Right now, access to events through the [Retrieve Event API](https://stripe.com/docs/api#retrieve_event) is
     * guaranteed only for 30 days.
     */
    event: {
      /** The connected account that originated the event. */
      account?: string;
      /** The Stripe API version used to render `data`. *Note: This property is populated only for events on or after October 31, 2014*. */
      api_version?: string | null;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      data: components["schemas"]["notification_event_data"];
      /** Unique identifier for the object. */
      id: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "event";
      /** Number of webhooks that have yet to be successfully delivered (i.e., to return a 20x response) to the URLs you've specified. */
      pending_webhooks: number;
      /** Information on the API request that instigated the event. */
      request?: Partial<components["schemas"]["notification_event_request"]> | null;
      /** Description of the event (e.g., `invoice.created` or `charge.refunded`). */
      type: string;
    };
    /**
     * `Exchange Rate` objects allow you to determine the rates that Stripe is
     * currently using to convert from one currency to another. Since this number is
     * variable throughout the day, there are various reasons why you might want to
     * know the current rate (for example, to dynamically price an item for a user
     * with a default payment in a foreign currency).
     *
     * If you want a guarantee that the charge is made with a certain exchange rate
     * you expect is current, you can pass in `exchange_rate` to charges endpoints.
     * If the value is no longer up to date, the charge won't go through. Please
     * refer to our [Exchange Rates API](https://stripe.com/docs/exchange-rates) guide for more
     * details.
     */
    exchange_rate: {
      /** Unique identifier for the object. Represented as the three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) in lowercase. */
      id: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "exchange_rate";
      /** Hash where the keys are supported currencies and the values are the exchange rate at which the base id currency converts to the key currency. */
      rates: { [key: string]: number };
    };
    external_account: Partial<components["schemas"]["bank_account"]> & Partial<components["schemas"]["card"]>;
    fee: {
      /** Amount of the fee, in cents. */
      amount: number;
      /** ID of the Connect application that earned the fee. */
      application?: string | null;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** An arbitrary string attached to the object. Often useful for displaying to users. */
      description?: string | null;
      /** Type of the fee, one of: `application_fee`, `stripe_fee` or `tax`. */
      type: string;
    };
    /**
     * `Application Fee Refund` objects allow you to refund an application fee that
     * has previously been created but not yet refunded. Funds will be refunded to
     * the Stripe account from which the fee was originally collected.
     *
     * Related guide: [Refunding Application Fees](https://stripe.com/docs/connect/destination-charges#refunding-app-fee).
     */
    fee_refund: {
      /** Amount, in %s. */
      amount: number;
      /** Balance transaction that describes the impact on your account balance. */
      balance_transaction?: (Partial<string> & Partial<components["schemas"]["balance_transaction"]>) | null;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** ID of the application fee that was refunded. */
      fee: Partial<string> & Partial<components["schemas"]["application_fee"]>;
      /** Unique identifier for the object. */
      id: string;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: { [key: string]: string };
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "fee_refund";
    };
    /**
     * This is an object representing a file hosted on Stripe's servers. The
     * file may have been uploaded by yourself using the [create file](https://stripe.com/docs/api#create_file)
     * request (for example, when uploading dispute evidence) or it may have
     * been created by Stripe (for example, the results of a [Sigma scheduled
     * query](#scheduled_queries)).
     *
     * Related guide: [File Upload Guide](https://stripe.com/docs/file-upload).
     */
    file: {
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** A filename for the file, suitable for saving to a filesystem. */
      filename?: string | null;
      /** Unique identifier for the object. */
      id: string;
      /** A list of [file links](https://stripe.com/docs/api#file_links) that point at this file. */
      links?: {
        /** Details about each object. */
        data: components["schemas"]["file_link"][];
        /** True if this list has another page of items after this one that can be fetched. */
        has_more: boolean;
        /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
        object: "list";
        /** The URL where this list can be accessed. */
        url: string;
      } | null;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "file";
      /** The purpose of the file. Possible values are `additional_verification`, `business_icon`, `business_logo`, `customer_signature`, `dispute_evidence`, `finance_report_run`, `identity_document`, `pci_document`, `sigma_scheduled_query`, or `tax_document_user_upload`. */
      purpose: string;
      /** The size in bytes of the file object. */
      size: number;
      /** A user friendly title for the document. */
      title?: string | null;
      /** The type of the file returned (e.g., `csv`, `pdf`, `jpg`, or `png`). */
      type?: string | null;
      /** The URL from which the file can be downloaded using your live secret API key. */
      url?: string | null;
    };
    /**
     * To share the contents of a `File` object with non-Stripe users, you can
     * create a `FileLink`. `FileLink`s contain a URL that can be used to
     * retrieve the contents of the file without authentication.
     */
    file_link: {
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Whether this link is already expired. */
      expired: boolean;
      /** Time at which the link expires. */
      expires_at?: number | null;
      /** The file object this link points to. */
      file: Partial<string> & Partial<components["schemas"]["file"]>;
      /** Unique identifier for the object. */
      id: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: { [key: string]: string };
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "file_link";
      /** The publicly accessible URL to download the file. */
      url?: string | null;
    };
    financial_reporting_finance_report_run_run_parameters: {
      /** The set of output columns requested for inclusion in the report run. */
      columns?: string[];
      /** Connected account ID by which to filter the report run. */
      connected_account?: string;
      /** Currency of objects to be included in the report run. */
      currency?: string;
      /** Ending timestamp of data to be included in the report run (exclusive). */
      interval_end?: number;
      /** Starting timestamp of data to be included in the report run. */
      interval_start?: number;
      /** Payout ID by which to filter the report run. */
      payout?: string;
      /** Category of balance transactions to be included in the report run. */
      reporting_category?: string;
      /** Defaults to `Etc/UTC`. The output timezone for all timestamps in the report. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones). Has no effect on `interval_start` or `interval_end`. */
      timezone?: string;
    };
    inventory: {
      /** The count of inventory available. Will be present if and only if `type` is `finite`. */
      quantity?: number | null;
      /** Inventory type. Possible values are `finite`, `bucket` (not quantified), and `infinite`. */
      type: string;
      /** An indicator of the inventory available. Possible values are `in_stock`, `limited`, and `out_of_stock`. Will be present if and only if `type` is `bucket`. */
      value?: string | null;
    };
    /**
     * Invoices are statements of amounts owed by a customer, and are either
     * generated one-off, or generated periodically from a subscription.
     *
     * They contain [invoice items](https://stripe.com/docs/api#invoiceitems), and proration adjustments
     * that may be caused by subscription upgrades/downgrades (if necessary).
     *
     * If your invoice is configured to be billed through automatic charges,
     * Stripe automatically finalizes your invoice and attempts payment. Note
     * that finalizing the invoice,
     * [when automatic](https://stripe.com/docs/billing/invoices/workflow/#auto_advance), does
     * not happen immediately as the invoice is created. Stripe waits
     * until one hour after the last webhook was successfully sent (or the last
     * webhook timed out after failing). If you (and the platforms you may have
     * connected to) have no webhooks configured, Stripe waits one hour after
     * creation to finalize the invoice.
     *
     * If your invoice is configured to be billed by sending an email, then based on your
     * [email settings](https://dashboard.stripe.com/account/billing/automatic'),
     * Stripe will email the invoice to your customer and await payment. These
     * emails can contain a link to a hosted page to pay the invoice.
     *
     * Stripe applies any customer credit on the account before determining the
     * amount due for the invoice (i.e., the amount that will be actually
     * charged). If the amount due for the invoice is less than Stripe's [minimum allowed charge
     * per currency](/docs/currencies#minimum-and-maximum-charge-amounts), the
     * invoice is automatically marked paid, and we add the amount due to the
     * customer's running account balance which is applied to the next invoice.
     *
     * More details on the customer's account balance are
     * [here](https://stripe.com/docs/api/customers/object#customer_object-account_balance).
     *
     * Related guide: [Send Invoices to Customers](https://stripe.com/docs/billing/invoices/sending).
     */
    invoice: {
      /** The country of the business associated with this invoice, most often the business creating the invoice. */
      account_country?: string | null;
      /** The public name of the business associated with this invoice, most often the business creating the invoice. */
      account_name?: string | null;
      /** Final amount due at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`. */
      amount_due: number;
      /** The amount, in %s, that was paid. */
      amount_paid: number;
      /** The amount remaining, in %s, that is due. */
      amount_remaining: number;
      /** The fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid. */
      application_fee_amount?: number | null;
      /** Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule. */
      attempt_count: number;
      /** Whether an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users. */
      attempted: boolean;
      /** Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action. */
      auto_advance?: boolean;
      /** Indicates the reason why the invoice was created. `subscription_cycle` indicates an invoice created by a subscription advancing into a new period. `subscription_create` indicates an invoice created due to creating a subscription. `subscription_update` indicates an invoice created due to updating a subscription. `subscription` is set for all old invoices to indicate either a change to a subscription or a period advancement. `manual` is set for all invoices unrelated to a subscription (for example: created via the invoice editor). The `upcoming` value is reserved for simulated invoices per the upcoming invoice endpoint. `subscription_threshold` indicates an invoice created due to a billing threshold being reached. */
      billing_reason?:
        | (
            | "automatic_pending_invoice_item_invoice"
            | "manual"
            | "subscription"
            | "subscription_create"
            | "subscription_cycle"
            | "subscription_threshold"
            | "subscription_update"
            | "upcoming"
          )
        | null;
      /** ID of the latest charge generated for this invoice, if any. */
      charge?: (Partial<string> & Partial<components["schemas"]["charge"]>) | null;
      /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions. */
      collection_method?: ("charge_automatically" | "send_invoice") | null;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** Custom fields displayed on the invoice. */
      custom_fields?: components["schemas"]["invoice_setting_custom_field"][] | null;
      /** The ID of the customer who will be billed. */
      customer: Partial<string> &
        Partial<components["schemas"]["customer"]> &
        Partial<components["schemas"]["deleted_customer"]>;
      /** The customer's address. Until the invoice is finalized, this field will equal `customer.address`. Once the invoice is finalized, this field will no longer be updated. */
      customer_address?: Partial<components["schemas"]["address"]> | null;
      /** The customer's email. Until the invoice is finalized, this field will equal `customer.email`. Once the invoice is finalized, this field will no longer be updated. */
      customer_email?: string | null;
      /** The customer's name. Until the invoice is finalized, this field will equal `customer.name`. Once the invoice is finalized, this field will no longer be updated. */
      customer_name?: string | null;
      /** The customer's phone number. Until the invoice is finalized, this field will equal `customer.phone`. Once the invoice is finalized, this field will no longer be updated. */
      customer_phone?: string | null;
      /** The customer's shipping information. Until the invoice is finalized, this field will equal `customer.shipping`. Once the invoice is finalized, this field will no longer be updated. */
      customer_shipping?: Partial<components["schemas"]["shipping"]> | null;
      /** The customer's tax exempt status. Until the invoice is finalized, this field will equal `customer.tax_exempt`. Once the invoice is finalized, this field will no longer be updated. */
      customer_tax_exempt?: ("exempt" | "none" | "reverse") | null;
      /** The customer's tax IDs. Until the invoice is finalized, this field will contain the same tax IDs as `customer.tax_ids`. Once the invoice is finalized, this field will no longer be updated. */
      customer_tax_ids?: components["schemas"]["invoices_resource_invoice_tax_id"][] | null;
      /** ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings. */
      default_payment_method?: (Partial<string> & Partial<components["schemas"]["payment_method"]>) | null;
      /** ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source. */
      default_source?:
        | (Partial<string> &
            Partial<components["schemas"]["alipay_account"]> &
            Partial<components["schemas"]["bank_account"]> &
            Partial<components["schemas"]["bitcoin_receiver"]> &
            Partial<components["schemas"]["card"]> &
            Partial<components["schemas"]["source"]>)
        | null;
      /** The tax rates applied to this invoice, if any. */
      default_tax_rates?: components["schemas"]["tax_rate"][] | null;
      /** An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard. */
      description?: string | null;
      /** Describes the current discount applied to this invoice, if there is one. */
      discount?: Partial<components["schemas"]["discount"]> | null;
      /** The date on which payment for this invoice is due. This value will be `null` for invoices where `collection_method=charge_automatically`. */
      due_date?: number | null;
      /** Ending customer balance after the invoice is finalized. Invoices are finalized approximately an hour after successful webhook delivery or when payment collection is attempted for the invoice. If the invoice has not been finalized yet, this will be null. */
      ending_balance?: number | null;
      /** Footer displayed on the invoice. */
      footer?: string | null;
      /** The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null. */
      hosted_invoice_url?: string | null;
      /** Unique identifier for the object. */
      id?: string;
      /** The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null. */
      invoice_pdf?: string | null;
      /** The individual line items that make up the invoice. `lines` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any. */
      lines: {
        /** Details about each object. */
        data: components["schemas"]["line_item"][];
        /** True if this list has another page of items after this one that can be fetched. */
        has_more: boolean;
        /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
        object: "list";
        /** The URL where this list can be accessed. */
        url: string;
      };
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata?: { [key: string]: string } | null;
      /** The time at which payment will next be attempted. This value will be `null` for invoices where `collection_method=send_invoice`. */
      next_payment_attempt?: number | null;
      /** A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified. */
      number?: string | null;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "invoice";
      /** Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance. */
      paid: boolean;
      /** The PaymentIntent associated with this invoice. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice. Note that voiding an invoice will cancel the PaymentIntent. */
      payment_intent?: (Partial<string> & Partial<components["schemas"]["payment_intent"]>) | null;
      /** End of the usage period during which invoice items were added to this invoice. */
      period_end: number;
      /** Start of the usage period during which invoice items were added to this invoice. */
      period_start: number;
      /** Total amount of all post-payment credit notes issued for this invoice. */
      post_payment_credit_notes_amount: number;
      /** Total amount of all pre-payment credit notes issued for this invoice. */
      pre_payment_credit_notes_amount: number;
      /** This is the transaction number that appears on email receipts sent for this invoice. */
      receipt_number?: string | null;
      /** Starting customer balance before the invoice is finalized. If the invoice has not been finalized yet, this will be the current customer balance. */
      starting_balance: number;
      /** Extra information about an invoice for the customer's credit card statement. */
      statement_descriptor?: string | null;
      /** The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview) */
      status?: ("deleted" | "draft" | "open" | "paid" | "uncollectible" | "void") | null;
      status_transitions: components["schemas"]["invoices_status_transitions"];
      /** The subscription that this invoice was prepared for, if any. */
      subscription?: (Partial<string> & Partial<components["schemas"]["subscription"]>) | null;
      /** Only set for upcoming invoices that preview prorations. The time used to calculate prorations. */
      subscription_proration_date?: number;
      /** Total of all subscriptions, invoice items, and prorations on the invoice before any discount or tax is applied. */
      subtotal: number;
      /** The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice. */
      tax?: number | null;
      /** This percentage of the subtotal has been added to the total amount of the invoice, including invoice line items and discounts. This field is inherited from the subscription's `tax_percent` field, but can be changed before the invoice is paid. This field defaults to null. */
      tax_percent?: number | null;
      threshold_reason?: components["schemas"]["invoice_threshold_reason"];
      /** Total after discounts and taxes. */
      total: number;
      /** The aggregate amounts calculated per tax rate for all line items. */
      total_tax_amounts?: components["schemas"]["invoice_tax_amount"][] | null;
      /** Invoices are automatically paid or sent 1 hour after webhooks are delivered, or until all webhook delivery attempts have [been exhausted](https://stripe.com/docs/billing/webhooks#understand). This field tracks the time when webhooks for this invoice were successfully delivered. If the invoice had no webhooks to deliver, this will be set while the invoice is being created. */
      webhooks_delivered_at?: number | null;
    };
    invoice_item_threshold_reason: {
      /** The IDs of the line items that triggered the threshold invoice. */
      line_item_ids: string[];
      /** The quantity threshold boundary that applied to the given line item. */
      usage_gte: number;
    };
    invoice_line_item_period: {
      /** End of the line item's billing period */
      end: number;
      /** Start of the line item's billing period */
      start: number;
    };
    invoice_setting_custom_field: {
      /** The name of the custom field. */
      name: string;
      /** The value of the custom field. */
      value: string;
    };
    invoice_setting_customer_setting: {
      /** Default custom fields to be displayed on invoices for this customer. */
      custom_fields?: components["schemas"]["invoice_setting_custom_field"][] | null;
      /** ID of a payment method that's attached to the customer, to be used as the customer's default payment method for subscriptions and invoices. */
      default_payment_method?: (Partial<string> & Partial<components["schemas"]["payment_method"]>) | null;
      /** Default footer to be displayed on invoices for this customer. */
      footer?: string | null;
    };
    invoice_setting_subscription_schedule_setting: {
      /** Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`. */
      days_until_due?: number | null;
    };
    invoice_tax_amount: {
      /** The amount, in %s, of the tax. */
      amount: number;
      /** Whether this tax amount is inclusive or exclusive. */
      inclusive: boolean;
      /** The tax rate that was applied to get this tax amount. */
      tax_rate: Partial<string> & Partial<components["schemas"]["tax_rate"]>;
    };
    invoice_threshold_reason: {
      /** The total invoice amount threshold boundary if it triggered the threshold invoice. */
      amount_gte?: number | null;
      /** Indicates which line items triggered a threshold invoice. */
      item_reasons: components["schemas"]["invoice_item_threshold_reason"][];
    };
    /**
     * Sometimes you want to add a charge or credit to a customer, but actually
     * charge or credit the customer's card only at the end of a regular billing
     * cycle. This is useful for combining several charges (to minimize
     * per-transaction fees), or for having Stripe tabulate your usage-based billing
     * totals.
     *
     * Related guide: [Subscription Invoices](https://stripe.com/docs/billing/invoices/subscription#adding-upcoming-invoice-items).
     */
    invoiceitem: {
      /** Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`. */
      amount: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** The ID of the customer who will be billed when this invoice item is billed. */
      customer: Partial<string> &
        Partial<components["schemas"]["customer"]> &
        Partial<components["schemas"]["deleted_customer"]>;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      date: number;
      /** An arbitrary string attached to the object. Often useful for displaying to users. */
      description?: string | null;
      /** If true, discounts will apply to this invoice item. Always false for prorations. */
      discountable: boolean;
      /** Unique identifier for the object. */
      id: string;
      /** The ID of the invoice this invoice item belongs to. */
      invoice?: (Partial<string> & Partial<components["schemas"]["invoice"]>) | null;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: { [key: string]: string };
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "invoiceitem";
      period: components["schemas"]["invoice_line_item_period"];
      /** If the invoice item is a proration, the plan of the subscription that the proration was computed for. */
      plan?: Partial<components["schemas"]["plan"]> | null;
      /** Whether the invoice item was created automatically as a proration adjustment when the customer switched plans. */
      proration: boolean;
      /** Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for. */
      quantity: number;
      /** The subscription that this invoice item has been created for, if any. */
      subscription?: (Partial<string> & Partial<components["schemas"]["subscription"]>) | null;
      /** The subscription item that this invoice item has been created for, if any. */
      subscription_item?: string;
      /** The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item. */
      tax_rates?: components["schemas"]["tax_rate"][] | null;
      /** Unit Amount (in the `currency` specified) of the invoice item. */
      unit_amount?: number | null;
      /** Same as `unit_amount`, but contains a decimal value with at most 12 decimal places. */
      unit_amount_decimal?: string | null;
    };
    invoices_resource_invoice_tax_id: {
      /** The type of the tax ID, one of `eu_vat`, `nz_gst`, `au_abn`, `in_gst`, `no_vat`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `my_sst`, `sg_gst`, or `unknown` */
      type:
        | "au_abn"
        | "ca_bn"
        | "ca_qst"
        | "ch_vat"
        | "es_cif"
        | "eu_vat"
        | "hk_br"
        | "in_gst"
        | "jp_cn"
        | "kr_brn"
        | "li_uid"
        | "mx_rfc"
        | "my_itn"
        | "my_sst"
        | "no_vat"
        | "nz_gst"
        | "ru_inn"
        | "sg_gst"
        | "sg_uen"
        | "th_vat"
        | "tw_vat"
        | "unknown"
        | "us_ein"
        | "za_vat";
      /** The value of the tax ID. */
      value?: string | null;
    };
    invoices_status_transitions: {
      /** The time that the invoice draft was finalized. */
      finalized_at?: number | null;
      /** The time that the invoice was marked uncollectible. */
      marked_uncollectible_at?: number | null;
      /** The time that the invoice was paid. */
      paid_at?: number | null;
      /** The time that the invoice was voided. */
      voided_at?: number | null;
    };
    /**
     * This resource has been renamed to [Early Fraud
     * Warning](#early_fraud_warning_object) and will be removed in a future API
     * version.
     */
    issuer_fraud_record: {
      /** An IFR is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an IFR, in order to avoid receiving a dispute later. */
      actionable: boolean;
      /** ID of the charge this issuer fraud record is for, optionally expanded. */
      charge: Partial<string> & Partial<components["schemas"]["charge"]>;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** The type of fraud labelled by the issuer. One of `card_never_received`, `fraudulent_card_application`, `made_with_counterfeit_card`, `made_with_lost_card`, `made_with_stolen_card`, `misc`, `unauthorized_use_of_card`. */
      fraud_type: string;
      /** If true, the associated charge is subject to [liability shift](https://stripe.com/docs/payments/3d-secure#disputed-payments). */
      has_liability_shift: boolean;
      /** Unique identifier for the object. */
      id: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "issuer_fraud_record";
      /** The timestamp at which the card issuer posted the issuer fraud record. */
      post_date: number;
    };
    /**
     * When an [issued card](https://stripe.com/docs/issuing) is used to make a purchase, an Issuing `Authorization`
     * object is created. [Authorizations](https://stripe.com/docs/issuing/purchases/authorizations) must be approved for the
     * purchase to be completed successfully.
     *
     * Related guide: [Issued Card Authorizations](https://stripe.com/docs/issuing/purchases/authorizations).
     */
    "issuing.authorization": {
      /** The total amount that was authorized or rejected. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
      amount: number;
      /** Whether the authorization has been approved. */
      approved: boolean;
      /** How the card details were provided. */
      authorization_method: "chip" | "contactless" | "keyed_in" | "online" | "swipe";
      /** List of balance transactions associated with this authorization. */
      balance_transactions: components["schemas"]["balance_transaction"][];
      card: components["schemas"]["issuing.card"];
      /** The cardholder to whom this authorization belongs. */
      cardholder?: (Partial<string> & Partial<components["schemas"]["issuing.cardholder"]>) | null;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** Unique identifier for the object. */
      id: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** The total amount that was authorized or rejected. This amount is in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
      merchant_amount: number;
      /** The currency that was presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      merchant_currency: string;
      merchant_data: components["schemas"]["issuing_authorization_merchant_data"];
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: { [key: string]: string };
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "issuing.authorization";
      /** The pending authorization request. This field will only be non-null during an `issuing_authorization.request` webhook. */
      pending_request?: Partial<components["schemas"]["issuing_authorization_pending_request"]> | null;
      /** History of every time the authorization was approved/denied (whether approved/denied by you directly or by Stripe based on your `spending_controls`). If the merchant changes the authorization by performing an [incremental authorization or partial capture](https://stripe.com/docs/issuing/purchases/authorizations), you can look at this field to see the previous states of the authorization. */
      request_history: components["schemas"]["issuing_authorization_request"][];
      /** The current status of the authorization in its lifecycle. */
      status: "closed" | "pending" | "reversed";
      /** List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization. */
      transactions: components["schemas"]["issuing.transaction"][];
      verification_data: components["schemas"]["issuing_authorization_verification_data"];
      /** What, if any, digital wallet was used for this authorization. One of `apple_pay`, `google_pay`, or `samsung_pay`. */
      wallet?: string | null;
    };
    /** You can [create physical or virtual cards](https://stripe.com/docs/issuing/cards) that are issued to cardholders. */
    "issuing.card": {
      /** The brand of the card. */
      brand: string;
      /** The reason why the card was canceled. */
      cancellation_reason?: ("lost" | "stolen") | null;
      cardholder: components["schemas"]["issuing.cardholder"];
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** The card's CVC. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint. */
      cvc?: string;
      /** The expiration month of the card. */
      exp_month: number;
      /** The expiration year of the card. */
      exp_year: number;
      /** Unique identifier for the object. */
      id: string;
      /** The last 4 digits of the card number. */
      last4: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: { [key: string]: string };
      /** The full unredacted card number. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint. */
      number?: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "issuing.card";
      /** The latest card that replaces this card, if any. */
      replaced_by?: (Partial<string> & Partial<components["schemas"]["issuing.card"]>) | null;
      /** The card this card replaces, if any. */
      replacement_for?: (Partial<string> & Partial<components["schemas"]["issuing.card"]>) | null;
      /** The reason why the previous card needed to be replaced. */
      replacement_reason?: ("damaged" | "expired" | "lost" | "stolen") | null;
      /** Where and how the card will be shipped. */
      shipping?: Partial<components["schemas"]["issuing_card_shipping"]> | null;
      spending_controls: components["schemas"]["issuing_card_authorization_controls"];
      /** Whether authorizations can be approved on this card. */
      status: "active" | "canceled" | "inactive";
      /** The type of the card. */
      type: "physical" | "virtual";
    };
    /**
     * An Issuing `Cardholder` object represents an individual or business entity who is [issued](https://stripe.com/docs/issuing) cards.
     *
     * Related guide: [How to create a Cardholder](https://stripe.com/docs/issuing/cards#create-cardholder)
     */
    "issuing.cardholder": {
      billing: components["schemas"]["issuing_cardholder_address"];
      /** Additional information about a `company` cardholder. */
      company?: Partial<components["schemas"]["issuing_cardholder_company"]> | null;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** The cardholder's email address. */
      email?: string | null;
      /** Unique identifier for the object. */
      id: string;
      /** Additional information about an `individual` cardholder. */
      individual?: Partial<components["schemas"]["issuing_cardholder_individual"]> | null;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: { [key: string]: string };
      /** The cardholder's name. This will be printed on cards issued to them. */
      name: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "issuing.cardholder";
      /** The cardholder's phone number. */
      phone_number?: string | null;
      requirements: components["schemas"]["issuing_cardholder_requirements"];
      /** Spending rules that give you some control over how this cardholder's cards can be used. Refer to our [authorizations](https://stripe.com/docs/issuing/purchases/authorizations) documentation for more details. */
      spending_controls?: Partial<components["schemas"]["issuing_cardholder_authorization_controls"]> | null;
      /** Specifies whether to permit authorizations on this cardholder's cards. */
      status: "active" | "blocked" | "inactive";
      /** One of `individual` or `company`. */
      type: "company" | "individual";
    };
    /**
     * As a [card issuer](https://stripe.com/docs/issuing), you can [dispute](https://stripe.com/docs/issuing/purchases/disputes) transactions that you do not recognize, suspect to be fraudulent, or have some other issue.
     *
     * Related guide: [Disputing Transactions](https://stripe.com/docs/issuing/purchases/disputes)
     */
    "issuing.dispute": {
      /** Unique identifier for the object. */
      id: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "issuing.dispute";
    };
    /** When a non-stripe BIN is used, any use of an [issued card](https://stripe.com/docs/issuing) must be settled directly with the card network. The net amount owed is represented by an Issuing `Settlement` object. */
    "issuing.settlement": {
      /** The Bank Identification Number reflecting this settlement record. */
      bin: string;
      /** The date that the transactions are cleared and posted to user's accounts. */
      clearing_date: number;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** Unique identifier for the object. */
      id: string;
      /** The total interchange received as reimbursement for the transactions. */
      interchange_fees: number;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: { [key: string]: string };
      /** The total net amount required to settle with the network. */
      net_total: number;
      /** The card network for this settlement report. One of ["visa"] */
      network: "visa";
      /** The total amount of fees owed to the network. */
      network_fees: number;
      /** The Settlement Identification Number assigned by the network. */
      network_settlement_identifier: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "issuing.settlement";
      /** One of `international` or `uk_national_net`. */
      settlement_service: string;
      /** The total number of transactions reflected in this settlement. */
      transaction_count: number;
      /** The total transaction amount reflected in this settlement. */
      transaction_volume: number;
    };
    /**
     * Any use of an [issued card](https://stripe.com/docs/issuing) that results in funds entering or leaving
     * your Stripe account, such as a completed purchase or refund, is represented by an Issuing
     * `Transaction` object.
     *
     * Related guide: [Issued Card Transactions](https://stripe.com/docs/issuing/purchases/transactions).
     */
    "issuing.transaction": {
      /** The transaction amount, which will be reflected in your balance. This amount is in your currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
      amount: number;
      /** The `Authorization` object that led to this transaction. */
      authorization?: (Partial<string> & Partial<components["schemas"]["issuing.authorization"]>) | null;
      /** ID of the [balance transaction](https://stripe.com/docs/api/balance_transactions) associated with this transaction. */
      balance_transaction?: (Partial<string> & Partial<components["schemas"]["balance_transaction"]>) | null;
      /** The card used to make this transaction. */
      card: Partial<string> & Partial<components["schemas"]["issuing.card"]>;
      /** The cardholder to whom this transaction belongs. */
      cardholder?: (Partial<string> & Partial<components["schemas"]["issuing.cardholder"]>) | null;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** Unique identifier for the object. */
      id: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** The amount that the merchant will receive, denominated in `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). It will be different from `amount` if the merchant is taking payment in a different currency. */
      merchant_amount: number;
      /** The currency with which the merchant is taking payment. */
      merchant_currency: string;
      merchant_data: components["schemas"]["issuing_authorization_merchant_data"];
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: { [key: string]: string };
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "issuing.transaction";
      /** The nature of the transaction. */
      type: "capture" | "refund";
    };
    issuing_authorization_merchant_data: {
      /** A categorization of the seller's type of business. See our [merchant categories guide](https://stripe.com/docs/issuing/merchant-categories) for a list of possible values. */
      category: string;
      /** City where the seller is located */
      city?: string | null;
      /** Country where the seller is located */
      country?: string | null;
      /** Name of the seller */
      name?: string | null;
      /** Identifier assigned to the seller by the card brand */
      network_id: string;
      /** Postal code where the seller is located */
      postal_code?: string | null;
      /** State where the seller is located */
      state?: string | null;
    };
    issuing_authorization_pending_request: {
      /** The additional amount Stripe will hold if the authorization is approved, in the card's [currency](https://stripe.com/docs/api#issuing_authorization_object-pending-request-currency) and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
      amount: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization. */
      is_amount_controllable: boolean;
      /** The amount the merchant is requesting to be authorized in the `merchant_currency`. The amount is in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
      merchant_amount: number;
      /** The local currency the merchant is requesting to authorize. */
      merchant_currency: string;
    };
    issuing_authorization_request: {
      /** The authorization amount in your card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Stripe held this amount from your account to fund the authorization if the request was approved. */
      amount: number;
      /** Whether this request was approved. */
      approved: boolean;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** The amount that was authorized at the time of this request. This amount is in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
      merchant_amount: number;
      /** The currency that was collected by the merchant and presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      merchant_currency: string;
      /** The reason for the approval or decline. */
      reason:
        | "account_disabled"
        | "card_active"
        | "card_inactive"
        | "cardholder_inactive"
        | "cardholder_verification_required"
        | "insufficient_funds"
        | "not_allowed"
        | "spending_controls"
        | "suspected_fraud"
        | "verification_failed"
        | "webhook_approved"
        | "webhook_declined"
        | "webhook_timeout";
    };
    issuing_authorization_verification_data: {
      /** Whether the cardholder provided an address first line and if it matched the cardholder’s `billing.address.line1`. */
      address_line1_check: "match" | "mismatch" | "not_provided";
      /** Whether the cardholder provided a postal code and if it matched the cardholder’s `billing.address.postal_code`. */
      address_postal_code_check: "match" | "mismatch" | "not_provided";
      /** Whether the cardholder provided a CVC and if it matched Stripe’s record. */
      cvc_check: "match" | "mismatch" | "not_provided";
      /** Whether the cardholder provided an expiry date and if it matched Stripe’s record. */
      expiry_check: "match" | "mismatch" | "not_provided";
    };
    issuing_card_authorization_controls: {
      /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations permitted on this card. */
      allowed_categories?:
        | (
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
          )[]
        | null;
      /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to always decline on this card. */
      blocked_categories?:
        | (
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
          )[]
        | null;
      /** Limit the spending with rules based on time intervals and categories. */
      spending_limits?: components["schemas"]["issuing_card_spending_limit"][] | null;
      /** Currency for the amounts within spending_limits. Locked to the currency of the card. */
      spending_limits_currency?: string | null;
    };
    issuing_card_shipping: {
      address: components["schemas"]["address"];
      /** The delivery company that shipped a card. */
      carrier?: ("fedex" | "usps") | null;
      /** A unix timestamp representing a best estimate of when the card will be delivered. */
      eta?: number | null;
      /** Recipient name. */
      name: string;
      /** Shipment service, such as `standard` or `express`. */
      service: "express" | "priority" | "standard";
      /** The delivery status of the card. */
      status?: ("canceled" | "delivered" | "failure" | "pending" | "returned" | "shipped") | null;
      /** A tracking number for a card shipment. */
      tracking_number?: string | null;
      /** A link to the shipping carrier's site where you can view detailed information about a card shipment. */
      tracking_url?: string | null;
      /** Packaging options. */
      type: "bulk" | "individual";
    };
    issuing_card_spending_limit: {
      /** Maximum amount allowed to spend per time interval. */
      amount: number;
      /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) on which to apply the spending limit. Leave this blank to limit all charges. */
      categories?:
        | (
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
          )[]
        | null;
      /** The time interval or event with which to apply this spending limit towards. */
      interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
    };
    issuing_cardholder_address: {
      address: components["schemas"]["address"];
    };
    issuing_cardholder_authorization_controls: {
      /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations permitted on this cardholder's cards. */
      allowed_categories?:
        | (
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
          )[]
        | null;
      /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to always decline on this cardholder's cards. */
      blocked_categories?:
        | (
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
          )[]
        | null;
      /** Limit the spending with rules based on time intervals and categories. */
      spending_limits?: components["schemas"]["issuing_cardholder_spending_limit"][] | null;
      /** Currency for the amounts within spending_limits. */
      spending_limits_currency?: string | null;
    };
    issuing_cardholder_company: {
      /** Whether the company's business ID number was provided. */
      tax_id_provided: boolean;
    };
    issuing_cardholder_id_document: {
      /** The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
      back?: (Partial<string> & Partial<components["schemas"]["file"]>) | null;
      /** The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
      front?: (Partial<string> & Partial<components["schemas"]["file"]>) | null;
    };
    issuing_cardholder_individual: {
      /** The date of birth of this cardholder. */
      dob?: Partial<components["schemas"]["issuing_cardholder_individual_dob"]> | null;
      /** The first name of this cardholder. */
      first_name: string;
      /** The last name of this cardholder. */
      last_name: string;
      /** Government-issued ID document for this cardholder. */
      verification?: Partial<components["schemas"]["issuing_cardholder_verification"]> | null;
    };
    issuing_cardholder_individual_dob: {
      /** The day of birth, between 1 and 31. */
      day?: number | null;
      /** The month of birth, between 1 and 12. */
      month?: number | null;
      /** The four-digit year of birth. */
      year?: number | null;
    };
    issuing_cardholder_requirements: {
      /** If `disabled_reason` is present, all cards will decline authorizations with `cardholder_verification_required` reason. */
      disabled_reason?: ("listed" | "rejected.listed" | "under_review") | null;
      /** Array of fields that need to be collected in order to verify and re-enable the cardholder. */
      past_due?:
        | (
            | "company.tax_id"
            | "individual.dob.day"
            | "individual.dob.month"
            | "individual.dob.year"
            | "individual.first_name"
            | "individual.last_name"
            | "individual.verification.document"
          )[]
        | null;
    };
    issuing_cardholder_spending_limit: {
      /** Maximum amount allowed to spend per time interval. */
      amount: number;
      /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) on which to apply the spending limit. Leave this blank to limit all charges. */
      categories?:
        | (
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
          )[]
        | null;
      /** The time interval or event with which to apply this spending limit towards. */
      interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
    };
    issuing_cardholder_verification: {
      /** An identifying document, either a passport or local ID card. */
      document?: Partial<components["schemas"]["issuing_cardholder_id_document"]> | null;
    };
    legal_entity_company: {
      address?: components["schemas"]["address"];
      /** The Kana variation of the company's primary address (Japan only). */
      address_kana?: Partial<components["schemas"]["legal_entity_japan_address"]> | null;
      /** The Kanji variation of the company's primary address (Japan only). */
      address_kanji?: Partial<components["schemas"]["legal_entity_japan_address"]> | null;
      /** Whether the company's directors have been provided. This Boolean will be `true` if you've manually indicated that all directors are provided via [the `directors_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-directors_provided). */
      directors_provided?: boolean;
      /** Whether the company's executives have been provided. This Boolean will be `true` if you've manually indicated that all executives are provided via [the `executives_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-executives_provided), or if Stripe determined that sufficient executives were provided. */
      executives_provided?: boolean;
      /** The company's legal name. */
      name?: string | null;
      /** The Kana variation of the company's legal name (Japan only). */
      name_kana?: string | null;
      /** The Kanji variation of the company's legal name (Japan only). */
      name_kanji?: string | null;
      /** Whether the company's owners have been provided. This Boolean will be `true` if you've manually indicated that all owners are provided via [the `owners_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-owners_provided), or if Stripe determined that sufficient owners were provided. Stripe determines ownership requirements using both the number of owners provided and their total percent ownership (calculated by adding the `percent_ownership` of each owner together). */
      owners_provided?: boolean;
      /** The company's phone number (used for verification). */
      phone?: string | null;
      /** The category identifying the legal structure of the company or legal entity. See [Business structure](https://stripe.com/docs/connect/identity-verification#business-structure) for more details. */
      structure?:
        | "government_instrumentality"
        | "governmental_unit"
        | "incorporated_non_profit"
        | "limited_liability_partnership"
        | "multi_member_llc"
        | "private_company"
        | "private_corporation"
        | "private_partnership"
        | "public_company"
        | "public_corporation"
        | "public_partnership"
        | "sole_proprietorship"
        | "tax_exempt_government_instrumentality"
        | "unincorporated_association"
        | "unincorporated_non_profit";
      /** Whether the company's business ID number was provided. */
      tax_id_provided?: boolean;
      /** The jurisdiction in which the `tax_id` is registered (Germany-based companies only). */
      tax_id_registrar?: string;
      /** Whether the company's business VAT number was provided. */
      vat_id_provided?: boolean;
      /** Information on the verification state of the company. */
      verification?: Partial<components["schemas"]["legal_entity_company_verification"]> | null;
    };
    legal_entity_company_verification: {
      document: components["schemas"]["legal_entity_company_verification_document"];
    };
    legal_entity_company_verification_document: {
      /** The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`. */
      back?: (Partial<string> & Partial<components["schemas"]["file"]>) | null;
      /** A user-displayable string describing the verification state of this document. */
      details?: string | null;
      /** One of `document_corrupt`, `document_expired`, `document_failed_copy`, `document_failed_greyscale`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_not_readable`, `document_not_uploaded`, `document_type_not_supported`, or `document_too_large`. A machine-readable code specifying the verification state for this document. */
      details_code?: string | null;
      /** The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`. */
      front?: (Partial<string> & Partial<components["schemas"]["file"]>) | null;
    };
    legal_entity_dob: {
      /** The day of birth, between 1 and 31. */
      day?: number | null;
      /** The month of birth, between 1 and 12. */
      month?: number | null;
      /** The four-digit year of birth. */
      year?: number | null;
    };
    legal_entity_japan_address: {
      /** City/Ward. */
      city?: string | null;
      /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
      country?: string | null;
      /** Block/Building number. */
      line1?: string | null;
      /** Building details. */
      line2?: string | null;
      /** ZIP or postal code. */
      postal_code?: string | null;
      /** Prefecture. */
      state?: string | null;
      /** Town/cho-me. */
      town?: string | null;
    };
    legal_entity_person_verification: {
      /** A document showing address, either a passport, local ID card, or utility bill from a well-known utility company. */
      additional_document?: Partial<components["schemas"]["legal_entity_person_verification_document"]> | null;
      /** A user-displayable string describing the verification state for the person. For example, this may say "Provided identity information could not be verified". */
      details?: string | null;
      /** One of `document_address_mismatch`, `document_dob_mismatch`, `document_duplicate_type`, `document_id_number_mismatch`, `document_name_mismatch`, `document_nationality_mismatch`, `failed_keyed_identity`, or `failed_other`. A machine-readable code specifying the verification state for the person. */
      details_code?: string | null;
      document?: components["schemas"]["legal_entity_person_verification_document"];
      /** The state of verification for the person. Possible values are `unverified`, `pending`, or `verified`. */
      status: string;
    };
    legal_entity_person_verification_document: {
      /** The back of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
      back?: (Partial<string> & Partial<components["schemas"]["file"]>) | null;
      /** A user-displayable string describing the verification state of this document. For example, if a document is uploaded and the picture is too fuzzy, this may say "Identity document is too unclear to read". */
      details?: string | null;
      /** One of `document_corrupt`, `document_country_not_supported`, `document_expired`, `document_failed_copy`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_failed_greyscale`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_missing_back`, `document_missing_front`, `document_not_readable`, `document_not_uploaded`, `document_photo_mismatch`, `document_too_large`, or `document_type_not_supported`. A machine-readable code specifying the verification state for this document. */
      details_code?: string | null;
      /** The front of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
      front?: (Partial<string> & Partial<components["schemas"]["file"]>) | null;
    };
    light_account_logout: { [key: string]: any };
    line_item: {
      /** The amount, in %s. */
      amount: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** An arbitrary string attached to the object. Often useful for displaying to users. */
      description?: string | null;
      /** If true, discounts will apply to this line item. Always false for prorations. */
      discountable: boolean;
      /** Unique identifier for the object. */
      id: string;
      /** The ID of the [invoice item](https://stripe.com/docs/api/invoiceitems) associated with this line item if any. */
      invoice_item?: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription` this will reflect the metadata of the subscription that caused the line item to be created. */
      metadata: { [key: string]: string };
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "line_item";
      period: components["schemas"]["invoice_line_item_period"];
      /** The plan of the subscription, if the line item is a subscription or a proration. */
      plan?: Partial<components["schemas"]["plan"]> | null;
      /** Whether this is a proration. */
      proration: boolean;
      /** The quantity of the subscription, if the line item is a subscription or a proration. */
      quantity?: number | null;
      /** The subscription that the invoice item pertains to, if any. */
      subscription?: string | null;
      /** The subscription item that generated this invoice item. Left empty if the line item is not an explicit result of a subscription. */
      subscription_item?: string;
      /** The amount of tax calculated per tax rate for this line item */
      tax_amounts?: components["schemas"]["invoice_tax_amount"][] | null;
      /** The tax rates which apply to the line item. */
      tax_rates?: components["schemas"]["tax_rate"][] | null;
      /** A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`. */
      type: "invoiceitem" | "subscription";
    };
    login_link: {
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "login_link";
      /** The URL for the login link. */
      url: string;
    };
    /** A Mandate is a record of the permission a customer has given you to debit their payment method. */
    mandate: {
      customer_acceptance: components["schemas"]["customer_acceptance"];
      /** Unique identifier for the object. */
      id: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      multi_use?: components["schemas"]["mandate_multi_use"];
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "mandate";
      /** ID of the payment method associated with this mandate. */
      payment_method: Partial<string> & Partial<components["schemas"]["payment_method"]>;
      payment_method_details: components["schemas"]["mandate_payment_method_details"];
      single_use?: components["schemas"]["mandate_single_use"];
      /** The status of the mandate, which indicates whether it can be used to initiate a payment. */
      status: "active" | "inactive" | "pending";
      /** The type of the mandate. */
      type: "multi_use" | "single_use";
    };
    mandate_au_becs_debit: {
      /** The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively. */
      url: string;
    };
    mandate_multi_use: { [key: string]: any };
    mandate_payment_method_details: {
      au_becs_debit?: components["schemas"]["mandate_au_becs_debit"];
      card?: components["schemas"]["card_mandate_payment_method_details"];
      sepa_debit?: components["schemas"]["mandate_sepa_debit"];
      /** The type of the payment method associated with this mandate. An additional hash is included on `payment_method_details` with a name matching this value. It contains mandate information specific to the payment method. */
      type: string;
    };
    mandate_sepa_debit: {
      /** The unique reference of the mandate. */
      reference: string;
      /** The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively. */
      url: string;
    };
    mandate_single_use: {
      /** On a single use mandate, the amount of the payment. */
      amount: number;
      /** On a single use mandate, the currency of the payment. */
      currency: string;
    };
    notification_event_data: {
      /** Object containing the API resource relevant to the event. For example, an `invoice.created` event will have a full [invoice object](https://stripe.com/docs/api#invoice_object) as the value of the object key. */
      object: { [key: string]: any };
      /** Object containing the names of the attributes that have changed, and their previous values (sent along only with *.updated events). */
      previous_attributes?: { [key: string]: any };
    };
    notification_event_request: {
      /** ID of the API request that caused the event. If null, the event was automatic (e.g., Stripe's automatic subscription handling). Request logs are available in the [dashboard](https://dashboard.stripe.com/logs), but currently not in the API. */
      id?: string | null;
      /** The idempotency key transmitted during the request, if any. *Note: This property is populated only for events on or after May 23, 2017*. */
      idempotency_key?: string | null;
    };
    offline_acceptance: { [key: string]: any };
    online_acceptance: {
      /** The IP address from which the Mandate was accepted by the customer. */
      ip_address?: string | null;
      /** The user agent of the browser from which the Mandate was accepted by the customer. */
      user_agent?: string | null;
    };
    /**
     * Order objects are created to handle end customers' purchases of previously
     * defined [products](https://stripe.com/docs/api#products). You can create, retrieve, and pay individual orders, as well
     * as list all orders. Orders are identified by a unique, random ID.
     *
     * Related guide: [Tax, Shipping, and Inventory](https://stripe.com/docs/orders).
     */
    order: {
      /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order. */
      amount: number;
      /** The total amount that was returned to the customer. */
      amount_returned?: number | null;
      /** ID of the Connect Application that created the order. */
      application?: string | null;
      /** A fee in cents that will be applied to the order and transferred to the application owner’s Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees documentation. */
      application_fee?: number | null;
      /** The ID of the payment used to pay for the order. Present if the order status is `paid`, `fulfilled`, or `refunded`. */
      charge?: (Partial<string> & Partial<components["schemas"]["charge"]>) | null;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** The customer used for the order. */
      customer?:
        | (Partial<string> &
            Partial<components["schemas"]["customer"]> &
            Partial<components["schemas"]["deleted_customer"]>)
        | null;
      /** The email address of the customer placing the order. */
      email?: string | null;
      /** External coupon code to load for this order. */
      external_coupon_code?: string;
      /** Unique identifier for the object. */
      id: string;
      /** List of items constituting the order. An order can have up to 25 items. */
      items: components["schemas"]["order_item"][];
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: { [key: string]: string };
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "order";
      /** A list of returns that have taken place for this order. */
      returns?: {
        /** Details about each object. */
        data: components["schemas"]["order_return"][];
        /** True if this list has another page of items after this one that can be fetched. */
        has_more: boolean;
        /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
        object: "list";
        /** The URL where this list can be accessed. */
        url: string;
      } | null;
      /** The shipping method that is currently selected for this order, if any. If present, it is equal to one of the `id`s of shipping methods in the `shipping_methods` array. At order creation time, if there are multiple shipping methods, Stripe will automatically selected the first method. */
      selected_shipping_method?: string | null;
      /** The shipping address for the order. Present if the order is for goods to be shipped. */
      shipping?: Partial<components["schemas"]["shipping"]> | null;
      /** A list of supported shipping methods for this order. The desired shipping method can be specified either by updating the order, or when paying it. */
      shipping_methods?: components["schemas"]["shipping_method"][] | null;
      /** Current order status. One of `created`, `paid`, `canceled`, `fulfilled`, or `returned`. More details in the [Orders Guide](https://stripe.com/docs/orders/guide#understanding-order-statuses). */
      status: string;
      /** The timestamps at which the order status was updated. */
      status_transitions?: Partial<components["schemas"]["status_transitions"]> | null;
      /** Time at which the object was last updated. Measured in seconds since the Unix epoch. */
      updated?: number | null;
      /** The user's order ID if it is different from the Stripe order ID. */
      upstream_id?: string;
    };
    /**
     * A representation of the constituent items of any given order. Can be used to
     * represent [SKUs](https://stripe.com/docs/api#skus), shipping costs, or taxes owed on the order.
     *
     * Related guide: [Orders](https://stripe.com/docs/orders/guide).
     */
    order_item: {
      /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the line item. */
      amount: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** Description of the line item, meant to be displayable to the user (e.g., `"Express shipping"`). */
      description: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "order_item";
      /** The ID of the associated object for this line item. Expandable if not null (e.g., expandable to a SKU). */
      parent?: (Partial<string> & Partial<components["schemas"]["sku"]>) | null;
      /** A positive integer representing the number of instances of `parent` that are included in this order item. Applicable/present only if `type` is `sku`. */
      quantity?: number | null;
      /** The type of line item. One of `sku`, `tax`, `shipping`, or `discount`. */
      type: string;
    };
    /**
     * A return represents the full or partial return of a number of [order items](https://stripe.com/docs/api#order_items).
     * Returns always belong to an order, and may optionally contain a refund.
     *
     * Related guide: [Handling Returns](https://stripe.com/docs/orders/guide#handling-returns).
     */
    order_return: {
      /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the returned line item. */
      amount: number;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** Unique identifier for the object. */
      id: string;
      /** The items included in this order return. */
      items: components["schemas"]["order_item"][];
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "order_return";
      /** The order that this return includes items from. */
      order?: (Partial<string> & Partial<components["schemas"]["order"]>) | null;
      /** The ID of the refund issued for this return. */
      refund?: (Partial<string> & Partial<components["schemas"]["refund"]>) | null;
    };
    package_dimensions: {
      /** Height, in inches. */
      height: number;
      /** Length, in inches. */
      length: number;
      /** Weight, in ounces. */
      weight: number;
      /** Width, in inches. */
      width: number;
    };
    /**
     * A PaymentIntent guides you through the process of collecting a payment from your customer.
     * We recommend that you create exactly one PaymentIntent for each order or
     * customer session in your system. You can reference the PaymentIntent later to
     * see the history of payment attempts for a particular session.
     *
     * A PaymentIntent transitions through
     * [multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
     * throughout its lifetime as it interfaces with Stripe.js to perform
     * authentication flows and ultimately creates at most one successful charge.
     *
     * Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents).
     */
    payment_intent: {
      /** Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
      amount: number;
      /** Amount that can be captured from this PaymentIntent. */
      amount_capturable?: number;
      /** Amount that was collected by this PaymentIntent. */
      amount_received?: number;
      /** ID of the Connect application that created the PaymentIntent. */
      application?: (Partial<string> & Partial<components["schemas"]["application"]>) | null;
      /** The amount of the application fee (if any) for the resulting payment. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details. */
      application_fee_amount?: number | null;
      /** Populated when `status` is `canceled`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch. */
      canceled_at?: number | null;
      /** Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, or `automatic`). */
      cancellation_reason?:
        | (
            | "abandoned"
            | "automatic"
            | "duplicate"
            | "failed_invoice"
            | "fraudulent"
            | "requested_by_customer"
            | "void_invoice"
          )
        | null;
      /** Controls when the funds will be captured from the customer's account. */
      capture_method: "automatic" | "manual";
      /** Charges that were created by this PaymentIntent, if any. */
      charges?: {
        /** This list only contains the latest charge, even if there were previously multiple unsuccessful charges. To view all previous charges for a PaymentIntent, you can filter the charges list using the `payment_intent` [parameter](https://stripe.com/docs/api/charges/list#list_charges-payment_intent). */
        data: components["schemas"]["charge"][];
        /** True if this list has another page of items after this one that can be fetched. */
        has_more: boolean;
        /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
        object: "list";
        /** The URL where this list can be accessed. */
        url: string;
      };
      /**
       * The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.
       *
       * The client secret can be used to complete a payment from your frontend. It should not be stored, logged, embedded in URLs, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
       *
       * Refer to our docs to [accept a payment](https://stripe.com/docs/payments/accept-a-payment) and learn about how `client_secret` should be handled.
       */
      client_secret?: string | null;
      confirmation_method: "automatic" | "manual";
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /**
       * ID of the Customer this PaymentIntent belongs to, if one exists.
       *
       * Payment methods attached to other Customers cannot be used with this PaymentIntent.
       *
       * If present in combination with [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage), this PaymentIntent's payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.
       */
      customer?:
        | (Partial<string> &
            Partial<components["schemas"]["customer"]> &
            Partial<components["schemas"]["deleted_customer"]>)
        | null;
      /** An arbitrary string attached to the object. Often useful for displaying to users. */
      description?: string | null;
      /** Unique identifier for the object. */
      id: string;
      /** ID of the invoice that created this PaymentIntent, if it exists. */
      invoice?: (Partial<string> & Partial<components["schemas"]["invoice"]>) | null;
      /** The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason. */
      last_payment_error?: Partial<components["schemas"]["api_errors"]> | null;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. For more information, see the [documentation](https://stripe.com/docs/payments/payment-intents/creating-payment-intents#storing-information-in-metadata). */
      metadata?: { [key: string]: string };
      /** If present, this property tells you what actions you need to take in order for your customer to fulfill a payment using the provided source. */
      next_action?: Partial<components["schemas"]["payment_intent_next_action"]> | null;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "payment_intent";
      /** The account (if any) for which the funds of the PaymentIntent are intended. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details. */
      on_behalf_of?: (Partial<string> & Partial<components["schemas"]["account"]>) | null;
      /** ID of the payment method used in this PaymentIntent. */
      payment_method?: (Partial<string> & Partial<components["schemas"]["payment_method"]>) | null;
      /** Payment-method-specific configuration for this PaymentIntent. */
      payment_method_options?: Partial<components["schemas"]["payment_intent_payment_method_options"]> | null;
      /** The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. */
      payment_method_types: string[];
      /** Email address that the receipt for the resulting payment will be sent to. */
      receipt_email?: string | null;
      /** ID of the review associated with this PaymentIntent, if any. */
      review?: (Partial<string> & Partial<components["schemas"]["review"]>) | null;
      /**
       * Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
       *
       * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
       */
      setup_future_usage?: ("off_session" | "on_session") | null;
      /** Shipping information for this PaymentIntent. */
      shipping?: Partial<components["schemas"]["shipping"]> | null;
      /** For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters. */
      statement_descriptor?: string | null;
      /** Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
      statement_descriptor_suffix?: string | null;
      /** Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses). */
      status:
        | "canceled"
        | "processing"
        | "requires_action"
        | "requires_capture"
        | "requires_confirmation"
        | "requires_payment_method"
        | "succeeded";
      /** The data with which to automatically create a Transfer when the payment is finalized. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details. */
      transfer_data?: Partial<components["schemas"]["transfer_data"]> | null;
      /** A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details. */
      transfer_group?: string | null;
    };
    payment_intent_next_action: {
      redirect_to_url?: components["schemas"]["payment_intent_next_action_redirect_to_url"];
      /** Type of the next action to perform, one of `redirect_to_url` or `use_stripe_sdk`. */
      type: string;
      /** When confirming a PaymentIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js. */
      use_stripe_sdk?: { [key: string]: any };
    };
    payment_intent_next_action_redirect_to_url: {
      /** If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion. */
      return_url?: string | null;
      /** The URL you must redirect your customer to in order to authenticate the payment. */
      url?: string | null;
    };
    payment_intent_payment_method_options: {
      card?: components["schemas"]["payment_intent_payment_method_options_card"];
    };
    payment_intent_payment_method_options_card: {
      /**
       * Installment details for this payment (Mexico only).
       *
       * For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
       */
      installments?: Partial<components["schemas"]["payment_method_options_card_installments"]> | null;
      /** We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine. */
      request_three_d_secure?: ("any" | "automatic" | "challenge_only") | null;
    };
    /**
     * PaymentMethod objects represent your customer's payment instruments.
     * They can be used with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or saved to
     * Customer objects to store instrument details for future payments.
     *
     * Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
     */
    payment_method: {
      au_becs_debit?: components["schemas"]["payment_method_au_becs_debit"];
      billing_details: components["schemas"]["billing_details"];
      card?: components["schemas"]["payment_method_card"];
      card_present?: components["schemas"]["payment_method_card_present"];
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer. */
      customer?: (Partial<string> & Partial<components["schemas"]["customer"]>) | null;
      fpx?: components["schemas"]["payment_method_fpx"];
      /** Unique identifier for the object. */
      id: string;
      ideal?: components["schemas"]["payment_method_ideal"];
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: { [key: string]: string };
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "payment_method";
      sepa_debit?: components["schemas"]["payment_method_sepa_debit"];
      /** The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type. */
      type: "au_becs_debit" | "card" | "fpx" | "ideal" | "sepa_debit";
    };
    payment_method_au_becs_debit: {
      /** Six-digit number identifying bank and branch associated with this bank account. */
      bsb_number?: string | null;
      /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
      fingerprint?: string | null;
      /** Last four digits of the bank account number. */
      last4?: string | null;
    };
    payment_method_card: {
      /** Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
      brand: string;
      /** Checks on Card address and CVC if provided. */
      checks?: Partial<components["schemas"]["payment_method_card_checks"]> | null;
      /** Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
      country?: string | null;
      /** Two-digit number representing the card's expiration month. */
      exp_month: number;
      /** Four-digit number representing the card's expiration year. */
      exp_year: number;
      /** Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number,for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number. */
      fingerprint?: string | null;
      /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
      funding: string;
      /** Details of the original PaymentMethod that created this object. */
      generated_from?: Partial<components["schemas"]["payment_method_card_generated_card"]> | null;
      /** The last four digits of the card. */
      last4: string;
      /** Contains details on how this Card maybe be used for 3D Secure authentication. */
      three_d_secure_usage?: Partial<components["schemas"]["three_d_secure_usage"]> | null;
      /** If this Card is part of a card wallet, this contains the details of the card wallet. */
      wallet?: Partial<components["schemas"]["payment_method_card_wallet"]> | null;
    };
    payment_method_card_checks: {
      /** If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
      address_line1_check?: string | null;
      /** If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
      address_postal_code_check?: string | null;
      /** If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
      cvc_check?: string | null;
    };
    payment_method_card_generated_card: {
      /** The charge that created this object. */
      charge?: string | null;
      /** Transaction-specific details of the payment method used in the payment. */
      payment_method_details?: Partial<components["schemas"]["payment_method_details"]> | null;
    };
    payment_method_card_present: { [key: string]: any };
    payment_method_card_wallet: {
      amex_express_checkout?: components["schemas"]["payment_method_card_wallet_amex_express_checkout"];
      apple_pay?: components["schemas"]["payment_method_card_wallet_apple_pay"];
      /** (For tokenized numbers only.) The last four digits of the device account number. */
      dynamic_last4?: string | null;
      google_pay?: components["schemas"]["payment_method_card_wallet_google_pay"];
      masterpass?: components["schemas"]["payment_method_card_wallet_masterpass"];
      samsung_pay?: components["schemas"]["payment_method_card_wallet_samsung_pay"];
      /** The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type. */
      type: "amex_express_checkout" | "apple_pay" | "google_pay" | "masterpass" | "samsung_pay" | "visa_checkout";
      visa_checkout?: components["schemas"]["payment_method_card_wallet_visa_checkout"];
    };
    payment_method_card_wallet_amex_express_checkout: { [key: string]: any };
    payment_method_card_wallet_apple_pay: { [key: string]: any };
    payment_method_card_wallet_google_pay: { [key: string]: any };
    payment_method_card_wallet_masterpass: {
      /** Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      billing_address?: Partial<components["schemas"]["address"]> | null;
      /** Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      email?: string | null;
      /** Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      name?: string | null;
      /** Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      shipping_address?: Partial<components["schemas"]["address"]> | null;
    };
    payment_method_card_wallet_samsung_pay: { [key: string]: any };
    payment_method_card_wallet_visa_checkout: {
      /** Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      billing_address?: Partial<components["schemas"]["address"]> | null;
      /** Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      email?: string | null;
      /** Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      name?: string | null;
      /** Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      shipping_address?: Partial<components["schemas"]["address"]> | null;
    };
    payment_method_details: {
      ach_credit_transfer?: components["schemas"]["payment_method_details_ach_credit_transfer"];
      ach_debit?: components["schemas"]["payment_method_details_ach_debit"];
      alipay?: components["schemas"]["payment_method_details_alipay"];
      au_becs_debit?: components["schemas"]["payment_method_details_au_becs_debit"];
      bancontact?: components["schemas"]["payment_method_details_bancontact"];
      card?: components["schemas"]["payment_method_details_card"];
      card_present?: components["schemas"]["payment_method_details_card_present"];
      eps?: components["schemas"]["payment_method_details_eps"];
      fpx?: components["schemas"]["payment_method_details_fpx"];
      giropay?: components["schemas"]["payment_method_details_giropay"];
      ideal?: components["schemas"]["payment_method_details_ideal"];
      klarna?: components["schemas"]["payment_method_details_klarna"];
      multibanco?: components["schemas"]["payment_method_details_multibanco"];
      p24?: components["schemas"]["payment_method_details_p24"];
      sepa_debit?: components["schemas"]["payment_method_details_sepa_debit"];
      sofort?: components["schemas"]["payment_method_details_sofort"];
      stripe_account?: components["schemas"]["payment_method_details_stripe_account"];
      /**
       * The type of transaction-specific details of the payment method used in the payment, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `au_becs_debit`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `klarna`, `multibanco`, `p24`, `sepa_debit`, `sofort`, `stripe_account`, or `wechat`.
       * An additional hash is included on `payment_method_details` with a name matching this value.
       * It contains information specific to the payment method.
       */
      type: string;
      wechat?: components["schemas"]["payment_method_details_wechat"];
    };
    payment_method_details_ach_credit_transfer: {
      /** Account number to transfer funds to. */
      account_number?: string | null;
      /** Name of the bank associated with the routing number. */
      bank_name?: string | null;
      /** Routing transit number for the bank account to transfer funds to. */
      routing_number?: string | null;
      /** SWIFT code of the bank associated with the routing number. */
      swift_code?: string | null;
    };
    payment_method_details_ach_debit: {
      /** Type of entity that holds the account. This can be either `individual` or `company`. */
      account_holder_type?: ("company" | "individual") | null;
      /** Name of the bank associated with the bank account. */
      bank_name?: string | null;
      /** Two-letter ISO code representing the country the bank account is located in. */
      country?: string | null;
      /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
      fingerprint?: string | null;
      /** Last four digits of the bank account number. */
      last4?: string | null;
      /** Routing transit number of the bank account. */
      routing_number?: string | null;
    };
    payment_method_details_alipay: { [key: string]: any };
    payment_method_details_au_becs_debit: {
      /** Bank-State-Branch number of the bank account. */
      bsb_number?: string | null;
      /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
      fingerprint?: string | null;
      /** Last four digits of the bank account number. */
      last4?: string | null;
      /** ID of the mandate used to make this payment. */
      mandate?: string;
    };
    payment_method_details_bancontact: {
      /** Bank code of bank associated with the bank account. */
      bank_code?: string | null;
      /** Name of the bank associated with the bank account. */
      bank_name?: string | null;
      /** Bank Identifier Code of the bank associated with the bank account. */
      bic?: string | null;
      /** Last four characters of the IBAN. */
      iban_last4?: string | null;
      /**
       * Preferred language of the Bancontact authorization page that the customer is redirected to.
       * Can be one of `en`, `de`, `fr`, or `nl`
       */
      preferred_language?: ("de" | "en" | "fr" | "nl") | null;
      /**
       * Owner's verified full name. Values are verified or provided by Bancontact directly
       * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
       */
      verified_name?: string | null;
    };
    payment_method_details_card: {
      /** Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
      brand?: string | null;
      /** Check results by Card networks on Card address and CVC at time of payment. */
      checks?: Partial<components["schemas"]["payment_method_details_card_checks"]> | null;
      /** Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
      country?: string | null;
      /** Two-digit number representing the card's expiration month. */
      exp_month?: number | null;
      /** Four-digit number representing the card's expiration year. */
      exp_year?: number | null;
      /** Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number,for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number. */
      fingerprint?: string | null;
      /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
      funding?: string | null;
      /**
       * Installment details for this payment (Mexico only).
       *
       * For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
       */
      installments?: Partial<components["schemas"]["payment_method_details_card_installments"]> | null;
      /** The last four digits of the card. */
      last4?: string | null;
      /** Identifies which network this charge was processed on. Can be `amex`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
      network?: string | null;
      /** Populated if this transaction used 3D Secure authentication. */
      three_d_secure?: Partial<components["schemas"]["three_d_secure_details"]> | null;
      /** If this Card is part of a card wallet, this contains the details of the card wallet. */
      wallet?: Partial<components["schemas"]["payment_method_details_card_wallet"]> | null;
    };
    payment_method_details_card_checks: {
      /** If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
      address_line1_check?: string | null;
      /** If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
      address_postal_code_check?: string | null;
      /** If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
      cvc_check?: string | null;
    };
    payment_method_details_card_installments: {
      /** Installment plan selected for the payment. */
      plan?: Partial<components["schemas"]["payment_method_details_card_installments_plan"]> | null;
    };
    payment_method_details_card_installments_plan: {
      /** For `fixed_count` installment plans, this is the number of installment payments your customer will make to their credit card. */
      count?: number | null;
      /**
       * For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card.
       * One of `month`.
       */
      interval?: "month" | null;
      /** Type of installment plan, one of `fixed_count`. */
      type: "fixed_count";
    };
    payment_method_details_card_present: {
      /** Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
      brand?: string | null;
      /** The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). */
      cardholder_name?: string | null;
      /** Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
      country?: string | null;
      /** Authorization response cryptogram. */
      emv_auth_data?: string | null;
      /** Two-digit number representing the card's expiration month. */
      exp_month?: number | null;
      /** Four-digit number representing the card's expiration year. */
      exp_year?: number | null;
      /** Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number,for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number. */
      fingerprint?: string | null;
      /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
      funding?: string | null;
      /** ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod. */
      generated_card?: string | null;
      /** The last four digits of the card. */
      last4?: string | null;
      /** Identifies which network this charge was processed on. Can be `amex`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
      network?: string | null;
      /** How were card details read in this transaction. Can be contact_emv, contactless_emv, magnetic_stripe_fallback, magnetic_stripe_track2, or contactless_magstripe_mode */
      read_method?: string | null;
      /** A collection of fields required to be displayed on receipts. Only required for EMV transactions. */
      receipt?: Partial<components["schemas"]["payment_method_details_card_present_receipt"]> | null;
    };
    payment_method_details_card_present_receipt: {
      /** EMV tag 9F26, cryptogram generated by the integrated circuit chip. */
      application_cryptogram?: string | null;
      /** Mnenomic of the Application Identifier. */
      application_preferred_name?: string | null;
      /** Identifier for this transaction. */
      authorization_code?: string | null;
      /** EMV tag 8A. A code returned by the card issuer. */
      authorization_response_code?: string | null;
      /** How the cardholder verified ownership of the card. */
      cardholder_verification_method?: string | null;
      /** EMV tag 84. Similar to the application identifier stored on the integrated circuit chip. */
      dedicated_file_name?: string | null;
      /** The outcome of a series of EMV functions performed by the card reader. */
      terminal_verification_results?: string | null;
      /** An indication of various EMV functions performed during the transaction. */
      transaction_status_information?: string | null;
    };
    payment_method_details_card_wallet: {
      amex_express_checkout?: components["schemas"]["payment_method_details_card_wallet_amex_express_checkout"];
      apple_pay?: components["schemas"]["payment_method_details_card_wallet_apple_pay"];
      /** (For tokenized numbers only.) The last four digits of the device account number. */
      dynamic_last4?: string | null;
      google_pay?: components["schemas"]["payment_method_details_card_wallet_google_pay"];
      masterpass?: components["schemas"]["payment_method_details_card_wallet_masterpass"];
      samsung_pay?: components["schemas"]["payment_method_details_card_wallet_samsung_pay"];
      /** The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type. */
      type: "amex_express_checkout" | "apple_pay" | "google_pay" | "masterpass" | "samsung_pay" | "visa_checkout";
      visa_checkout?: components["schemas"]["payment_method_details_card_wallet_visa_checkout"];
    };
    payment_method_details_card_wallet_amex_express_checkout: { [key: string]: any };
    payment_method_details_card_wallet_apple_pay: { [key: string]: any };
    payment_method_details_card_wallet_google_pay: { [key: string]: any };
    payment_method_details_card_wallet_masterpass: {
      /** Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      billing_address?: Partial<components["schemas"]["address"]> | null;
      /** Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      email?: string | null;
      /** Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      name?: string | null;
      /** Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      shipping_address?: Partial<components["schemas"]["address"]> | null;
    };
    payment_method_details_card_wallet_samsung_pay: { [key: string]: any };
    payment_method_details_card_wallet_visa_checkout: {
      /** Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      billing_address?: Partial<components["schemas"]["address"]> | null;
      /** Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      email?: string | null;
      /** Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      name?: string | null;
      /** Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      shipping_address?: Partial<components["schemas"]["address"]> | null;
    };
    payment_method_details_eps: {
      /**
       * Owner's verified full name. Values are verified or provided by EPS directly
       * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
       */
      verified_name?: string | null;
    };
    payment_method_details_fpx: {
      /** The customer's bank. Can be one of `affin_bank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, or `pb_enterprise`. */
      bank:
        | "affin_bank"
        | "alliance_bank"
        | "ambank"
        | "bank_islam"
        | "bank_muamalat"
        | "bank_rakyat"
        | "bsn"
        | "cimb"
        | "deutsche_bank"
        | "hong_leong_bank"
        | "hsbc"
        | "kfh"
        | "maybank2e"
        | "maybank2u"
        | "ocbc"
        | "pb_enterprise"
        | "public_bank"
        | "rhb"
        | "standard_chartered"
        | "uob";
      /** Unique transaction id generated by FPX for every request from the merchant */
      transaction_id?: string | null;
    };
    payment_method_details_giropay: {
      /** Bank code of bank associated with the bank account. */
      bank_code?: string | null;
      /** Name of the bank associated with the bank account. */
      bank_name?: string | null;
      /** Bank Identifier Code of the bank associated with the bank account. */
      bic?: string | null;
      /**
       * Owner's verified full name. Values are verified or provided by Giropay directly
       * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
       */
      verified_name?: string | null;
    };
    payment_method_details_ideal: {
      /** The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `sns_bank`, `triodos_bank`, or `van_lanschot`. */
      bank?:
        | (
            | "abn_amro"
            | "asn_bank"
            | "bunq"
            | "handelsbanken"
            | "ing"
            | "knab"
            | "moneyou"
            | "rabobank"
            | "regiobank"
            | "sns_bank"
            | "triodos_bank"
            | "van_lanschot"
          )
        | null;
      /** The Bank Identifier Code of the customer's bank. */
      bic?:
        | (
            | "ABNANL2A"
            | "ASNBNL21"
            | "BUNQNL2A"
            | "FVLBNL22"
            | "HANDNL2A"
            | "INGBNL2A"
            | "KNABNL2H"
            | "MOYONL21"
            | "RABONL2U"
            | "RBRBNL21"
            | "SNSBNL2A"
            | "TRIONL2U"
          )
        | null;
      /** Last four characters of the IBAN. */
      iban_last4?: string | null;
      /**
       * Owner's verified full name. Values are verified or provided by iDEAL directly
       * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
       */
      verified_name?: string | null;
    };
    payment_method_details_klarna: { [key: string]: any };
    payment_method_details_multibanco: {
      /** Entity number associated with this Multibanco payment. */
      entity?: string | null;
      /** Reference number associated with this Multibanco payment. */
      reference?: string | null;
    };
    payment_method_details_p24: {
      /** Unique reference for this Przelewy24 payment. */
      reference?: string | null;
      /**
       * Owner's verified full name. Values are verified or provided by Przelewy24 directly
       * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
       */
      verified_name?: string | null;
    };
    payment_method_details_sepa_debit: {
      /** Bank code of bank associated with the bank account. */
      bank_code?: string | null;
      /** Branch code of bank associated with the bank account. */
      branch_code?: string | null;
      /** Two-letter ISO code representing the country the bank account is located in. */
      country?: string | null;
      /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
      fingerprint?: string | null;
      /** Last four characters of the IBAN. */
      last4?: string | null;
      /** ID of the mandate used to make this payment. */
      mandate?: string | null;
    };
    payment_method_details_sofort: {
      /** Bank code of bank associated with the bank account. */
      bank_code?: string | null;
      /** Name of the bank associated with the bank account. */
      bank_name?: string | null;
      /** Bank Identifier Code of the bank associated with the bank account. */
      bic?: string | null;
      /** Two-letter ISO code representing the country the bank account is located in. */
      country?: string | null;
      /** Last four characters of the IBAN. */
      iban_last4?: string | null;
      /**
       * Owner's verified full name. Values are verified or provided by SOFORT directly
       * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
       */
      verified_name?: string | null;
    };
    payment_method_details_stripe_account: { [key: string]: any };
    payment_method_details_wechat: { [key: string]: any };
    payment_method_fpx: {
      /** The customer's bank, if provided. Can be one of `affin_bank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, or `pb_enterprise`. */
      bank:
        | "affin_bank"
        | "alliance_bank"
        | "ambank"
        | "bank_islam"
        | "bank_muamalat"
        | "bank_rakyat"
        | "bsn"
        | "cimb"
        | "deutsche_bank"
        | "hong_leong_bank"
        | "hsbc"
        | "kfh"
        | "maybank2e"
        | "maybank2u"
        | "ocbc"
        | "pb_enterprise"
        | "public_bank"
        | "rhb"
        | "standard_chartered"
        | "uob";
    };
    payment_method_ideal: {
      /** The customer's bank, if provided. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `sns_bank`, `triodos_bank`, or `van_lanschot`. */
      bank?:
        | (
            | "abn_amro"
            | "asn_bank"
            | "bunq"
            | "handelsbanken"
            | "ing"
            | "knab"
            | "moneyou"
            | "rabobank"
            | "regiobank"
            | "sns_bank"
            | "triodos_bank"
            | "van_lanschot"
          )
        | null;
      /** The Bank Identifier Code of the customer's bank, if the bank was provided. */
      bic?:
        | (
            | "ABNANL2A"
            | "ASNBNL21"
            | "BUNQNL2A"
            | "FVLBNL22"
            | "HANDNL2A"
            | "INGBNL2A"
            | "KNABNL2H"
            | "MOYONL21"
            | "RABONL2U"
            | "RBRBNL21"
            | "SNSBNL2A"
            | "TRIONL2U"
          )
        | null;
    };
    payment_method_options_card_installments: {
      /** Installment plans that may be selected for this PaymentIntent. */
      available_plans?: components["schemas"]["payment_method_details_card_installments_plan"][] | null;
      /** Whether Installments are enabled for this PaymentIntent. */
      enabled: boolean;
      /** Installment plan selected for this PaymentIntent. */
      plan?: Partial<components["schemas"]["payment_method_details_card_installments_plan"]> | null;
    };
    payment_method_sepa_debit: {
      /** Bank code of bank associated with the bank account. */
      bank_code?: string | null;
      /** Branch code of bank associated with the bank account. */
      branch_code?: string | null;
      /** Two-letter ISO code representing the country the bank account is located in. */
      country?: string | null;
      /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
      fingerprint?: string | null;
      /** Last four characters of the IBAN. */
      last4?: string | null;
    };
    payment_pages_payment_page_resources_shipping_address_collection: {
      /**
       * An array of two-letter ISO country codes representing which countries Checkout should provide as options for
       * shipping locations. Unsupported country codes: `AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SD, SY, UM, VI`.
       */
      allowed_countries: (
        | "AC"
        | "AD"
        | "AE"
        | "AF"
        | "AG"
        | "AI"
        | "AL"
        | "AM"
        | "AO"
        | "AQ"
        | "AR"
        | "AT"
        | "AU"
        | "AW"
        | "AX"
        | "AZ"
        | "BA"
        | "BB"
        | "BD"
        | "BE"
        | "BF"
        | "BG"
        | "BH"
        | "BI"
        | "BJ"
        | "BL"
        | "BM"
        | "BN"
        | "BO"
        | "BQ"
        | "BR"
        | "BS"
        | "BT"
        | "BV"
        | "BW"
        | "BY"
        | "BZ"
        | "CA"
        | "CD"
        | "CF"
        | "CG"
        | "CH"
        | "CI"
        | "CK"
        | "CL"
        | "CM"
        | "CN"
        | "CO"
        | "CR"
        | "CV"
        | "CW"
        | "CY"
        | "CZ"
        | "DE"
        | "DJ"
        | "DK"
        | "DM"
        | "DO"
        | "DZ"
        | "EC"
        | "EE"
        | "EG"
        | "EH"
        | "ER"
        | "ES"
        | "ET"
        | "FI"
        | "FJ"
        | "FK"
        | "FO"
        | "FR"
        | "GA"
        | "GB"
        | "GD"
        | "GE"
        | "GF"
        | "GG"
        | "GH"
        | "GI"
        | "GL"
        | "GM"
        | "GN"
        | "GP"
        | "GQ"
        | "GR"
        | "GS"
        | "GT"
        | "GU"
        | "GW"
        | "GY"
        | "HK"
        | "HN"
        | "HR"
        | "HT"
        | "HU"
        | "ID"
        | "IE"
        | "IL"
        | "IM"
        | "IN"
        | "IO"
        | "IQ"
        | "IS"
        | "IT"
        | "JE"
        | "JM"
        | "JO"
        | "JP"
        | "KE"
        | "KG"
        | "KH"
        | "KI"
        | "KM"
        | "KN"
        | "KR"
        | "KW"
        | "KY"
        | "KZ"
        | "LA"
        | "LB"
        | "LC"
        | "LI"
        | "LK"
        | "LR"
        | "LS"
        | "LT"
        | "LU"
        | "LV"
        | "LY"
        | "MA"
        | "MC"
        | "MD"
        | "ME"
        | "MF"
        | "MG"
        | "MK"
        | "ML"
        | "MM"
        | "MN"
        | "MO"
        | "MQ"
        | "MR"
        | "MS"
        | "MT"
        | "MU"
        | "MV"
        | "MW"
        | "MX"
        | "MY"
        | "MZ"
        | "NA"
        | "NC"
        | "NE"
        | "NG"
        | "NI"
        | "NL"
        | "NO"
        | "NP"
        | "NR"
        | "NU"
        | "NZ"
        | "OM"
        | "PA"
        | "PE"
        | "PF"
        | "PG"
        | "PH"
        | "PK"
        | "PL"
        | "PM"
        | "PN"
        | "PR"
        | "PS"
        | "PT"
        | "PY"
        | "QA"
        | "RE"
        | "RO"
        | "RS"
        | "RU"
        | "RW"
        | "SA"
        | "SB"
        | "SC"
        | "SE"
        | "SG"
        | "SH"
        | "SI"
        | "SJ"
        | "SK"
        | "SL"
        | "SM"
        | "SN"
        | "SO"
        | "SR"
        | "SS"
        | "ST"
        | "SV"
        | "SX"
        | "SZ"
        | "TA"
        | "TC"
        | "TD"
        | "TF"
        | "TG"
        | "TH"
        | "TJ"
        | "TK"
        | "TL"
        | "TM"
        | "TN"
        | "TO"
        | "TR"
        | "TT"
        | "TV"
        | "TW"
        | "TZ"
        | "UA"
        | "UG"
        | "US"
        | "UY"
        | "UZ"
        | "VA"
        | "VC"
        | "VE"
        | "VG"
        | "VN"
        | "VU"
        | "WF"
        | "WS"
        | "XK"
        | "YE"
        | "YT"
        | "ZA"
        | "ZM"
        | "ZW"
        | "ZZ"
      )[];
    };
    payment_source: Partial<components["schemas"]["account"]> &
      Partial<components["schemas"]["alipay_account"]> &
      Partial<components["schemas"]["bank_account"]> &
      Partial<components["schemas"]["bitcoin_receiver"]> &
      Partial<components["schemas"]["card"]> &
      Partial<components["schemas"]["source"]>;
    /**
     * A `Payout` object is created when you receive funds from Stripe, or when you
     * initiate a payout to either a bank account or debit card of a [connected
     * Stripe account](/docs/connect/payouts). You can retrieve individual payouts,
     * as well as list all payouts. Payouts are made on [varying
     * schedules](/docs/payouts#payout-schedule), depending on your country and
     * industry.
     *
     * Related guide: [Receiving Payouts](https://stripe.com/docs/payouts).
     */
    payout: {
      /** Amount (in %s) to be transferred to your bank account or debit card. */
      amount: number;
      /** Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays. */
      arrival_date: number;
      /** Returns `true` if the payout was created by an [automated payout schedule](https://stripe.com/docs/payouts#payout-schedule), and `false` if it was [requested manually](https://stripe.com/docs/payouts#manual-payouts). */
      automatic: boolean;
      /** ID of the balance transaction that describes the impact of this payout on your account balance. */
      balance_transaction?: (Partial<string> & Partial<components["schemas"]["balance_transaction"]>) | null;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** An arbitrary string attached to the object. Often useful for displaying to users. */
      description?: string | null;
      /** ID of the bank account or card the payout was sent to. */
      destination?:
        | (Partial<string> &
            Partial<components["schemas"]["bank_account"]> &
            Partial<components["schemas"]["card"]> &
            Partial<components["schemas"]["deleted_bank_account"]> &
            Partial<components["schemas"]["deleted_card"]>)
        | null;
      /** If the payout failed or was canceled, this will be the ID of the balance transaction that reversed the initial balance transaction, and puts the funds from the failed payout back in your balance. */
      failure_balance_transaction?: (Partial<string> & Partial<components["schemas"]["balance_transaction"]>) | null;
      /** Error code explaining reason for payout failure if available. See [Types of payout failures](https://stripe.com/docs/api#payout_failures) for a list of failure codes. */
      failure_code?: string | null;
      /** Message to user further explaining reason for payout failure if available. */
      failure_message?: string | null;
      /** Unique identifier for the object. */
      id: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: { [key: string]: string };
      /** The method used to send this payout, which can be `standard` or `instant`. `instant` is only supported for payouts to debit cards. (See [Instant payouts for marketplaces](https://stripe.com/blog/instant-payouts-for-marketplaces) for more information.) */
      method: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "payout";
      /** The source balance this payout came from. One of `card`, `fpx`, or `bank_account`. */
      source_type: string;
      /** Extra information about a payout to be displayed on the user's bank statement. */
      statement_descriptor?: string | null;
      /** Current status of the payout: `paid`, `pending`, `in_transit`, `canceled` or `failed`. A payout is `pending` until it is submitted to the bank, when it becomes `in_transit`. The status then changes to `paid` if the transaction goes through, or to `failed` or `canceled` (within 5 business days). Some failed payouts may initially show as `paid` but then change to `failed`. */
      status: string;
      /** Can be `bank_account` or `card`. */
      type: "bank_account" | "card";
    };
    period: {
      /** The end date of this usage period. All usage up to and including this point in time is included. */
      end?: number | null;
      /** The start date of this usage period. All usage after this point in time is included. */
      start?: number | null;
    };
    /**
     * This is an object representing a person associated with a Stripe account.
     *
     * Related guide: [Handling Identity Verification with the API](https://stripe.com/docs/connect/identity-verification-api#person-information).
     */
    person: {
      account: string;
      address?: components["schemas"]["address"];
      address_kana?: Partial<components["schemas"]["legal_entity_japan_address"]> | null;
      address_kanji?: Partial<components["schemas"]["legal_entity_japan_address"]> | null;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      dob?: components["schemas"]["legal_entity_dob"];
      email?: string | null;
      first_name?: string | null;
      first_name_kana?: string | null;
      first_name_kanji?: string | null;
      gender?: string | null;
      /** Unique identifier for the object. */
      id: string;
      id_number_provided?: boolean;
      last_name?: string | null;
      last_name_kana?: string | null;
      last_name_kanji?: string | null;
      maiden_name?: string | null;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata?: { [key: string]: string };
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "person";
      phone?: string | null;
      relationship?: components["schemas"]["person_relationship"];
      requirements?: Partial<components["schemas"]["person_requirements"]> | null;
      ssn_last_4_provided?: boolean;
      verification?: components["schemas"]["legal_entity_person_verification"];
    };
    person_relationship: {
      /** Whether the person is a director of the account's legal entity. Currently only required for accounts in the EU. Directors are typically members of the governing board of the company, or responsible for ensuring the company meets its regulatory obligations. */
      director?: boolean | null;
      /** Whether the person has significant responsibility to control, manage, or direct the organization. */
      executive?: boolean | null;
      /** Whether the person is an owner of the account’s legal entity. */
      owner?: boolean | null;
      /** The percent owned by the person of the account's legal entity. */
      percent_ownership?: number | null;
      /** Whether the person is authorized as the primary representative of the account. This is the person nominated by the business to provide information about themselves, and general information about the account. There can only be one representative at any given time. At the time the account is created, this person should be set to the person responsible for opening the account. */
      representative?: boolean | null;
      /** The person's title (e.g., CEO, Support Engineer). */
      title?: string | null;
    };
    person_requirements: {
      /** Fields that need to be collected to keep the person's account enabled. If not collected by the account's `current_deadline`, these fields appear in `past_due` as well, and the account is disabled. */
      currently_due: string[];
      /** The fields that need to be collected again because validation or verification failed for some reason. */
      errors: components["schemas"]["account_requirements_error"][];
      /** Fields that need to be collected assuming all volume thresholds are reached. As fields are needed, they are moved to `currently_due` and the account's `current_deadline` is set. */
      eventually_due: string[];
      /** Fields that weren't collected by the account's `current_deadline`. These fields need to be collected to enable payouts for the person's account. */
      past_due: string[];
      /** Fields that may become required depending on the results of verification or review. An empty array unless an asynchronous verification is pending. If verification fails, the fields in this array become required and move to `currently_due` or `past_due`. */
      pending_verification: string[];
    };
    /**
     * Plans define the base price, currency, and billing cycle for subscriptions.
     * For example, you might have a $5/month plan
     * that provides limited access to your products, and a
     * $15/month plan that allows full access.
     *
     * Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription) and more about [products and plans](https://stripe.com/docs/billing/subscriptions/products-and-plans).
     */
    plan: {
      /** Whether the plan can be used for new purchases. */
      active: boolean;
      /** Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`. */
      aggregate_usage?: ("last_during_period" | "last_ever" | "max" | "sum") | null;
      /** The amount in %s to be charged on the interval specified. */
      amount?: number | null;
      /** Same as `amount`, but contains a decimal value with at most 12 decimal places. */
      amount_decimal?: string | null;
      /** Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes. */
      billing_scheme: "per_unit" | "tiered";
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** Unique identifier for the object. */
      id: string;
      /** The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`. */
      interval: "day" | "month" | "week" | "year";
      /** The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. */
      interval_count: number;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: { [key: string]: string };
      /** A brief description of the plan, hidden from customers. */
      nickname?: string | null;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "plan";
      /** The product whose pricing this plan determines. */
      product?:
        | (Partial<string> &
            Partial<components["schemas"]["product"]> &
            Partial<components["schemas"]["deleted_product"]>)
        | null;
      /** Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
      tiers?: components["schemas"]["plan_tier"][] | null;
      /** Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows. */
      tiers_mode?: ("graduated" | "volume") | null;
      /** Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`. */
      transform_usage?: Partial<components["schemas"]["transform_usage"]> | null;
      /** Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan). */
      trial_period_days?: number | null;
      /** Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`. */
      usage_type: "licensed" | "metered";
    };
    plan_tier: {
      /** Price for the entire tier. */
      flat_amount?: number | null;
      /** Same as `flat_amount`, but contains a decimal value with at most 12 decimal places. */
      flat_amount_decimal?: string | null;
      /** Per unit price for units relevant to the tier. */
      unit_amount?: number | null;
      /** Same as `unit_amount`, but contains a decimal value with at most 12 decimal places. */
      unit_amount_decimal?: string | null;
      /** Up to and including to this quantity will be contained in the tier. */
      up_to?: number | null;
    };
    platform_tax_fee: {
      /** The Connected account that incurred this charge. */
      account: string;
      /** Unique identifier for the object. */
      id: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "platform_tax_fee";
      /** The payment object that caused this tax to be inflicted. */
      source_transaction: string;
      /** The type of tax (VAT). */
      type: string;
    };
    /**
     * Store representations of products you sell in `Product` objects, used in
     * conjunction with [SKUs](https://stripe.com/docs/api#skus). Products may be physical goods, to be shipped, or
     * digital.
     *
     * Documentation on `Product`s for use with `Subscription`s can be found at
     * [Subscription Products](https://stripe.com/docs/api#service_products).
     *
     * Related guide: [Define products and SKUs](https://stripe.com/docs/orders#define-products-skus)
     */
    product: {
      /** Whether the product is currently available for purchase. */
      active: boolean;
      /** A list of up to 5 attributes that each SKU can provide values for (e.g., `["color", "size"]`). */
      attributes?: string[] | null;
      /** A short one-line description of the product, meant to be displayable to the customer. Only applicable to products of `type=good`. */
      caption?: string | null;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** An array of connect application identifiers that cannot purchase this product. Only applicable to products of `type=good`. */
      deactivate_on?: string[];
      /** The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes. */
      description?: string | null;
      /** Unique identifier for the object. */
      id: string;
      /** A list of up to 8 URLs of images for this product, meant to be displayable to the customer. */
      images: string[];
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: { [key: string]: string };
      /** The product's name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions. */
      name: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "product";
      /** The dimensions of this product for shipping purposes. A SKU associated with this product can override this value by having its own `package_dimensions`. Only applicable to products of `type=good`. */
      package_dimensions?: Partial<components["schemas"]["package_dimensions"]> | null;
      /** Whether this product is a shipped good. Only applicable to products of `type=good`. */
      shippable?: boolean | null;
      /** Extra information about a product which will appear on your customer's credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used. */
      statement_descriptor?: string | null;
      /** The type of the product. The product is either of type `good`, which is eligible for use with Orders and SKUs, or `service`, which is eligible for use with Subscriptions and Plans. */
      type: "good" | "service";
      /** A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions. */
      unit_label?: string | null;
      /** Time at which the object was last updated. Measured in seconds since the Unix epoch. */
      updated: number;
      /** A URL of a publicly-accessible webpage for this product. Only applicable to products of `type=good`. */
      url?: string | null;
    };
    /**
     * An early fraud warning indicates that the card issuer has notified us that a
     * charge may be fraudulent.
     *
     * Related guide: [Early Fraud Warnings](https://stripe.com/docs/disputes/measuring#early-fraud-warnings).
     */
    "radar.early_fraud_warning": {
      /** An EFW is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an EFW, in order to avoid receiving a dispute later. */
      actionable: boolean;
      /** ID of the charge this early fraud warning is for, optionally expanded. */
      charge: Partial<string> & Partial<components["schemas"]["charge"]>;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** The type of fraud labelled by the issuer. One of `card_never_received`, `fraudulent_card_application`, `made_with_counterfeit_card`, `made_with_lost_card`, `made_with_stolen_card`, `misc`, `unauthorized_use_of_card`. */
      fraud_type: string;
      /** Unique identifier for the object. */
      id: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "radar.early_fraud_warning";
    };
    /**
     * Value lists allow you to group values together which can then be referenced in rules.
     *
     * Related guide: [Default Stripe Lists](https://stripe.com/docs/radar/lists#managing-list-items).
     */
    "radar.value_list": {
      /** The name of the value list for use in rules. */
      alias: string;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** The name or email address of the user who created this value list. */
      created_by: string;
      /** Unique identifier for the object. */
      id: string;
      /** The type of items in the value list. One of `card_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, or `case_sensitive_string`. */
      item_type:
        | "card_bin"
        | "card_fingerprint"
        | "case_sensitive_string"
        | "country"
        | "email"
        | "ip_address"
        | "string";
      /** List of items contained within this value list. */
      list_items: {
        /** Details about each object. */
        data: components["schemas"]["radar.value_list_item"][];
        /** True if this list has another page of items after this one that can be fetched. */
        has_more: boolean;
        /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
        object: "list";
        /** The URL where this list can be accessed. */
        url: string;
      };
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: { [key: string]: string };
      /** The name of the value list. */
      name: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "radar.value_list";
    };
    /**
     * Value list items allow you to add specific values to a given Radar value list, which can then be used in rules.
     *
     * Related guide: [Managing List Items](https://stripe.com/docs/radar/lists#managing-list-items).
     */
    "radar.value_list_item": {
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** The name or email address of the user who added this item to the value list. */
      created_by: string;
      /** Unique identifier for the object. */
      id: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "radar.value_list_item";
      /** The value of the item. */
      value: string;
      /** The identifier of the value list this item belongs to. */
      value_list: string;
    };
    radar_review_resource_location: {
      /** The city where the payment originated. */
      city?: string | null;
      /** Two-letter ISO code representing the country where the payment originated. */
      country?: string | null;
      /** The geographic latitude where the payment originated. */
      latitude?: number | null;
      /** The geographic longitude where the payment originated. */
      longitude?: number | null;
      /** The state/county/province/region where the payment originated. */
      region?: string | null;
    };
    radar_review_resource_session: {
      /** The browser used in this browser session (e.g., `Chrome`). */
      browser?: string | null;
      /** Information about the device used for the browser session (e.g., `Samsung SM-G930T`). */
      device?: string | null;
      /** The platform for the browser session (e.g., `Macintosh`). */
      platform?: string | null;
      /** The version for the browser session (e.g., `61.0.3163.100`). */
      version?: string | null;
    };
    /**
     * With `Recipient` objects, you can transfer money from your Stripe account to a
     * third-party bank account or debit card. The API allows you to create, delete,
     * and update your recipients. You can retrieve individual recipients as well as
     * a list of all your recipients.
     *
     * **`Recipient` objects have been deprecated in favor of
     * [Connect](https://stripe.com/docs/connect), specifically Connect's much more powerful
     * [Account objects](https://stripe.com/docs/api#account). Stripe accounts that don't already use
     * recipients can no longer begin doing so. Please use `Account` objects
     * instead. If you are already using recipients, please see our
     * [migration guide](https://stripe.com/docs/connect/recipient-account-migrations) for more information.**
     */
    recipient: {
      /** Hash describing the current account on the recipient, if there is one. */
      active_account?: Partial<components["schemas"]["bank_account"]> | null;
      cards?: {
        data: components["schemas"]["card"][];
        /** True if this list has another page of items after this one that can be fetched. */
        has_more: boolean;
        /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
        object: "list";
        /** The URL where this list can be accessed. */
        url: string;
      } | null;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** The default card to use for creating transfers to this recipient. */
      default_card?: (Partial<string> & Partial<components["schemas"]["card"]>) | null;
      /** An arbitrary string attached to the object. Often useful for displaying to users. */
      description?: string | null;
      email?: string | null;
      /** Unique identifier for the object. */
      id: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: { [key: string]: string };
      /** The ID of the [Custom account](https://stripe.com/docs/connect/custom-accounts) this recipient was migrated to. If set, the recipient can no longer be updated, nor can transfers be made to it: use the Custom account instead. */
      migrated_to?: (Partial<string> & Partial<components["schemas"]["account"]>) | null;
      /** Full, legal name of the recipient. */
      name?: string | null;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "recipient";
      rolled_back_from?: Partial<string> & Partial<components["schemas"]["account"]>;
      /** Type of the recipient, one of `individual` or `corporation`. */
      type: string;
    };
    /**
     * `Refund` objects allow you to refund a charge that has previously been created
     * but not yet refunded. Funds will be refunded to the credit or debit card that
     * was originally charged.
     *
     * Related guide: [Refunds](https://stripe.com/docs/refunds).
     */
    refund: {
      /** Amount, in %s. */
      amount: number;
      /** Balance transaction that describes the impact on your account balance. */
      balance_transaction?: (Partial<string> & Partial<components["schemas"]["balance_transaction"]>) | null;
      /** ID of the charge that was refunded. */
      charge?: (Partial<string> & Partial<components["schemas"]["charge"]>) | null;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only) */
      description?: string;
      /** If the refund failed, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction. */
      failure_balance_transaction?: Partial<string> & Partial<components["schemas"]["balance_transaction"]>;
      /** If the refund failed, the reason for refund failure if known. Possible values are `lost_or_stolen_card`, `expired_or_canceled_card`, or `unknown`. */
      failure_reason?: string;
      /** Unique identifier for the object. */
      id: string;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: { [key: string]: string };
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "refund";
      /** ID of the PaymentIntent that was refunded. */
      payment_intent?: (Partial<string> & Partial<components["schemas"]["payment_intent"]>) | null;
      /** Reason for the refund, either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`). */
      reason?: string | null;
      /** This is the transaction number that appears on email receipts sent for this refund. */
      receipt_number?: string | null;
      /** The transfer reversal that is associated with the refund. Only present if the charge came from another Stripe account. See the Connect documentation for details. */
      source_transfer_reversal?: (Partial<string> & Partial<components["schemas"]["transfer_reversal"]>) | null;
      /** Status of the refund. For credit card refunds, this can be `pending`, `succeeded`, or `failed`. For other types of refunds, it can be `pending`, `succeeded`, `failed`, or `canceled`. Refer to our [refunds](https://stripe.com/docs/refunds#failed-refunds) documentation for more details. */
      status?: string | null;
      /** If the accompanying transfer was reversed, the transfer reversal object. Only applicable if the charge was created using the destination parameter. */
      transfer_reversal?: (Partial<string> & Partial<components["schemas"]["transfer_reversal"]>) | null;
    };
    /**
     * The Report Run object represents an instance of a report type generated with
     * specific run parameters. Once the object is created, Stripe begins processing the report.
     * When the report has finished running, it will give you a reference to a file
     * where you can retrieve your results. For an overview, see
     * [API Access to Reports](https://stripe.com/docs/reporting/statements/api).
     *
     * Note that reports can only be run based on your live-mode data (not test-mode
     * data), and thus related requests must be made with a
     * [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
     */
    "reporting.report_run": {
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /**
       * If something should go wrong during the run, a message about the failure (populated when
       *  `status=failed`).
       */
      error?: string | null;
      /** Unique identifier for the object. */
      id: string;
      /** Always `true`: reports can only be run on live-mode data. */
      livemode: boolean;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "reporting.report_run";
      parameters: components["schemas"]["financial_reporting_finance_report_run_run_parameters"];
      /** The ID of the [report type](https://stripe.com/docs/reporting/statements/api#report-types) to run, such as `"balance.summary.1"`. */
      report_type: string;
      /**
       * The file object representing the result of the report run (populated when
       *  `status=succeeded`).
       */
      result?: Partial<components["schemas"]["file"]> | null;
      /**
       * Status of this report run. This will be `pending` when the run is initially created.
       *  When the run finishes, this will be set to `succeeded` and the `result` field will be populated.
       *  Rarely, we may encounter an error, at which point this will be set to `failed` and the `error` field will be populated.
       */
      status: string;
      /**
       * Timestamp at which this run successfully finished (populated when
       *  `status=succeeded`). Measured in seconds since the Unix epoch.
       */
      succeeded_at?: number | null;
    };
    /**
     * The Report Type resource corresponds to a particular type of report, such as
     * the "Activity summary" or "Itemized payouts" reports. These objects are
     * identified by an ID belonging to a set of enumerated values. See
     * [API Access to Reports documentation](https://stripe.com/docs/reporting/statements/api)
     * for those Report Type IDs, along with required and optional parameters.
     *
     * Note that reports can only be run based on your live-mode data (not test-mode
     * data), and thus related requests must be made with a
     * [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
     */
    "reporting.report_type": {
      /** Most recent time for which this Report Type is available. Measured in seconds since the Unix epoch. */
      data_available_end: number;
      /** Earliest time for which this Report Type is available. Measured in seconds since the Unix epoch. */
      data_available_start: number;
      /** List of column names that are included by default when this Report Type gets run. (If the Report Type doesn't support the `columns` parameter, this will be null.) */
      default_columns?: string[] | null;
      /** The [ID of the Report Type](https://stripe.com/docs/reporting/statements/api#available-report-types), such as `balance.summary.1`. */
      id: string;
      /** Human-readable name of the Report Type */
      name: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "reporting.report_type";
      /** When this Report Type was latest updated. Measured in seconds since the Unix epoch. */
      updated: number;
      /** Version of the Report Type. Different versions report with the same ID will have the same purpose, but may take different run parameters or have different result schemas. */
      version: number;
    };
    reserve_transaction: {
      amount: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** An arbitrary string attached to the object. Often useful for displaying to users. */
      description?: string | null;
      /** Unique identifier for the object. */
      id: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "reserve_transaction";
    };
    /**
     * Reviews can be used to supplement automated fraud detection with human expertise.
     *
     * Learn more about [Radar](/radar) and reviewing payments
     * [here](https://stripe.com/docs/radar/reviews).
     */
    review: {
      /** The ZIP or postal code of the card used, if applicable. */
      billing_zip?: string | null;
      /** The charge associated with this review. */
      charge?: (Partial<string> & Partial<components["schemas"]["charge"]>) | null;
      /** The reason the review was closed, or null if it has not yet been closed. One of `approved`, `refunded`, `refunded_as_fraud`, or `disputed`. */
      closed_reason?: ("approved" | "disputed" | "refunded" | "refunded_as_fraud") | null;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Unique identifier for the object. */
      id: string;
      /** The IP address where the payment originated. */
      ip_address?: string | null;
      /** Information related to the location of the payment. Note that this information is an approximation and attempts to locate the nearest population center - it should not be used to determine a specific address. */
      ip_address_location?: Partial<components["schemas"]["radar_review_resource_location"]> | null;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "review";
      /** If `true`, the review needs action. */
      open: boolean;
      /** The reason the review was opened. One of `rule` or `manual`. */
      opened_reason: "manual" | "rule";
      /** The PaymentIntent ID associated with this review, if one exists. */
      payment_intent?: Partial<string> & Partial<components["schemas"]["payment_intent"]>;
      /** The reason the review is currently open or closed. One of `rule`, `manual`, `approved`, `refunded`, `refunded_as_fraud`, or `disputed`. */
      reason: string;
      /** Information related to the browsing session of the user who initiated the payment. */
      session?: Partial<components["schemas"]["radar_review_resource_session"]> | null;
    };
    rule: {
      /** The action taken on the payment. */
      action: string;
      /** Unique identifier for the object. */
      id: string;
      /** The predicate to evaluate the payment against. */
      predicate: string;
    };
    /**
     * If you have [scheduled a Sigma query](https://stripe.com/docs/sigma/scheduled-queries), you'll
     * receive a `sigma.scheduled_query_run.created` webhook each time the query
     * runs. The webhook contains a `ScheduledQueryRun` object, which you can use to
     * retrieve the query results.
     */
    scheduled_query_run: {
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** When the query was run, Sigma contained a snapshot of your Stripe data at this time. */
      data_load_time: number;
      error?: components["schemas"]["sigma_scheduled_query_run_error"];
      /** The file object representing the results of the query. */
      file?: Partial<components["schemas"]["file"]> | null;
      /** Unique identifier for the object. */
      id: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "scheduled_query_run";
      /** Time at which the result expires and is no longer available for download. */
      result_available_until: number;
      /** SQL for the query. */
      sql: string;
      /** The query's execution status, which will be `completed` for successful runs, and `canceled`, `failed`, or `timed_out` otherwise. */
      status: string;
      /** Title of the query. */
      title: string;
    };
    /**
     * A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.
     * For example, you could use a SetupIntent to set up and save your customer's card without immediately collecting a payment.
     * Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.
     *
     * Create a SetupIntent as soon as you're ready to collect your customer's payment credentials.
     * Do not maintain long-lived, unconfirmed SetupIntents as they may no longer be valid.
     * The SetupIntent then transitions through multiple [statuses](https://stripe.com/docs/payments/intents#intent-statuses) as it guides
     * you through the setup process.
     *
     * Successful SetupIntents result in payment credentials that are optimized for future payments.
     * For example, cardholders in [certain regions](/guides/strong-customer-authentication) may need to be run through
     * [Strong Customer Authentication](https://stripe.com/docs/strong-customer-authentication) at the time of payment method collection
     * in order to streamline later [off-session payments](https://stripe.com/docs/payments/setup-intents).
     * If the SetupIntent is used with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer), upon success,
     * it will automatically attach the resulting payment method to that Customer.
     * We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
     * PaymentIntents to save payment methods in order to prevent saving invalid or unoptimized payment methods.
     *
     * By using SetupIntents, you ensure that your customers experience the minimum set of required friction,
     * even as regulations change over time.
     *
     * Related guide: [Setup Intents API](https://stripe.com/docs/payments/setup-intents).
     */
    setup_intent: {
      /** ID of the Connect application that created the SetupIntent. */
      application?: (Partial<string> & Partial<components["schemas"]["application"]>) | null;
      /** Reason for cancellation of this SetupIntent, one of `abandoned`, `requested_by_customer`, or `duplicate`. */
      cancellation_reason?: ("abandoned" | "duplicate" | "requested_by_customer") | null;
      /**
       * The client secret of this SetupIntent. Used for client-side retrieval using a publishable key.
       *
       * The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, embedded in URLs, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
       */
      client_secret?: string | null;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /**
       * ID of the Customer this SetupIntent belongs to, if one exists.
       *
       * If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
       */
      customer?:
        | (Partial<string> &
            Partial<components["schemas"]["customer"]> &
            Partial<components["schemas"]["deleted_customer"]>)
        | null;
      /** An arbitrary string attached to the object. Often useful for displaying to users. */
      description?: string | null;
      /** Unique identifier for the object. */
      id: string;
      /** The error encountered in the previous SetupIntent confirmation. */
      last_setup_error?: Partial<components["schemas"]["api_errors"]> | null;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** ID of the multi use Mandate generated by the SetupIntent. */
      mandate?: (Partial<string> & Partial<components["schemas"]["mandate"]>) | null;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata?: { [key: string]: string };
      /** If present, this property tells you what actions you need to take in order for your customer to continue payment setup. */
      next_action?: Partial<components["schemas"]["setup_intent_next_action"]> | null;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "setup_intent";
      /** The account (if any) for which the setup is intended. */
      on_behalf_of?: (Partial<string> & Partial<components["schemas"]["account"]>) | null;
      /** ID of the payment method used with this SetupIntent. */
      payment_method?: (Partial<string> & Partial<components["schemas"]["payment_method"]>) | null;
      /** Payment-method-specific configuration for this SetupIntent. */
      payment_method_options?: Partial<components["schemas"]["setup_intent_payment_method_options"]> | null;
      /** The list of payment method types (e.g. card) that this SetupIntent is allowed to set up. */
      payment_method_types: string[];
      /** ID of the single_use Mandate generated by the SetupIntent. */
      single_use_mandate?: (Partial<string> & Partial<components["schemas"]["mandate"]>) | null;
      /** [Status](https://stripe.com/docs/payments/intents#intent-statuses) of this SetupIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `canceled`, or `succeeded`. */
      status:
        | "canceled"
        | "processing"
        | "requires_action"
        | "requires_confirmation"
        | "requires_payment_method"
        | "succeeded";
      /**
       * Indicates how the payment method is intended to be used in the future.
       *
       * Use `on_session` if you intend to only reuse the payment method when the customer is in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow. If not provided, this value defaults to `off_session`.
       */
      usage: string;
    };
    setup_intent_next_action: {
      redirect_to_url?: components["schemas"]["setup_intent_next_action_redirect_to_url"];
      /** Type of the next action to perform, one of `redirect_to_url` or `use_stripe_sdk`. */
      type: string;
      /** When confirming a SetupIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js. */
      use_stripe_sdk?: { [key: string]: any };
    };
    setup_intent_next_action_redirect_to_url: {
      /** If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion. */
      return_url?: string | null;
      /** The URL you must redirect your customer to in order to authenticate. */
      url?: string | null;
    };
    setup_intent_payment_method_options: {
      card?: components["schemas"]["setup_intent_payment_method_options_card"];
    };
    setup_intent_payment_method_options_card: {
      /** We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine. */
      request_three_d_secure?: ("any" | "automatic" | "challenge_only") | null;
    };
    shipping: {
      address?: components["schemas"]["address"];
      /** The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. */
      carrier?: string | null;
      /** Recipient name. */
      name?: string | null;
      /** Recipient phone (including extension). */
      phone?: string | null;
      /** The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. */
      tracking_number?: string | null;
    };
    shipping_method: {
      /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the line item. */
      amount: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** The estimated delivery date for the given shipping method. Can be either a specific date or a range. */
      delivery_estimate?: Partial<components["schemas"]["delivery_estimate"]> | null;
      /** An arbitrary string attached to the object. Often useful for displaying to users. */
      description: string;
      /** Unique identifier for the object. */
      id: string;
    };
    sigma_scheduled_query_run_error: {
      /** Information about the run failure. */
      message: string;
    };
    /**
     * Stores representations of [stock keeping units](http://en.wikipedia.org/wiki/Stock_keeping_unit).
     * SKUs describe specific product variations, taking into account any combination of: attributes,
     * currency, and cost. For example, a product may be a T-shirt, whereas a specific SKU represents
     * the `size: large`, `color: red` version of that shirt.
     *
     * Can also be used to manage inventory.
     *
     * Related guide: [Tax, Shipping, and Inventory](https://stripe.com/docs/orders).
     */
    sku: {
      /** Whether the SKU is available for purchase. */
      active: boolean;
      /** A dictionary of attributes and values for the attributes defined by the product. If, for example, a product's attributes are `["size", "gender"]`, a valid SKU has the following dictionary of attributes: `{"size": "Medium", "gender": "Unisex"}`. */
      attributes: { [key: string]: string };
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** Unique identifier for the object. */
      id: string;
      /** The URL of an image for this SKU, meant to be displayable to the customer. */
      image?: string | null;
      inventory: components["schemas"]["inventory"];
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: { [key: string]: string };
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "sku";
      /** The dimensions of this SKU for shipping purposes. */
      package_dimensions?: Partial<components["schemas"]["package_dimensions"]> | null;
      /** The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency). */
      price: number;
      /** The ID of the product this SKU is associated with. The product must be currently active. */
      product: Partial<string> & Partial<components["schemas"]["product"]>;
      /** Time at which the object was last updated. Measured in seconds since the Unix epoch. */
      updated: number;
    };
    /**
     * `Source` objects allow you to accept a variety of payment methods. They
     * represent a customer's payment instrument, and can be used with the Stripe API
     * just like a `Card` object: once chargeable, they can be charged, or can be
     * attached to customers.
     *
     * Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
     */
    source: {
      ach_credit_transfer?: components["schemas"]["source_type_ach_credit_transfer"];
      ach_debit?: components["schemas"]["source_type_ach_debit"];
      alipay?: components["schemas"]["source_type_alipay"];
      /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources. */
      amount?: number | null;
      au_becs_debit?: components["schemas"]["source_type_au_becs_debit"];
      bancontact?: components["schemas"]["source_type_bancontact"];
      card?: components["schemas"]["source_type_card"];
      card_present?: components["schemas"]["source_type_card_present"];
      /** The client secret of the source. Used for client-side retrieval using a publishable key. */
      client_secret: string;
      code_verification?: components["schemas"]["source_code_verification_flow"];
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources. */
      currency?: string | null;
      /** The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer. */
      customer?: string;
      eps?: components["schemas"]["source_type_eps"];
      /** The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. */
      flow: string;
      giropay?: components["schemas"]["source_type_giropay"];
      /** Unique identifier for the object. */
      id: string;
      ideal?: components["schemas"]["source_type_ideal"];
      klarna?: components["schemas"]["source_type_klarna"];
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata?: { [key: string]: string } | null;
      multibanco?: components["schemas"]["source_type_multibanco"];
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "source";
      /** Information about the owner of the payment instrument that may be used or required by particular source types. */
      owner?: Partial<components["schemas"]["source_owner"]> | null;
      p24?: components["schemas"]["source_type_p24"];
      receiver?: components["schemas"]["source_receiver_flow"];
      redirect?: components["schemas"]["source_redirect_flow"];
      sepa_debit?: components["schemas"]["source_type_sepa_debit"];
      sofort?: components["schemas"]["source_type_sofort"];
      source_order?: components["schemas"]["source_order"];
      /** Extra information about a source. This will appear on your customer's statement every time you charge the source. */
      statement_descriptor?: string | null;
      /** The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge. */
      status: string;
      three_d_secure?: components["schemas"]["source_type_three_d_secure"];
      /** The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used. */
      type:
        | "ach_credit_transfer"
        | "ach_debit"
        | "alipay"
        | "au_becs_debit"
        | "bancontact"
        | "card"
        | "card_present"
        | "eps"
        | "giropay"
        | "ideal"
        | "klarna"
        | "multibanco"
        | "p24"
        | "sepa_debit"
        | "sofort"
        | "three_d_secure"
        | "wechat";
      /** Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned. */
      usage?: string | null;
      wechat?: components["schemas"]["source_type_wechat"];
    };
    source_code_verification_flow: {
      /** The number of attempts remaining to authenticate the source object with a verification code. */
      attempts_remaining: number;
      /** The status of the code verification, either `pending` (awaiting verification, `attempts_remaining` should be greater than 0), `succeeded` (successful verification) or `failed` (failed verification, cannot be verified anymore as `attempts_remaining` should be 0). */
      status: string;
    };
    /**
     * Source mandate notifications should be created when a notification related to
     * a source mandate must be sent to the payer. They will trigger a webhook or
     * deliver an email to the customer.
     */
    source_mandate_notification: {
      /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount associated with the mandate notification. The amount is expressed in the currency of the underlying source. Required if the notification type is `debit_initiated`. */
      amount?: number | null;
      bacs_debit?: components["schemas"]["source_mandate_notification_bacs_debit_data"];
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Unique identifier for the object. */
      id: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "source_mandate_notification";
      /** The reason of the mandate notification. Valid reasons are `mandate_confirmed` or `debit_initiated`. */
      reason: string;
      sepa_debit?: components["schemas"]["source_mandate_notification_sepa_debit_data"];
      source: components["schemas"]["source"];
      /** The status of the mandate notification. Valid statuses are `pending` or `submitted`. */
      status: string;
      /** The type of source this mandate notification is attached to. Should be the source type identifier code for the payment method, such as `three_d_secure`. */
      type: string;
    };
    source_mandate_notification_bacs_debit_data: {
      /** Last 4 digits of the account number associated with the debit. */
      last4?: string;
    };
    source_mandate_notification_sepa_debit_data: {
      /** SEPA creditor ID. */
      creditor_identifier?: string;
      /** Last 4 digits of the account number associated with the debit. */
      last4?: string;
      /** Mandate reference associated with the debit. */
      mandate_reference?: string;
    };
    source_order: {
      /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order. */
      amount: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** The email address of the customer placing the order. */
      email?: string;
      /** List of items constituting the order. */
      items?: components["schemas"]["source_order_item"][] | null;
      shipping?: components["schemas"]["shipping"];
    };
    source_order_item: {
      /** The amount (price) for this order item. */
      amount?: number | null;
      /** This currency of this order item. Required when `amount` is present. */
      currency?: string | null;
      /** Human-readable description for this order item. */
      description?: string | null;
      /** The quantity of this order item. When type is `sku`, this is the number of instances of the SKU to be ordered. */
      quantity?: number;
      /** The type of this order item. Must be `sku`, `tax`, or `shipping`. */
      type?: string | null;
    };
    source_owner: {
      /** Owner's address. */
      address?: Partial<components["schemas"]["address"]> | null;
      /** Owner's email address. */
      email?: string | null;
      /** Owner's full name. */
      name?: string | null;
      /** Owner's phone number (including extension). */
      phone?: string | null;
      /** Verified owner's address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      verified_address?: Partial<components["schemas"]["address"]> | null;
      /** Verified owner's email address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      verified_email?: string | null;
      /** Verified owner's full name. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      verified_name?: string | null;
      /** Verified owner's phone number (including extension). Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      verified_phone?: string | null;
    };
    source_receiver_flow: {
      /** The address of the receiver source. This is the value that should be communicated to the customer to send their funds to. */
      address?: string | null;
      /** The total amount that was moved to your balance. This is almost always equal to the amount charged. In rare cases when customers deposit excess funds and we are unable to refund those, those funds get moved to your balance and show up in amount_charged as well. The amount charged is expressed in the source's currency. */
      amount_charged: number;
      /** The total amount received by the receiver source. `amount_received = amount_returned + amount_charged` should be true for consumed sources unless customers deposit excess funds. The amount received is expressed in the source's currency. */
      amount_received: number;
      /** The total amount that was returned to the customer. The amount returned is expressed in the source's currency. */
      amount_returned: number;
      /** Type of refund attribute method, one of `email`, `manual`, or `none`. */
      refund_attributes_method: string;
      /** Type of refund attribute status, one of `missing`, `requested`, or `available`. */
      refund_attributes_status: string;
    };
    source_redirect_flow: {
      /** The failure reason for the redirect, either `user_abort` (the customer aborted or dropped out of the redirect flow), `declined` (the authentication failed or the transaction was declined), or `processing_error` (the redirect failed due to a technical error). Present only if the redirect status is `failed`. */
      failure_reason?: string | null;
      /** The URL you provide to redirect the customer to after they authenticated their payment. */
      return_url: string;
      /** The status of the redirect, either `pending` (ready to be used by your customer to authenticate the transaction), `succeeded` (succesful authentication, cannot be reused) or `not_required` (redirect should not be used) or `failed` (failed authentication, cannot be reused). */
      status: string;
      /** The URL provided to you to redirect a customer to as part of a `redirect` authentication flow. */
      url: string;
    };
    /**
     * Some payment methods have no required amount that a customer must send.
     * Customers can be instructed to send any amount, and it can be made up of
     * multiple transactions. As such, sources can have multiple associated
     * transactions.
     */
    source_transaction: {
      ach_credit_transfer?: components["schemas"]["source_transaction_ach_credit_transfer_data"];
      /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount your customer has pushed to the receiver. */
      amount: number;
      chf_credit_transfer?: components["schemas"]["source_transaction_chf_credit_transfer_data"];
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      gbp_credit_transfer?: components["schemas"]["source_transaction_gbp_credit_transfer_data"];
      /** Unique identifier for the object. */
      id: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "source_transaction";
      paper_check?: components["schemas"]["source_transaction_paper_check_data"];
      sepa_credit_transfer?: components["schemas"]["source_transaction_sepa_credit_transfer_data"];
      /** The ID of the source this transaction is attached to. */
      source: string;
      /** The status of the transaction, one of `succeeded`, `pending`, or `failed`. */
      status: string;
      /** The type of source this transaction is attached to. */
      type:
        | "ach_credit_transfer"
        | "ach_debit"
        | "alipay"
        | "bancontact"
        | "card"
        | "card_present"
        | "eps"
        | "giropay"
        | "ideal"
        | "klarna"
        | "multibanco"
        | "p24"
        | "sepa_debit"
        | "sofort"
        | "three_d_secure"
        | "wechat";
    };
    source_transaction_ach_credit_transfer_data: {
      /** Customer data associated with the transfer. */
      customer_data?: string;
      /** Bank account fingerprint associated with the transfer. */
      fingerprint?: string;
      /** Last 4 digits of the account number associated with the transfer. */
      last4?: string;
      /** Routing number associated with the transfer. */
      routing_number?: string;
    };
    source_transaction_chf_credit_transfer_data: {
      /** Reference associated with the transfer. */
      reference?: string;
      /** Sender's country address. */
      sender_address_country?: string;
      /** Sender's line 1 address. */
      sender_address_line1?: string;
      /** Sender's bank account IBAN. */
      sender_iban?: string;
      /** Sender's name. */
      sender_name?: string;
    };
    source_transaction_gbp_credit_transfer_data: {
      /** Bank account fingerprint associated with the Stripe owned bank account receiving the transfer. */
      fingerprint?: string;
      /** The credit transfer rails the sender used to push this transfer. The possible rails are: Faster Payments, BACS, CHAPS, and wire transfers. Currently only Faster Payments is supported. */
      funding_method?: string;
      /** Last 4 digits of sender account number associated with the transfer. */
      last4?: string;
      /** Sender entered arbitrary information about the transfer. */
      reference?: string;
      /** Sender account number associated with the transfer. */
      sender_account_number?: string;
      /** Sender name associated with the transfer. */
      sender_name?: string;
      /** Sender sort code associated with the transfer. */
      sender_sort_code?: string;
    };
    source_transaction_paper_check_data: {
      /** Time at which the deposited funds will be available for use. Measured in seconds since the Unix epoch. */
      available_at?: string;
      /** Comma-separated list of invoice IDs associated with the paper check. */
      invoices?: string;
    };
    source_transaction_sepa_credit_transfer_data: {
      /** Reference associated with the transfer. */
      reference?: string;
      /** Sender's bank account IBAN. */
      sender_iban?: string;
      /** Sender's name. */
      sender_name?: string;
    };
    source_type_ach_credit_transfer: {
      account_number?: string | null;
      bank_name?: string | null;
      fingerprint?: string | null;
      refund_account_holder_name?: string | null;
      refund_account_holder_type?: string | null;
      refund_routing_number?: string | null;
      routing_number?: string | null;
      swift_code?: string | null;
    };
    source_type_ach_debit: {
      bank_name?: string | null;
      country?: string | null;
      fingerprint?: string | null;
      last4?: string | null;
      routing_number?: string | null;
      type?: string | null;
    };
    source_type_alipay: {
      data_string?: string | null;
      native_url?: string | null;
      statement_descriptor?: string | null;
    };
    source_type_au_becs_debit: {
      bsb_number?: string | null;
      fingerprint?: string | null;
      last4?: string | null;
    };
    source_type_bancontact: {
      bank_code?: string | null;
      bank_name?: string | null;
      bic?: string | null;
      iban_last4?: string | null;
      preferred_language?: string | null;
      statement_descriptor?: string | null;
    };
    source_type_card: {
      address_line1_check?: string | null;
      address_zip_check?: string | null;
      brand?: string | null;
      country?: string | null;
      cvc_check?: string | null;
      dynamic_last4?: string | null;
      exp_month?: number | null;
      exp_year?: number | null;
      fingerprint?: string;
      funding?: string | null;
      last4?: string | null;
      name?: string | null;
      three_d_secure?: string;
      tokenization_method?: string | null;
    };
    source_type_card_present: {
      application_cryptogram?: string;
      application_preferred_name?: string;
      authorization_code?: string | null;
      authorization_response_code?: string;
      brand?: string | null;
      country?: string | null;
      cvm_type?: string;
      data_type?: string | null;
      dedicated_file_name?: string;
      emv_auth_data?: string;
      evidence_customer_signature?: string | null;
      evidence_transaction_certificate?: string | null;
      exp_month?: number | null;
      exp_year?: number | null;
      fingerprint?: string;
      funding?: string | null;
      last4?: string | null;
      pos_device_id?: string | null;
      pos_entry_mode?: string;
      read_method?: string | null;
      reader?: string | null;
      terminal_verification_results?: string;
      transaction_status_information?: string;
    };
    source_type_eps: {
      reference?: string | null;
      statement_descriptor?: string | null;
    };
    source_type_giropay: {
      bank_code?: string | null;
      bank_name?: string | null;
      bic?: string | null;
      statement_descriptor?: string | null;
    };
    source_type_ideal: {
      bank?: string | null;
      bic?: string | null;
      iban_last4?: string | null;
      statement_descriptor?: string | null;
    };
    source_type_klarna: {
      background_image_url?: string;
      client_token?: string | null;
      first_name?: string;
      last_name?: string;
      locale?: string;
      logo_url?: string;
      page_title?: string;
      pay_later_asset_urls_descriptive?: string;
      pay_later_asset_urls_standard?: string;
      pay_later_name?: string;
      pay_later_redirect_url?: string;
      pay_now_asset_urls_descriptive?: string;
      pay_now_asset_urls_standard?: string;
      pay_now_name?: string;
      pay_now_redirect_url?: string;
      pay_over_time_asset_urls_descriptive?: string;
      pay_over_time_asset_urls_standard?: string;
      pay_over_time_name?: string;
      pay_over_time_redirect_url?: string;
      payment_method_categories?: string;
      purchase_country?: string;
      purchase_type?: string;
      redirect_url?: string;
      shipping_first_name?: string;
      shipping_last_name?: string;
    };
    source_type_multibanco: {
      entity?: string | null;
      reference?: string | null;
      refund_account_holder_address_city?: string | null;
      refund_account_holder_address_country?: string | null;
      refund_account_holder_address_line1?: string | null;
      refund_account_holder_address_line2?: string | null;
      refund_account_holder_address_postal_code?: string | null;
      refund_account_holder_address_state?: string | null;
      refund_account_holder_name?: string | null;
      refund_iban?: string | null;
    };
    source_type_p24: {
      reference?: string | null;
    };
    source_type_sepa_debit: {
      bank_code?: string | null;
      branch_code?: string | null;
      country?: string | null;
      fingerprint?: string | null;
      last4?: string | null;
      mandate_reference?: string | null;
      mandate_url?: string | null;
    };
    source_type_sofort: {
      bank_code?: string | null;
      bank_name?: string | null;
      bic?: string | null;
      country?: string | null;
      iban_last4?: string | null;
      preferred_language?: string | null;
      statement_descriptor?: string | null;
    };
    source_type_three_d_secure: {
      address_line1_check?: string | null;
      address_zip_check?: string | null;
      authenticated?: boolean | null;
      brand?: string | null;
      card?: string | null;
      country?: string | null;
      customer?: string | null;
      cvc_check?: string | null;
      dynamic_last4?: string | null;
      exp_month?: number | null;
      exp_year?: number | null;
      fingerprint?: string;
      funding?: string | null;
      last4?: string | null;
      name?: string | null;
      three_d_secure?: string;
      tokenization_method?: string | null;
    };
    source_type_wechat: {
      prepay_id?: string;
      qr_code_url?: string | null;
      statement_descriptor?: string;
    };
    status_transitions: {
      /** The time that the order was canceled. */
      canceled?: number | null;
      /** The time that the order was fulfilled. */
      fulfiled?: number | null;
      /** The time that the order was paid. */
      paid?: number | null;
      /** The time that the order was returned. */
      returned?: number | null;
    };
    /**
     * Subscriptions allow you to charge a customer on a recurring basis.
     *
     * Related guide: [Creating Subscriptions](https://stripe.com/docs/billing/subscriptions/creating).
     */
    subscription: {
      /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. */
      application_fee_percent?: number | null;
      /** Determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. */
      billing_cycle_anchor: number;
      /** Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period */
      billing_thresholds?: Partial<components["schemas"]["subscription_billing_thresholds"]> | null;
      /** A date in the future at which the subscription will automatically get canceled */
      cancel_at?: number | null;
      /** If the subscription has been canceled with the `at_period_end` flag set to `true`, `cancel_at_period_end` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period. */
      cancel_at_period_end: boolean;
      /** If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will still reflect the date of the initial cancellation request, not the end of the subscription period when the subscription is automatically moved to a canceled state. */
      canceled_at?: number | null;
      /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. */
      collection_method?: ("charge_automatically" | "send_invoice") | null;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created. */
      current_period_end: number;
      /** Start of the current period that the subscription has been invoiced for. */
      current_period_start: number;
      /** ID of the customer who owns the subscription. */
      customer: Partial<string> &
        Partial<components["schemas"]["customer"]> &
        Partial<components["schemas"]["deleted_customer"]>;
      /** Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`. */
      days_until_due?: number | null;
      /** ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. If not set, invoices will use the default payment method in the customer's invoice settings. */
      default_payment_method?: (Partial<string> & Partial<components["schemas"]["payment_method"]>) | null;
      /** ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If not set, defaults to the customer's default source. */
      default_source?:
        | (Partial<string> &
            Partial<components["schemas"]["alipay_account"]> &
            Partial<components["schemas"]["bank_account"]> &
            Partial<components["schemas"]["bitcoin_receiver"]> &
            Partial<components["schemas"]["card"]> &
            Partial<components["schemas"]["source"]>)
        | null;
      /** The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. */
      default_tax_rates?: components["schemas"]["tax_rate"][] | null;
      /** Describes the current discount applied to this subscription, if there is one. When billing, a discount applied to a subscription overrides a discount applied on a customer-wide basis. */
      discount?: Partial<components["schemas"]["discount"]> | null;
      /** If the subscription has ended, the date the subscription ended. */
      ended_at?: number | null;
      /** Unique identifier for the object. */
      id: string;
      /** List of subscription items, each with an attached plan. */
      items: {
        /** Details about each object. */
        data: components["schemas"]["subscription_item"][];
        /** True if this list has another page of items after this one that can be fetched. */
        has_more: boolean;
        /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
        object: "list";
        /** The URL where this list can be accessed. */
        url: string;
      };
      /** The most recent invoice this subscription has generated. */
      latest_invoice?: (Partial<string> & Partial<components["schemas"]["invoice"]>) | null;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: { [key: string]: string };
      /** Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at `pending_invoice_item_interval`. */
      next_pending_invoice_item_invoice?: number | null;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "subscription";
      /** If specified, payment collection for this subscription will be paused. */
      pause_collection?: Partial<components["schemas"]["subscriptions_resource_pause_collection"]> | null;
      /** Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval. */
      pending_invoice_item_interval?: Partial<
        components["schemas"]["subscription_pending_invoice_item_interval"]
      > | null;
      /** You can use this [SetupIntent](https://stripe.com/docs/api/setup_intents) to collect user authentication when creating a subscription without immediate payment or updating a subscription's payment method, allowing you to optimize for off-session payments. Learn more in the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication#scenario-2). */
      pending_setup_intent?: (Partial<string> & Partial<components["schemas"]["setup_intent"]>) | null;
      /** If specified, [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates) that will be applied to the subscription once the `latest_invoice` has been paid. */
      pending_update?: Partial<components["schemas"]["subscriptions_resource_pending_update"]> | null;
      /** Hash describing the plan the customer is subscribed to. Only set if the subscription contains a single plan. */
      plan?: Partial<components["schemas"]["plan"]> | null;
      /** The quantity of the plan to which the customer is subscribed. For example, if your plan is $10/user/month, and your customer has 5 users, you could pass 5 as the quantity to have the customer charged $50 (5 x $10) monthly. Only set if the subscription contains a single plan. */
      quantity?: number | null;
      /** The schedule attached to the subscription */
      schedule?: (Partial<string> & Partial<components["schemas"]["subscription_schedule"]>) | null;
      /** Date when the subscription was first created. The date might differ from the `created` date due to backdating. */
      start_date: number;
      /**
       * Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, or `unpaid`.
       *
       * For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this state can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` state. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal state, the open invoice will be voided and no further invoices will be generated.
       *
       * A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.
       *
       * If subscription `collection_method=charge_automatically` it becomes `past_due` when payment to renew it fails and `canceled` or `unpaid` (depending on your subscriptions settings) when Stripe has exhausted all payment retry attempts.
       *
       * If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
       */
      status: "active" | "canceled" | "incomplete" | "incomplete_expired" | "past_due" | "trialing" | "unpaid";
      /** If provided, each invoice created by this subscription will apply the tax rate, increasing the amount billed to the customer. */
      tax_percent?: number | null;
      /** If the subscription has a trial, the end of that trial. */
      trial_end?: number | null;
      /** If the subscription has a trial, the beginning of that trial. */
      trial_start?: number | null;
    };
    subscription_billing_thresholds: {
      /** Monetary threshold that triggers the subscription to create an invoice */
      amount_gte?: number | null;
      /** Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be `true` if the subscription contains items with plans that have `aggregate_usage=last_ever`. */
      reset_billing_cycle_anchor?: boolean | null;
    };
    /**
     * Subscription items allow you to create customer subscriptions with more than
     * one plan, making it easy to represent complex billing relationships.
     */
    subscription_item: {
      /** Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period */
      billing_thresholds?: Partial<components["schemas"]["subscription_item_billing_thresholds"]> | null;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Unique identifier for the object. */
      id: string;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: { [key: string]: string };
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "subscription_item";
      plan: components["schemas"]["plan"];
      /** The [quantity](https://stripe.com/docs/subscriptions/quantities) of the plan to which the customer should be subscribed. */
      quantity?: number;
      /** The `subscription` this `subscription_item` belongs to. */
      subscription: string;
      /** The tax rates which apply to this `subscription_item`. When set, the `default_tax_rates` on the subscription do not apply to this `subscription_item`. */
      tax_rates?: components["schemas"]["tax_rate"][] | null;
    };
    subscription_item_billing_thresholds: {
      /** Usage threshold that triggers the subscription to create an invoice */
      usage_gte?: number | null;
    };
    subscription_pending_invoice_item_interval: {
      /** Specifies invoicing frequency. Either `day`, `week`, `month` or `year`. */
      interval: "day" | "month" | "week" | "year";
      /** The number of intervals between invoices. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). */
      interval_count: number;
    };
    /**
     * A subscription schedule allows you to create and manage the lifecycle of a subscription by predefining expected changes.
     *
     * Related guide: [Subscription Schedules](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
     */
    subscription_schedule: {
      /** Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch. */
      canceled_at?: number | null;
      /** Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch. */
      completed_at?: number | null;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Object representing the start and end dates for the current phase of the subscription schedule, if it is `active`. */
      current_phase?: Partial<components["schemas"]["subscription_schedule_current_phase"]> | null;
      /** ID of the customer who owns the subscription schedule. */
      customer: Partial<string> &
        Partial<components["schemas"]["customer"]> &
        Partial<components["schemas"]["deleted_customer"]>;
      default_settings: components["schemas"]["subscription_schedules_resource_default_settings"];
      /** Behavior of the subscription schedule and underlying subscription when it ends. */
      end_behavior: "cancel" | "none" | "release" | "renew";
      /** Unique identifier for the object. */
      id: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata?: { [key: string]: string } | null;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "subscription_schedule";
      /** Configuration for the subscription schedule's phases. */
      phases: components["schemas"]["subscription_schedule_phase_configuration"][];
      /** Time at which the subscription schedule was released. Measured in seconds since the Unix epoch. */
      released_at?: number | null;
      /** ID of the subscription once managed by the subscription schedule (if it is released). */
      released_subscription?: string | null;
      /** The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules). */
      status: "active" | "canceled" | "completed" | "not_started" | "released";
      /** ID of the subscription managed by the subscription schedule. */
      subscription?: (Partial<string> & Partial<components["schemas"]["subscription"]>) | null;
    };
    /** A phase item describes the plan and quantity of a phase. */
    subscription_schedule_configuration_item: {
      /** Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period */
      billing_thresholds?: Partial<components["schemas"]["subscription_item_billing_thresholds"]> | null;
      /** ID of the plan to which the customer should be subscribed. */
      plan: Partial<string> & Partial<components["schemas"]["plan"]> & Partial<components["schemas"]["deleted_plan"]>;
      /** Quantity of the plan to which the customer should be subscribed. */
      quantity?: number;
      /** The tax rates which apply to this `phase_item`. When set, the `default_tax_rates` on the phase do not apply to this `phase_item`. */
      tax_rates?: components["schemas"]["tax_rate"][] | null;
    };
    subscription_schedule_current_phase: {
      /** The end of this phase of the subscription schedule. */
      end_date: number;
      /** The start of this phase of the subscription schedule. */
      start_date: number;
    };
    /** A phase describes the plans, coupon, and trialing status of a subscription for a predefined time period. */
    subscription_schedule_phase_configuration: {
      /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account during this phase of the schedule. */
      application_fee_percent?: number | null;
      /** Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period */
      billing_thresholds?: Partial<components["schemas"]["subscription_billing_thresholds"]> | null;
      /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. */
      collection_method?: ("charge_automatically" | "send_invoice") | null;
      /** ID of the coupon to use during this phase of the subscription schedule. */
      coupon?:
        | (Partial<string> &
            Partial<components["schemas"]["coupon"]> &
            Partial<components["schemas"]["deleted_coupon"]>)
        | null;
      /** ID of the default payment method for the subscription schedule. It must belong to the customer associated with the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings. */
      default_payment_method?: (Partial<string> & Partial<components["schemas"]["payment_method"]>) | null;
      /** The default tax rates to apply to the subscription during this phase of the subscription schedule. */
      default_tax_rates?: components["schemas"]["tax_rate"][] | null;
      /** The end of this phase of the subscription schedule. */
      end_date: number;
      /** The subscription schedule's default invoice settings. */
      invoice_settings?: Partial<components["schemas"]["invoice_setting_subscription_schedule_setting"]> | null;
      /** Plans to subscribe during this phase of the subscription schedule. */
      plans: components["schemas"]["subscription_schedule_configuration_item"][];
      /** Controls whether or not the subscription schedule will prorate when transitioning to this phase. Values are `create_prorations` and `none`. */
      proration_behavior?: ("always_invoice" | "create_prorations" | "none") | null;
      /** The start of this phase of the subscription schedule. */
      start_date: number;
      /** If provided, each invoice created during this phase of the subscription schedule will apply the tax rate, increasing the amount billed to the customer. */
      tax_percent?: number | null;
      /** When the trial ends within the phase. */
      trial_end?: number | null;
    };
    subscription_schedules_resource_default_settings: {
      /** Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period */
      billing_thresholds?: Partial<components["schemas"]["subscription_billing_thresholds"]> | null;
      /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. */
      collection_method?: ("charge_automatically" | "send_invoice") | null;
      /** ID of the default payment method for the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings. */
      default_payment_method?: (Partial<string> & Partial<components["schemas"]["payment_method"]>) | null;
      /** The subscription schedule's default invoice settings. */
      invoice_settings?: Partial<components["schemas"]["invoice_setting_subscription_schedule_setting"]> | null;
    };
    /**
     * The Pause Collection settings determine how we will pause collection for this subscription and for how long the subscription
     * should be paused.
     */
    subscriptions_resource_pause_collection: {
      /** The payment collection behavior for this subscription while paused. One of `keep_as_draft`, `mark_uncollectible`, or `void`. */
      behavior: "keep_as_draft" | "mark_uncollectible" | "void";
      /** The time after which the subscription will resume collecting payments. */
      resumes_at?: number | null;
    };
    /**
     * Pending Updates store the changes pending from a previous update that will be applied
     * to the Subscription upon successful payment.
     */
    subscriptions_resource_pending_update: {
      /** If the update is applied, determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. */
      billing_cycle_anchor?: number | null;
      /** The point after which the changes reflected by this update will be discarded and no longer applied. */
      expires_at: number;
      /** List of subscription items, each with an attached plan, that will be set if the update is applied. */
      subscription_items?: components["schemas"]["subscription_item"][] | null;
      /** Unix timestamp representing the end of the trial period the customer will get before being charged for the first time, if the update is applied. */
      trial_end?: number | null;
      /** Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. */
      trial_from_plan?: boolean | null;
    };
    tax_deducted_at_source: {
      /** Unique identifier for the object. */
      id: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "tax_deducted_at_source";
      /** The end of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period. */
      period_end: number;
      /** The start of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period. */
      period_start: number;
      /** The TAN that was supplied to Stripe when TDS was assessed */
      tax_deduction_account_number: string;
    };
    /**
     * You can add one or multiple tax IDs to a [customer](https://stripe.com/docs/api/customers).
     * A customer's tax IDs are displayed on invoices and credit notes issued for the customer.
     *
     * Related guide: [Customer Tax Identification Numbers](https://stripe.com/docs/billing/taxes/tax-ids).
     */
    tax_id: {
      /** Two-letter ISO code representing the country of the tax ID. */
      country?: string | null;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** ID of the customer. */
      customer: Partial<string> & Partial<components["schemas"]["customer"]>;
      /** Unique identifier for the object. */
      id: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "tax_id";
      /** Type of the tax ID, one of `au_abn`, `ca_bn`, `ca_qst`, `ch_vat`, `es_cif`, `eu_vat`, `hk_br`, `in_gst`, `jp_cn`, `kr_brn`, `li_uid`, `mx_rfc`, `my_itn`, `my_sst`, `no_vat`, `nz_gst`, `ru_inn`, `sg_gst`, `sg_uen`, `th_vat`, `tw_vat`, `us_ein`, or `za_vat`. Note that some legacy tax IDs have type `unknown` */
      type:
        | "au_abn"
        | "ca_bn"
        | "ca_qst"
        | "ch_vat"
        | "es_cif"
        | "eu_vat"
        | "hk_br"
        | "in_gst"
        | "jp_cn"
        | "kr_brn"
        | "li_uid"
        | "mx_rfc"
        | "my_itn"
        | "my_sst"
        | "no_vat"
        | "nz_gst"
        | "ru_inn"
        | "sg_gst"
        | "sg_uen"
        | "th_vat"
        | "tw_vat"
        | "unknown"
        | "us_ein"
        | "za_vat";
      /** Value of the tax ID. */
      value: string;
      verification: components["schemas"]["tax_id_verification"];
    };
    tax_id_verification: {
      /** Verification status, one of `pending`, `verified`, `unverified`, or `unavailable`. */
      status: "pending" | "unavailable" | "unverified" | "verified";
      /** Verified address. */
      verified_address?: string | null;
      /** Verified name. */
      verified_name?: string | null;
    };
    /**
     * Tax rates can be applied to invoices and subscriptions to collect tax.
     *
     * Related guide: [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates).
     */
    tax_rate: {
      /** Defaults to `true`. When set to `false`, this tax rate cannot be applied to objects in the API, but will still be applied to subscriptions and invoices that already have it set. */
      active: boolean;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers. */
      description?: string | null;
      /** The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page. */
      display_name: string;
      /** Unique identifier for the object. */
      id: string;
      /** This specifies if the tax rate is inclusive or exclusive. */
      inclusive: boolean;
      /** The jurisdiction for the tax rate. */
      jurisdiction?: string | null;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: { [key: string]: string };
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "tax_rate";
      /** This represents the tax rate percent out of 100. */
      percentage: number;
    };
    /**
     * A Connection Token is used by the Stripe Terminal SDK to connect to a reader.
     *
     * Related guide: [Fleet Management](https://stripe.com/docs/terminal/readers/fleet-management#create).
     */
    "terminal.connection_token": {
      /** The id of the location that this connection token is scoped to. */
      location?: string;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "terminal.connection_token";
      /** Your application should pass this token to the Stripe Terminal SDK. */
      secret: string;
    };
    /**
     * A Location represents a grouping of readers.
     *
     * Related guide: [Fleet Management](https://stripe.com/docs/terminal/readers/fleet-management#create).
     */
    "terminal.location": {
      address: components["schemas"]["address"];
      /** The display name of the location. */
      display_name: string;
      /** Unique identifier for the object. */
      id: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: { [key: string]: string };
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "terminal.location";
    };
    /**
     * A Reader represents a physical device for accepting payment details.
     *
     * Related guide: [Connecting to a Reader](https://stripe.com/docs/terminal/readers/connecting).
     */
    "terminal.reader": {
      /** The current software version of the reader. */
      device_sw_version?: string | null;
      /** Type of reader, one of `bbpos_chipper2x` or `verifone_P400`. */
      device_type: "bbpos_chipper2x" | "verifone_P400";
      /** Unique identifier for the object. */
      id: string;
      /** The local IP address of the reader. */
      ip_address?: string | null;
      /** Custom label given to the reader for easier identification. */
      label: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** The location identifier of the reader. */
      location?: string | null;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: { [key: string]: string };
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "terminal.reader";
      /** Serial number of the reader. */
      serial_number: string;
      /** The networking status of the reader. */
      status?: string | null;
    };
    /**
     * Cardholder authentication via 3D Secure is initiated by creating a `3D Secure`
     * object. Once the object has been created, you can use it to authenticate the
     * cardholder and create a charge.
     */
    three_d_secure: {
      /** Amount of the charge that you will create when authentication completes. */
      amount: number;
      /** True if the cardholder went through the authentication flow and their bank indicated that authentication succeeded. */
      authenticated: boolean;
      card: components["schemas"]["card"];
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** Unique identifier for the object. */
      id: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "three_d_secure";
      /** If present, this is the URL that you should send the cardholder to for authentication. If you are going to use Stripe.js to display the authentication page in an iframe, you should use the value "_callback". */
      redirect_url?: string | null;
      /** Possible values are `redirect_pending`, `succeeded`, or `failed`. When the cardholder can be authenticated, the object starts with status `redirect_pending`. When liability will be shifted to the cardholder's bank (either because the cardholder was successfully authenticated, or because the bank has not implemented 3D Secure, the object wlil be in status `succeeded`. `failed` indicates that authentication was attempted unsuccessfully. */
      status: string;
    };
    three_d_secure_details: {
      /** Whether or not authentication was performed. 3D Secure will succeed without authentication when the card is not enrolled. */
      authenticated?: boolean;
      /** Whether or not 3D Secure succeeded. */
      succeeded?: boolean;
      /** The version of 3D Secure that was used for this payment. */
      version: string;
    };
    three_d_secure_usage: {
      /** Whether 3D Secure is supported on this card. */
      supported: boolean;
    };
    /**
     * Tokenization is the process Stripe uses to collect sensitive card or bank
     * account details, or personally identifiable information (PII), directly from
     * your customers in a secure manner. A token representing this information is
     * returned to your server to use. You should use our
     * [recommended payments integrations](https://stripe.com/docs/payments) to perform this process
     * client-side. This ensures that no sensitive card data touches your server,
     * and allows your integration to operate in a PCI-compliant way.
     *
     * If you cannot use client-side tokenization, you can also create tokens using
     * the API with either your publishable or secret API key. Keep in mind that if
     * your integration uses this method, you are responsible for any PCI compliance
     * that may be required, and you must keep your secret API key safe. Unlike with
     * client-side tokenization, your customer's information is not sent directly to
     * Stripe, so we cannot determine how it is handled or stored.
     *
     * Tokens cannot be stored or used more than once. To store card or bank account
     * information for later use, you can create [Customer](https://stripe.com/docs/api#customers)
     * objects or [Custom accounts](https://stripe.com/docs/api#external_accounts). Note that
     * [Radar](https://stripe.com/docs/radar), our integrated solution for automatic fraud protection,
     * supports only integrations that use client-side tokenization.
     *
     * Related guide: [Accept a payment](https://stripe.com/docs/payments/accept-a-payment-charges#web-create-token)
     */
    token: {
      bank_account?: components["schemas"]["bank_account"];
      card?: components["schemas"]["card"];
      /** IP address of the client that generated the token. */
      client_ip?: string | null;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Unique identifier for the object. */
      id: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "token";
      /** Type of the token: `account`, `bank_account`, `card`, or `pii`. */
      type: string;
      /** Whether this token has already been used (tokens can be used only once). */
      used: boolean;
    };
    /**
     * To top up your Stripe balance, you create a top-up object. You can retrieve
     * individual top-ups, as well as list all top-ups. Top-ups are identified by a
     * unique, random ID.
     *
     * Related guide: [Topping Up your Platform Account](https://stripe.com/docs/connect/top-ups).
     */
    topup: {
      /** Amount transferred. */
      amount: number;
      /** ID of the balance transaction that describes the impact of this top-up on your account balance. May not be specified depending on status of top-up. */
      balance_transaction?: (Partial<string> & Partial<components["schemas"]["balance_transaction"]>) | null;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** An arbitrary string attached to the object. Often useful for displaying to users. */
      description?: string | null;
      /** Date the funds are expected to arrive in your Stripe account for payouts. This factors in delays like weekends or bank holidays. May not be specified depending on status of top-up. */
      expected_availability_date?: number | null;
      /** Error code explaining reason for top-up failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes). */
      failure_code?: string | null;
      /** Message to user further explaining reason for top-up failure if available. */
      failure_message?: string | null;
      /** Unique identifier for the object. */
      id: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: { [key: string]: string };
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "topup";
      source: components["schemas"]["source"];
      /** Extra information about a top-up. This will appear on your source's bank statement. It must contain at least one letter. */
      statement_descriptor?: string | null;
      /** The status of the top-up is either `canceled`, `failed`, `pending`, `reversed`, or `succeeded`. */
      status: "canceled" | "failed" | "pending" | "reversed" | "succeeded";
      /** A string that identifies this top-up as part of a group. */
      transfer_group?: string | null;
    };
    /**
     * A `Transfer` object is created when you move funds between Stripe accounts as
     * part of Connect.
     *
     * Before April 6, 2017, transfers also represented movement of funds from a
     * Stripe account to a card or bank account. This behavior has since been split
     * out into a [Payout](https://stripe.com/docs/api#payout_object) object, with corresponding payout endpoints. For more
     * information, read about the
     * [transfer/payout split](https://stripe.com/docs/transfer-payout-split).
     *
     * Related guide: [Creating Separate Charges and Transfers](https://stripe.com/docs/connect/charges-transfers).
     */
    transfer: {
      /** Amount in %s to be transferred. */
      amount: number;
      /** Amount in %s reversed (can be less than the amount attribute on the transfer if a partial reversal was issued). */
      amount_reversed: number;
      /** Balance transaction that describes the impact of this transfer on your account balance. */
      balance_transaction?: (Partial<string> & Partial<components["schemas"]["balance_transaction"]>) | null;
      /** Time that this record of the transfer was first created. */
      created: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** An arbitrary string attached to the object. Often useful for displaying to users. */
      description?: string | null;
      /** ID of the Stripe account the transfer was sent to. */
      destination?: (Partial<string> & Partial<components["schemas"]["account"]>) | null;
      /** If the destination is a Stripe account, this will be the ID of the payment that the destination account received for the transfer. */
      destination_payment?: Partial<string> & Partial<components["schemas"]["charge"]>;
      /** Unique identifier for the object. */
      id: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: { [key: string]: string };
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "transfer";
      /** A list of reversals that have been applied to the transfer. */
      reversals: {
        /** Details about each object. */
        data: components["schemas"]["transfer_reversal"][];
        /** True if this list has another page of items after this one that can be fetched. */
        has_more: boolean;
        /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
        object: "list";
        /** The URL where this list can be accessed. */
        url: string;
      };
      /** Whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false. */
      reversed: boolean;
      /** ID of the charge or payment that was used to fund the transfer. If null, the transfer was funded from the available balance. */
      source_transaction?: (Partial<string> & Partial<components["schemas"]["charge"]>) | null;
      /** The source balance this transfer came from. One of `card`, `fpx`, or `bank_account`. */
      source_type?: string | null;
      /** A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details. */
      transfer_group?: string | null;
    };
    transfer_data: {
      /** Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
      amount?: number;
      /**
       * The account (if any) the payment will be attributed to for tax
       * reporting, and where funds from the payment will be transferred to upon
       * payment success.
       */
      destination: Partial<string> & Partial<components["schemas"]["account"]>;
    };
    /**
     * [Stripe Connect](https://stripe.com/docs/connect) platforms can reverse transfers made to a
     * connected account, either entirely or partially, and can also specify whether
     * to refund any related application fees. Transfer reversals add to the
     * platform's balance and subtract from the destination account's balance.
     *
     * Reversing a transfer that was made for a [destination
     * charge](/docs/connect/destination-charges) is allowed only up to the amount of
     * the charge. It is possible to reverse a
     * [transfer_group](https://stripe.com/docs/connect/charges-transfers#transfer-options)
     * transfer only if the destination account has enough balance to cover the
     * reversal.
     *
     * Related guide: [Reversing Transfers](https://stripe.com/docs/connect/charges-transfers#reversing-transfers).
     */
    transfer_reversal: {
      /** Amount, in %s. */
      amount: number;
      /** Balance transaction that describes the impact on your account balance. */
      balance_transaction?: (Partial<string> & Partial<components["schemas"]["balance_transaction"]>) | null;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      currency: string;
      /** Linked payment refund for the transfer reversal. */
      destination_payment_refund?: (Partial<string> & Partial<components["schemas"]["refund"]>) | null;
      /** Unique identifier for the object. */
      id: string;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: { [key: string]: string };
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "transfer_reversal";
      /** ID of the refund responsible for the transfer reversal. */
      source_refund?: (Partial<string> & Partial<components["schemas"]["refund"]>) | null;
      /** ID of the transfer that was reversed. */
      transfer: Partial<string> & Partial<components["schemas"]["transfer"]>;
    };
    transfer_schedule: {
      /** The number of days charges for the account will be held before being paid out. */
      delay_days: number;
      /** How frequently funds will be paid out. One of `manual` (payouts only created via API call), `daily`, `weekly`, or `monthly`. */
      interval: string;
      /** The day of the month funds will be paid out. Only shown if `interval` is monthly. Payouts scheduled between the 29th and 31st of the month are sent on the last day of shorter months. */
      monthly_anchor?: number;
      /** The day of the week funds will be paid out, of the style 'monday', 'tuesday', etc. Only shown if `interval` is weekly. */
      weekly_anchor?: string;
    };
    transform_usage: {
      /** Divide usage by this number. */
      divide_by: number;
      /** After division, either round the result `up` or `down`. */
      round: "down" | "up";
    };
    /**
     * Usage records allow you to report customer usage and metrics to Stripe for
     * metered billing of subscription plans.
     *
     * Related guide: [Metered Billing](https://stripe.com/docs/billing/subscriptions/metered-billing).
     */
    usage_record: {
      /** Unique identifier for the object. */
      id: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "usage_record";
      /** The usage quantity for the specified date. */
      quantity: number;
      /** The ID of the subscription item this usage record contains data for. */
      subscription_item: string;
      /** The timestamp when this usage occurred. */
      timestamp: number;
    };
    usage_record_summary: {
      /** Unique identifier for the object. */
      id: string;
      /** The invoice in which this usage period has been billed for. */
      invoice?: string | null;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "usage_record_summary";
      period: components["schemas"]["period"];
      /** The ID of the subscription item this summary is describing. */
      subscription_item: string;
      /** The total usage within this usage period. */
      total_usage: number;
    };
    /**
     * You can configure [webhook endpoints](https://stripe.com/docs/webhooks/) via the API to be
     * notified about events that happen in your Stripe account or connected
     * accounts.
     *
     * Most users configure webhooks from [the dashboard](https://dashboard.stripe.com/webhooks), which provides a user interface for registering and testing your webhook endpoints.
     *
     * Related guide: [Setting up Webhooks](https://stripe.com/docs/webhooks/configure).
     */
    webhook_endpoint: {
      /** The API version events are rendered as for this webhook endpoint. */
      api_version?: string | null;
      /** The ID of the associated Connect application. */
      application?: string | null;
      /** Time at which the object was created. Measured in seconds since the Unix epoch. */
      created: number;
      /** An optional description of what the wehbook is used for. */
      description?: string | null;
      /** The list of events to enable for this endpoint. `['*']` indicates that all events are enabled, except those that require explicit selection. */
      enabled_events: string[];
      /** Unique identifier for the object. */
      id: string;
      /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      livemode: boolean;
      /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      metadata: { [key: string]: string };
      /** String representing the object's type. Objects of the same type share the same value. */
      object: "webhook_endpoint";
      /** The endpoint's secret, used to generate [webhook signatures](https://stripe.com/docs/webhooks/signatures). Only returned at creation. */
      secret?: string;
      /** The status of the webhook. It can be `enabled` or `disabled`. */
      status: string;
      /** The URL of the webhook endpoint. */
      url: string;
    };
  };
}

export interface operations {
  /** <p>Initiate 3D Secure authentication.</p> */
  Post3dSecure: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["three_d_secure"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Amount of the charge that you will create when authentication completes. */
          amount: number;
          /** The ID of a card token, or the ID of a card belonging to the given customer. */
          card?: string;
          /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          currency: string;
          /** The customer associated with this 3D secure authentication. */
          customer?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** The URL that the cardholder's browser will be returned to when authentication completes. */
          return_url: string;
        };
      };
    };
  };
  /** <p>Retrieves a 3D Secure object.</p> */
  Get3dSecureThreeDSecure: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        three_d_secure: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["three_d_secure"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Retrieves the details of an account.</p> */
  GetAccount: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["account"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>Updates a connected <a href="/docs/connect/accounts">Express or Custom account</a> by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked <strong>Custom Only</strong> below.) Parameters marked <strong>Custom and Express</strong> are supported by both account types.</p>
   *
   * <p>To update your own account, use the <a href="https://dashboard.stripe.com/account">Dashboard</a>. Refer to our <a href="/docs/connect/updating-accounts">Connect</a> documentation to learn more about updating accounts.</p>
   */
  PostAccount: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["account"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** An [account token](https://stripe.com/docs/api#create_account_token), used to securely provide details to the account. */
          account_token?: string;
          /** Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details. */
          bank_account?: Partial<{
            account_holder_name?: string;
            account_holder_type?: "company" | "individual";
            account_number: string;
            country: string;
            currency?: string;
            object?: "bank_account";
            routing_number?: string;
          }> &
            Partial<string>;
          /** Business information about the account. */
          business_profile?: {
            mcc?: string;
            name?: string;
            product_description?: string;
            support_email?: string;
            support_phone?: string;
            support_url?: string;
            url?: string;
          };
          /** The business type. */
          business_type?: "company" | "government_entity" | "individual" | "non_profit";
          /** Information about the company or business. This field is null unless `business_type` is set to `company`, `government_entity`, or `non_profit`. */
          company?: {
            address?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            address_kana?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
              town?: string;
            };
            address_kanji?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
              town?: string;
            };
            directors_provided?: boolean;
            executives_provided?: boolean;
            name?: string;
            name_kana?: string;
            name_kanji?: string;
            owners_provided?: boolean;
            phone?: string;
            structure?:
              | ""
              | "government_instrumentality"
              | "governmental_unit"
              | "incorporated_non_profit"
              | "limited_liability_partnership"
              | "multi_member_llc"
              | "private_company"
              | "private_corporation"
              | "private_partnership"
              | "public_company"
              | "public_corporation"
              | "public_partnership"
              | "sole_proprietorship"
              | "tax_exempt_government_instrumentality"
              | "unincorporated_association"
              | "unincorporated_non_profit";
            tax_id?: string;
            tax_id_registrar?: string;
            vat_id?: string;
            verification?: {
              document?: {
                back?: string;
                front?: string;
              };
            };
          };
          /** Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts). */
          default_currency?: string;
          /** Email address of the account representative. For Standard accounts, this is used to ask them to claim their Stripe account. For Custom accounts, this only makes the account easier to identify to platforms; Stripe does not email the account representative. */
          email?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** A card or bank account to attach to the account. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary, as documented in the `external_account` parameter for [bank account](https://stripe.com/docs/api#account_create_bank_account) creation. <br><br>By default, providing an external account sets it as the new default external account for its currency, and deletes the old default if one exists. To add additional external accounts without replacing the existing default for the currency, use the bank account or card creation API. */
          external_account?: string;
          /** Information about the person represented by the account. This field is null unless `business_type` is set to `individual`. */
          individual?: {
            address?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            address_kana?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
              town?: string;
            };
            address_kanji?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
              town?: string;
            };
            dob?: Partial<{
              day: number;
              month: number;
              year: number;
            }> &
              Partial<"">;
            email?: string;
            first_name?: string;
            first_name_kana?: string;
            first_name_kanji?: string;
            gender?: string;
            id_number?: string;
            last_name?: string;
            last_name_kana?: string;
            last_name_kanji?: string;
            maiden_name?: string;
            metadata?: Partial<{ [key: string]: string }> & Partial<"">;
            phone?: string;
            ssn_last_4?: string;
            verification?: {
              additional_document?: {
                back?: string;
                front?: string;
              };
              document?: {
                back?: string;
                front?: string;
              };
            };
          };
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** The set of capabilities you want to unlock for this account. Each capability will be inactive until you have provided its specific requirements and Stripe has verified them. An account may have some of its requested capabilities be active and some be inactive. */
          requested_capabilities?: (
            | "au_becs_debit_payments"
            | "card_issuing"
            | "card_payments"
            | "legacy_payments"
            | "tax_reporting_us_1099_k"
            | "tax_reporting_us_1099_misc"
            | "transfers"
          )[];
          /** Options for customizing how the account functions within Stripe. */
          settings?: {
            branding?: {
              icon?: string;
              logo?: string;
              primary_color?: string;
              secondary_color?: string;
            };
            card_payments?: {
              decline_on?: {
                avs_failure?: boolean;
                cvc_failure?: boolean;
              };
              statement_descriptor_prefix?: string;
            };
            payments?: {
              statement_descriptor?: string;
              statement_descriptor_kana?: string;
              statement_descriptor_kanji?: string;
            };
            payouts?: {
              debit_negative_balances?: boolean;
              schedule?: {
                delay_days?: Partial<"minimum"> & Partial<number>;
                interval?: "daily" | "manual" | "monthly" | "weekly";
                monthly_anchor?: number;
                weekly_anchor?: "friday" | "monday" | "saturday" | "sunday" | "thursday" | "tuesday" | "wednesday";
              };
              statement_descriptor?: string;
            };
          };
          /** Details on the account's acceptance of the [Stripe Services Agreement](https://stripe.com/docs/connect/updating-accounts#tos-acceptance). */
          tos_acceptance?: {
            date?: number;
            ip?: string;
            user_agent?: string;
          };
        };
      };
    };
  };
  /**
   * <p>With <a href="/docs/connect">Connect</a>, you can delete Custom or Express accounts you manage.</p>
   *
   * <p>Accounts created using test-mode keys can be deleted at any time. Accounts created using live-mode keys can only be deleted once all balances are zero.</p>
   *
   * <p>If you want to delete your own account, use the <a href="https://dashboard.stripe.com/account">account information tab in your account settings</a> instead.</p>
   */
  DeleteAccount: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["deleted_account"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          account?: string;
        };
      };
    };
  };
  /** <p>Create an external account for a given account.</p> */
  PostAccountBankAccounts: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["external_account"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details. */
          bank_account?: Partial<{
            account_holder_name?: string;
            account_holder_type?: "company" | "individual";
            account_number: string;
            country: string;
            currency?: string;
            object?: "bank_account";
            routing_number?: string;
          }> &
            Partial<string>;
          /** When set to true, or if this is the first external account added in this currency, this account becomes the default external account for its currency. */
          default_for_currency?: boolean;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Please refer to full [documentation](https://stripe.com/docs/api) instead. */
          external_account?: string;
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: { [key: string]: string };
        };
      };
    };
  };
  /** <p>Retrieve a specified external account for a given account.</p> */
  GetAccountBankAccountsId: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["external_account"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>Updates the metadata, account holder name, and account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>
   * <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
   */
  PostAccountBankAccountsId: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["external_account"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The name of the person or business that owns the bank account. */
          account_holder_name?: string;
          /** The type of entity that holds the account. This can be either `individual` or `company`. */
          account_holder_type?: "" | "company" | "individual";
          /** City/District/Suburb/Town/Village. */
          address_city?: string;
          /** Billing address country, if provided when creating card. */
          address_country?: string;
          /** Address line 1 (Street address/PO Box/Company name). */
          address_line1?: string;
          /** Address line 2 (Apartment/Suite/Unit/Building). */
          address_line2?: string;
          /** State/County/Province/Region. */
          address_state?: string;
          /** ZIP or postal code. */
          address_zip?: string;
          /** When set to true, this becomes the default external account for its currency. */
          default_for_currency?: boolean;
          /** Two digit number representing the card’s expiration month. */
          exp_month?: string;
          /** Four digit number representing the card’s expiration year. */
          exp_year?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** Cardholder name. */
          name?: string;
        };
      };
    };
  };
  /** <p>Delete a specified external account for a given account.</p> */
  DeleteAccountBankAccountsId: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["deleted_external_account"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p> */
  GetAccountCapabilities: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["capability"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Retrieves information about the specified Account Capability.</p> */
  GetAccountCapabilitiesCapability: {
    parameters: {
      path: {
        capability: string;
      };
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["capability"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Updates an existing Account Capability.</p> */
  PostAccountCapabilitiesCapability: {
    parameters: {
      path: {
        capability: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["capability"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
          requested?: boolean;
        };
      };
    };
  };
  /** <p>List external accounts for an account.</p> */
  GetAccountExternalAccounts: {
    parameters: {
      query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            /** The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards. */
            data: (Partial<components["schemas"]["bank_account"]> & Partial<components["schemas"]["card"]>)[];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Create an external account for a given account.</p> */
  PostAccountExternalAccounts: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["external_account"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details. */
          bank_account?: Partial<{
            account_holder_name?: string;
            account_holder_type?: "company" | "individual";
            account_number: string;
            country: string;
            currency?: string;
            object?: "bank_account";
            routing_number?: string;
          }> &
            Partial<string>;
          /** When set to true, or if this is the first external account added in this currency, this account becomes the default external account for its currency. */
          default_for_currency?: boolean;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Please refer to full [documentation](https://stripe.com/docs/api) instead. */
          external_account?: string;
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: { [key: string]: string };
        };
      };
    };
  };
  /** <p>Retrieve a specified external account for a given account.</p> */
  GetAccountExternalAccountsId: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["external_account"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>Updates the metadata, account holder name, and account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>
   * <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
   */
  PostAccountExternalAccountsId: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["external_account"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The name of the person or business that owns the bank account. */
          account_holder_name?: string;
          /** The type of entity that holds the account. This can be either `individual` or `company`. */
          account_holder_type?: "" | "company" | "individual";
          /** City/District/Suburb/Town/Village. */
          address_city?: string;
          /** Billing address country, if provided when creating card. */
          address_country?: string;
          /** Address line 1 (Street address/PO Box/Company name). */
          address_line1?: string;
          /** Address line 2 (Apartment/Suite/Unit/Building). */
          address_line2?: string;
          /** State/County/Province/Region. */
          address_state?: string;
          /** ZIP or postal code. */
          address_zip?: string;
          /** When set to true, this becomes the default external account for its currency. */
          default_for_currency?: boolean;
          /** Two digit number representing the card’s expiration month. */
          exp_month?: string;
          /** Four digit number representing the card’s expiration year. */
          exp_year?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** Cardholder name. */
          name?: string;
        };
      };
    };
  };
  /** <p>Delete a specified external account for a given account.</p> */
  DeleteAccountExternalAccountsId: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["deleted_external_account"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>Creates a single-use login link for an Express account to access their Stripe dashboard.</p>
   *
   * <p><strong>You may only create login links for <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
   */
  PostAccountLoginLinks: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["login_link"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          account: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Where to redirect the user after they log out of their dashboard. */
          redirect_url?: string;
        };
      };
    };
  };
  /**
   * <p>Invalidates all sessions for a light account, for a platform to use during platform logout.</p>
   *
   * <p><strong>You may only log out <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
   */
  PutAccountLogout: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["light_account_logout"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          account: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
        };
      };
    };
  };
  /** <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p> */
  GetAccountPeople: {
    parameters: {
      query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** Filters on the list of people returned based on the person's relationship to the account's company. */
        relationship?: {
          director?: boolean;
          executive?: boolean;
          owner?: boolean;
          representative?: boolean;
        };
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["person"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Creates a new person.</p> */
  PostAccountPeople: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["person"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          account?: string;
          /** The person's address. */
          address?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          /** The Kana variation of the person's address (Japan only). */
          address_kana?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          /** The Kanji variation of the person's address (Japan only). */
          address_kanji?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          /** The person's date of birth. */
          dob?: Partial<{
            day: number;
            month: number;
            year: number;
          }> &
            Partial<"">;
          /** The person's email address. */
          email?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** The person's first name. */
          first_name?: string;
          /** The Kana variation of the person's first name (Japan only). */
          first_name_kana?: string;
          /** The Kanji variation of the person's first name (Japan only). */
          first_name_kanji?: string;
          /** The person's gender (International regulations require either "male" or "female"). */
          gender?: string;
          /** The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/stripe.js#collecting-pii-data). */
          id_number?: string;
          /** The person's last name. */
          last_name?: string;
          /** The Kana variation of the person's last name (Japan only). */
          last_name_kana?: string;
          /** The Kanji variation of the person's last name (Japan only). */
          last_name_kanji?: string;
          /** The person's maiden name. */
          maiden_name?: string;
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person. */
          person_token?: string;
          /** The person's phone number. */
          phone?: string;
          /** The relationship that this person has with the account's legal entity. */
          relationship?: {
            director?: boolean;
            executive?: boolean;
            owner?: boolean;
            percent_ownership?: Partial<number> & Partial<"">;
            representative?: boolean;
            title?: string;
          };
          /** The last 4 digits of the person's social security number. */
          ssn_last_4?: string;
          /** The person's verification status. */
          verification?: {
            additional_document?: {
              back?: string;
              front?: string;
            };
            document?: {
              back?: string;
              front?: string;
            };
          };
        };
      };
    };
  };
  /** <p>Retrieves an existing person.</p> */
  GetAccountPeoplePerson: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        person: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["person"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Updates an existing person.</p> */
  PostAccountPeoplePerson: {
    parameters: {
      path: {
        person: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["person"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          account?: string;
          /** The person's address. */
          address?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          /** The Kana variation of the person's address (Japan only). */
          address_kana?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          /** The Kanji variation of the person's address (Japan only). */
          address_kanji?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          /** The person's date of birth. */
          dob?: Partial<{
            day: number;
            month: number;
            year: number;
          }> &
            Partial<"">;
          /** The person's email address. */
          email?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** The person's first name. */
          first_name?: string;
          /** The Kana variation of the person's first name (Japan only). */
          first_name_kana?: string;
          /** The Kanji variation of the person's first name (Japan only). */
          first_name_kanji?: string;
          /** The person's gender (International regulations require either "male" or "female"). */
          gender?: string;
          /** The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/stripe.js#collecting-pii-data). */
          id_number?: string;
          /** The person's last name. */
          last_name?: string;
          /** The Kana variation of the person's last name (Japan only). */
          last_name_kana?: string;
          /** The Kanji variation of the person's last name (Japan only). */
          last_name_kanji?: string;
          /** The person's maiden name. */
          maiden_name?: string;
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person. */
          person_token?: string;
          /** The person's phone number. */
          phone?: string;
          /** The relationship that this person has with the account's legal entity. */
          relationship?: {
            director?: boolean;
            executive?: boolean;
            owner?: boolean;
            percent_ownership?: Partial<number> & Partial<"">;
            representative?: boolean;
            title?: string;
          };
          /** The last 4 digits of the person's social security number. */
          ssn_last_4?: string;
          /** The person's verification status. */
          verification?: {
            additional_document?: {
              back?: string;
              front?: string;
            };
            document?: {
              back?: string;
              front?: string;
            };
          };
        };
      };
    };
  };
  /** <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p> */
  DeleteAccountPeoplePerson: {
    parameters: {
      path: {
        person: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["deleted_person"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p> */
  GetAccountPersons: {
    parameters: {
      query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** Filters on the list of people returned based on the person's relationship to the account's company. */
        relationship?: {
          director?: boolean;
          executive?: boolean;
          owner?: boolean;
          representative?: boolean;
        };
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["person"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Creates a new person.</p> */
  PostAccountPersons: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["person"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          account?: string;
          /** The person's address. */
          address?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          /** The Kana variation of the person's address (Japan only). */
          address_kana?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          /** The Kanji variation of the person's address (Japan only). */
          address_kanji?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          /** The person's date of birth. */
          dob?: Partial<{
            day: number;
            month: number;
            year: number;
          }> &
            Partial<"">;
          /** The person's email address. */
          email?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** The person's first name. */
          first_name?: string;
          /** The Kana variation of the person's first name (Japan only). */
          first_name_kana?: string;
          /** The Kanji variation of the person's first name (Japan only). */
          first_name_kanji?: string;
          /** The person's gender (International regulations require either "male" or "female"). */
          gender?: string;
          /** The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/stripe.js#collecting-pii-data). */
          id_number?: string;
          /** The person's last name. */
          last_name?: string;
          /** The Kana variation of the person's last name (Japan only). */
          last_name_kana?: string;
          /** The Kanji variation of the person's last name (Japan only). */
          last_name_kanji?: string;
          /** The person's maiden name. */
          maiden_name?: string;
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person. */
          person_token?: string;
          /** The person's phone number. */
          phone?: string;
          /** The relationship that this person has with the account's legal entity. */
          relationship?: {
            director?: boolean;
            executive?: boolean;
            owner?: boolean;
            percent_ownership?: Partial<number> & Partial<"">;
            representative?: boolean;
            title?: string;
          };
          /** The last 4 digits of the person's social security number. */
          ssn_last_4?: string;
          /** The person's verification status. */
          verification?: {
            additional_document?: {
              back?: string;
              front?: string;
            };
            document?: {
              back?: string;
              front?: string;
            };
          };
        };
      };
    };
  };
  /** <p>Retrieves an existing person.</p> */
  GetAccountPersonsPerson: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        person: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["person"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Updates an existing person.</p> */
  PostAccountPersonsPerson: {
    parameters: {
      path: {
        person: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["person"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          account?: string;
          /** The person's address. */
          address?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          /** The Kana variation of the person's address (Japan only). */
          address_kana?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          /** The Kanji variation of the person's address (Japan only). */
          address_kanji?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          /** The person's date of birth. */
          dob?: Partial<{
            day: number;
            month: number;
            year: number;
          }> &
            Partial<"">;
          /** The person's email address. */
          email?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** The person's first name. */
          first_name?: string;
          /** The Kana variation of the person's first name (Japan only). */
          first_name_kana?: string;
          /** The Kanji variation of the person's first name (Japan only). */
          first_name_kanji?: string;
          /** The person's gender (International regulations require either "male" or "female"). */
          gender?: string;
          /** The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/stripe.js#collecting-pii-data). */
          id_number?: string;
          /** The person's last name. */
          last_name?: string;
          /** The Kana variation of the person's last name (Japan only). */
          last_name_kana?: string;
          /** The Kanji variation of the person's last name (Japan only). */
          last_name_kanji?: string;
          /** The person's maiden name. */
          maiden_name?: string;
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person. */
          person_token?: string;
          /** The person's phone number. */
          phone?: string;
          /** The relationship that this person has with the account's legal entity. */
          relationship?: {
            director?: boolean;
            executive?: boolean;
            owner?: boolean;
            percent_ownership?: Partial<number> & Partial<"">;
            representative?: boolean;
            title?: string;
          };
          /** The last 4 digits of the person's social security number. */
          ssn_last_4?: string;
          /** The person's verification status. */
          verification?: {
            additional_document?: {
              back?: string;
              front?: string;
            };
            document?: {
              back?: string;
              front?: string;
            };
          };
        };
      };
    };
  };
  /** <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p> */
  DeleteAccountPersonsPerson: {
    parameters: {
      path: {
        person: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["deleted_person"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Creates an AccountLink object that returns a single-use Stripe URL that the user can redirect their user to in order to take them through the Connect Onboarding flow.</p> */
  PostAccountLinks: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["account_link"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The identifier of the account to create an account link for. */
          account: string;
          /** Which information the platform needs to collect from the user. One of `currently_due` or `eventually_due`. Default is `currently_due`. */
          collect?: "currently_due" | "eventually_due";
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** The URL that the user will be redirected to if the account link is no longer valid. */
          failure_url: string;
          /** The URL that the user will be redirected to upon leaving or completing the linked flow successfully. */
          success_url: string;
          /** The type of account link the user is requesting. Possible values are `custom_account_verification` or `custom_account_update`. */
          type: "custom_account_update" | "custom_account_verification";
        };
      };
    };
  };
  /** <p>Returns a list of accounts connected to your platform via <a href="/docs/connect">Connect</a>. If you’re not a platform, the list is empty.</p> */
  GetAccounts: {
    parameters: {
      query: {
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["account"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>With <a href="/docs/connect">Connect</a>, you can create Stripe accounts for your users.
   * To do this, you’ll first need to <a href="https://dashboard.stripe.com/account/applications/settings">register your platform</a>.</p>
   *
   * <p>For Standard accounts, parameters other than <code>country</code>, <code>email</code>, and <code>type</code>
   * are used to prefill the account application that we ask the account holder to complete.</p>
   */
  PostAccounts: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["account"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** An [account token](https://stripe.com/docs/api#create_account_token), used to securely provide details to the account. */
          account_token?: string;
          /** Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details. */
          bank_account?: Partial<{
            account_holder_name?: string;
            account_holder_type?: "company" | "individual";
            account_number: string;
            country: string;
            currency?: string;
            object?: "bank_account";
            routing_number?: string;
          }> &
            Partial<string>;
          /** Business information about the account. */
          business_profile?: {
            mcc?: string;
            name?: string;
            product_description?: string;
            support_email?: string;
            support_phone?: string;
            support_url?: string;
            url?: string;
          };
          /** The business type. */
          business_type?: "company" | "government_entity" | "individual" | "non_profit";
          /** Information about the company or business. This field is null unless `business_type` is set to `company`, `government_entity`, or `non_profit`. */
          company?: {
            address?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            address_kana?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
              town?: string;
            };
            address_kanji?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
              town?: string;
            };
            directors_provided?: boolean;
            executives_provided?: boolean;
            name?: string;
            name_kana?: string;
            name_kanji?: string;
            owners_provided?: boolean;
            phone?: string;
            structure?:
              | ""
              | "government_instrumentality"
              | "governmental_unit"
              | "incorporated_non_profit"
              | "limited_liability_partnership"
              | "multi_member_llc"
              | "private_company"
              | "private_corporation"
              | "private_partnership"
              | "public_company"
              | "public_corporation"
              | "public_partnership"
              | "sole_proprietorship"
              | "tax_exempt_government_instrumentality"
              | "unincorporated_association"
              | "unincorporated_non_profit";
            tax_id?: string;
            tax_id_registrar?: string;
            vat_id?: string;
            verification?: {
              document?: {
                back?: string;
                front?: string;
              };
            };
          };
          /** The country in which the account holder resides, or in which the business is legally established. This should be an ISO 3166-1 alpha-2 country code. For example, if you are in the United States and the business for which you're creating an account is legally represented in Canada, you would use `CA` as the country for the account being created. */
          country?: string;
          /** Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts). */
          default_currency?: string;
          /** The email address of the account holder. For Custom accounts, this is only to make the account easier to identify to you: Stripe will never directly email your users. */
          email?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** A card or bank account to attach to the account. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary, as documented in the `external_account` parameter for [bank account](https://stripe.com/docs/api#account_create_bank_account) creation. <br><br>By default, providing an external account sets it as the new default external account for its currency, and deletes the old default if one exists. To add additional external accounts without replacing the existing default for the currency, use the bank account or card creation API. */
          external_account?: string;
          /** Information about the person represented by the account. This field is null unless `business_type` is set to `individual`. */
          individual?: {
            address?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            address_kana?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
              town?: string;
            };
            address_kanji?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
              town?: string;
            };
            dob?: Partial<{
              day: number;
              month: number;
              year: number;
            }> &
              Partial<"">;
            email?: string;
            first_name?: string;
            first_name_kana?: string;
            first_name_kanji?: string;
            gender?: string;
            id_number?: string;
            last_name?: string;
            last_name_kana?: string;
            last_name_kanji?: string;
            maiden_name?: string;
            metadata?: Partial<{ [key: string]: string }> & Partial<"">;
            phone?: string;
            ssn_last_4?: string;
            verification?: {
              additional_document?: {
                back?: string;
                front?: string;
              };
              document?: {
                back?: string;
                front?: string;
              };
            };
          };
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** The set of capabilities you want to unlock for this account. Each capability will be inactive until you have provided its specific requirements and Stripe has verified them. An account may have some of its requested capabilities be active and some be inactive. */
          requested_capabilities?: (
            | "au_becs_debit_payments"
            | "card_issuing"
            | "card_payments"
            | "legacy_payments"
            | "tax_reporting_us_1099_k"
            | "tax_reporting_us_1099_misc"
            | "transfers"
          )[];
          /** Options for customizing how the account functions within Stripe. */
          settings?: {
            branding?: {
              icon?: string;
              logo?: string;
              primary_color?: string;
              secondary_color?: string;
            };
            card_payments?: {
              decline_on?: {
                avs_failure?: boolean;
                cvc_failure?: boolean;
              };
              statement_descriptor_prefix?: string;
            };
            payments?: {
              statement_descriptor?: string;
              statement_descriptor_kana?: string;
              statement_descriptor_kanji?: string;
            };
            payouts?: {
              debit_negative_balances?: boolean;
              schedule?: {
                delay_days?: Partial<"minimum"> & Partial<number>;
                interval?: "daily" | "manual" | "monthly" | "weekly";
                monthly_anchor?: number;
                weekly_anchor?: "friday" | "monday" | "saturday" | "sunday" | "thursday" | "tuesday" | "wednesday";
              };
              statement_descriptor?: string;
            };
          };
          /** Details on the account's acceptance of the [Stripe Services Agreement](https://stripe.com/docs/connect/updating-accounts#tos-acceptance). */
          tos_acceptance?: {
            date?: number;
            ip?: string;
            user_agent?: string;
          };
          /** The type of Stripe account to create. Currently must be `custom`, as only [Custom accounts](https://stripe.com/docs/connect/custom-accounts) may be created via the API. */
          type?: "custom" | "express" | "standard";
        };
      };
    };
  };
  /** <p>Retrieves the details of an account.</p> */
  GetAccountsAccount: {
    parameters: {
      path: {
        account: string;
      };
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["account"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>Updates a connected <a href="/docs/connect/accounts">Express or Custom account</a> by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked <strong>Custom Only</strong> below.) Parameters marked <strong>Custom and Express</strong> are supported by both account types.</p>
   *
   * <p>To update your own account, use the <a href="https://dashboard.stripe.com/account">Dashboard</a>. Refer to our <a href="/docs/connect/updating-accounts">Connect</a> documentation to learn more about updating accounts.</p>
   */
  PostAccountsAccount: {
    parameters: {
      path: {
        account: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["account"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** An [account token](https://stripe.com/docs/api#create_account_token), used to securely provide details to the account. */
          account_token?: string;
          /** Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details. */
          bank_account?: Partial<{
            account_holder_name?: string;
            account_holder_type?: "company" | "individual";
            account_number: string;
            country: string;
            currency?: string;
            object?: "bank_account";
            routing_number?: string;
          }> &
            Partial<string>;
          /** Business information about the account. */
          business_profile?: {
            mcc?: string;
            name?: string;
            product_description?: string;
            support_email?: string;
            support_phone?: string;
            support_url?: string;
            url?: string;
          };
          /** The business type. */
          business_type?: "company" | "government_entity" | "individual" | "non_profit";
          /** Information about the company or business. This field is null unless `business_type` is set to `company`, `government_entity`, or `non_profit`. */
          company?: {
            address?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            address_kana?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
              town?: string;
            };
            address_kanji?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
              town?: string;
            };
            directors_provided?: boolean;
            executives_provided?: boolean;
            name?: string;
            name_kana?: string;
            name_kanji?: string;
            owners_provided?: boolean;
            phone?: string;
            structure?:
              | ""
              | "government_instrumentality"
              | "governmental_unit"
              | "incorporated_non_profit"
              | "limited_liability_partnership"
              | "multi_member_llc"
              | "private_company"
              | "private_corporation"
              | "private_partnership"
              | "public_company"
              | "public_corporation"
              | "public_partnership"
              | "sole_proprietorship"
              | "tax_exempt_government_instrumentality"
              | "unincorporated_association"
              | "unincorporated_non_profit";
            tax_id?: string;
            tax_id_registrar?: string;
            vat_id?: string;
            verification?: {
              document?: {
                back?: string;
                front?: string;
              };
            };
          };
          /** Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts). */
          default_currency?: string;
          /** Email address of the account representative. For Standard accounts, this is used to ask them to claim their Stripe account. For Custom accounts, this only makes the account easier to identify to platforms; Stripe does not email the account representative. */
          email?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** A card or bank account to attach to the account. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary, as documented in the `external_account` parameter for [bank account](https://stripe.com/docs/api#account_create_bank_account) creation. <br><br>By default, providing an external account sets it as the new default external account for its currency, and deletes the old default if one exists. To add additional external accounts without replacing the existing default for the currency, use the bank account or card creation API. */
          external_account?: string;
          /** Information about the person represented by the account. This field is null unless `business_type` is set to `individual`. */
          individual?: {
            address?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            address_kana?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
              town?: string;
            };
            address_kanji?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
              town?: string;
            };
            dob?: Partial<{
              day: number;
              month: number;
              year: number;
            }> &
              Partial<"">;
            email?: string;
            first_name?: string;
            first_name_kana?: string;
            first_name_kanji?: string;
            gender?: string;
            id_number?: string;
            last_name?: string;
            last_name_kana?: string;
            last_name_kanji?: string;
            maiden_name?: string;
            metadata?: Partial<{ [key: string]: string }> & Partial<"">;
            phone?: string;
            ssn_last_4?: string;
            verification?: {
              additional_document?: {
                back?: string;
                front?: string;
              };
              document?: {
                back?: string;
                front?: string;
              };
            };
          };
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** The set of capabilities you want to unlock for this account. Each capability will be inactive until you have provided its specific requirements and Stripe has verified them. An account may have some of its requested capabilities be active and some be inactive. */
          requested_capabilities?: (
            | "au_becs_debit_payments"
            | "card_issuing"
            | "card_payments"
            | "legacy_payments"
            | "tax_reporting_us_1099_k"
            | "tax_reporting_us_1099_misc"
            | "transfers"
          )[];
          /** Options for customizing how the account functions within Stripe. */
          settings?: {
            branding?: {
              icon?: string;
              logo?: string;
              primary_color?: string;
              secondary_color?: string;
            };
            card_payments?: {
              decline_on?: {
                avs_failure?: boolean;
                cvc_failure?: boolean;
              };
              statement_descriptor_prefix?: string;
            };
            payments?: {
              statement_descriptor?: string;
              statement_descriptor_kana?: string;
              statement_descriptor_kanji?: string;
            };
            payouts?: {
              debit_negative_balances?: boolean;
              schedule?: {
                delay_days?: Partial<"minimum"> & Partial<number>;
                interval?: "daily" | "manual" | "monthly" | "weekly";
                monthly_anchor?: number;
                weekly_anchor?: "friday" | "monday" | "saturday" | "sunday" | "thursday" | "tuesday" | "wednesday";
              };
              statement_descriptor?: string;
            };
          };
          /** Details on the account's acceptance of the [Stripe Services Agreement](https://stripe.com/docs/connect/updating-accounts#tos-acceptance). */
          tos_acceptance?: {
            date?: number;
            ip?: string;
            user_agent?: string;
          };
        };
      };
    };
  };
  /**
   * <p>With <a href="/docs/connect">Connect</a>, you can delete Custom or Express accounts you manage.</p>
   *
   * <p>Accounts created using test-mode keys can be deleted at any time. Accounts created using live-mode keys can only be deleted once all balances are zero.</p>
   *
   * <p>If you want to delete your own account, use the <a href="https://dashboard.stripe.com/account">account information tab in your account settings</a> instead.</p>
   */
  DeleteAccountsAccount: {
    parameters: {
      path: {
        account: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["deleted_account"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Create an external account for a given account.</p> */
  PostAccountsAccountBankAccounts: {
    parameters: {
      path: {
        account: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["external_account"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details. */
          bank_account?: Partial<{
            account_holder_name?: string;
            account_holder_type?: "company" | "individual";
            account_number: string;
            country: string;
            currency?: string;
            object?: "bank_account";
            routing_number?: string;
          }> &
            Partial<string>;
          /** When set to true, or if this is the first external account added in this currency, this account becomes the default external account for its currency. */
          default_for_currency?: boolean;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Please refer to full [documentation](https://stripe.com/docs/api) instead. */
          external_account?: string;
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: { [key: string]: string };
        };
      };
    };
  };
  /** <p>Retrieve a specified external account for a given account.</p> */
  GetAccountsAccountBankAccountsId: {
    parameters: {
      path: {
        account: string;
        id: string;
      };
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["external_account"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>Updates the metadata, account holder name, and account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>
   * <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
   */
  PostAccountsAccountBankAccountsId: {
    parameters: {
      path: {
        account: string;
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["external_account"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The name of the person or business that owns the bank account. */
          account_holder_name?: string;
          /** The type of entity that holds the account. This can be either `individual` or `company`. */
          account_holder_type?: "" | "company" | "individual";
          /** City/District/Suburb/Town/Village. */
          address_city?: string;
          /** Billing address country, if provided when creating card. */
          address_country?: string;
          /** Address line 1 (Street address/PO Box/Company name). */
          address_line1?: string;
          /** Address line 2 (Apartment/Suite/Unit/Building). */
          address_line2?: string;
          /** State/County/Province/Region. */
          address_state?: string;
          /** ZIP or postal code. */
          address_zip?: string;
          /** When set to true, this becomes the default external account for its currency. */
          default_for_currency?: boolean;
          /** Two digit number representing the card’s expiration month. */
          exp_month?: string;
          /** Four digit number representing the card’s expiration year. */
          exp_year?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** Cardholder name. */
          name?: string;
        };
      };
    };
  };
  /** <p>Delete a specified external account for a given account.</p> */
  DeleteAccountsAccountBankAccountsId: {
    parameters: {
      path: {
        account: string;
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["deleted_external_account"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p> */
  GetAccountsAccountCapabilities: {
    parameters: {
      path: {
        account: string;
      };
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["capability"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Retrieves information about the specified Account Capability.</p> */
  GetAccountsAccountCapabilitiesCapability: {
    parameters: {
      path: {
        account: string;
        capability: string;
      };
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["capability"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Updates an existing Account Capability.</p> */
  PostAccountsAccountCapabilitiesCapability: {
    parameters: {
      path: {
        account: string;
        capability: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["capability"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
          requested?: boolean;
        };
      };
    };
  };
  /** <p>List external accounts for an account.</p> */
  GetAccountsAccountExternalAccounts: {
    parameters: {
      path: {
        account: string;
      };
      query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            /** The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards. */
            data: (Partial<components["schemas"]["bank_account"]> & Partial<components["schemas"]["card"]>)[];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Create an external account for a given account.</p> */
  PostAccountsAccountExternalAccounts: {
    parameters: {
      path: {
        account: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["external_account"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details. */
          bank_account?: Partial<{
            account_holder_name?: string;
            account_holder_type?: "company" | "individual";
            account_number: string;
            country: string;
            currency?: string;
            object?: "bank_account";
            routing_number?: string;
          }> &
            Partial<string>;
          /** When set to true, or if this is the first external account added in this currency, this account becomes the default external account for its currency. */
          default_for_currency?: boolean;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Please refer to full [documentation](https://stripe.com/docs/api) instead. */
          external_account?: string;
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: { [key: string]: string };
        };
      };
    };
  };
  /** <p>Retrieve a specified external account for a given account.</p> */
  GetAccountsAccountExternalAccountsId: {
    parameters: {
      path: {
        account: string;
        id: string;
      };
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["external_account"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>Updates the metadata, account holder name, and account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>
   * <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
   */
  PostAccountsAccountExternalAccountsId: {
    parameters: {
      path: {
        account: string;
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["external_account"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The name of the person or business that owns the bank account. */
          account_holder_name?: string;
          /** The type of entity that holds the account. This can be either `individual` or `company`. */
          account_holder_type?: "" | "company" | "individual";
          /** City/District/Suburb/Town/Village. */
          address_city?: string;
          /** Billing address country, if provided when creating card. */
          address_country?: string;
          /** Address line 1 (Street address/PO Box/Company name). */
          address_line1?: string;
          /** Address line 2 (Apartment/Suite/Unit/Building). */
          address_line2?: string;
          /** State/County/Province/Region. */
          address_state?: string;
          /** ZIP or postal code. */
          address_zip?: string;
          /** When set to true, this becomes the default external account for its currency. */
          default_for_currency?: boolean;
          /** Two digit number representing the card’s expiration month. */
          exp_month?: string;
          /** Four digit number representing the card’s expiration year. */
          exp_year?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** Cardholder name. */
          name?: string;
        };
      };
    };
  };
  /** <p>Delete a specified external account for a given account.</p> */
  DeleteAccountsAccountExternalAccountsId: {
    parameters: {
      path: {
        account: string;
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["deleted_external_account"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>Creates a single-use login link for an Express account to access their Stripe dashboard.</p>
   *
   * <p><strong>You may only create login links for <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
   */
  PostAccountsAccountLoginLinks: {
    parameters: {
      path: {
        account: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["login_link"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Where to redirect the user after they log out of their dashboard. */
          redirect_url?: string;
        };
      };
    };
  };
  /**
   * <p>Invalidates all sessions for a light account, for a platform to use during platform logout.</p>
   *
   * <p><strong>You may only log out <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
   */
  PutAccountsAccountLogout: {
    parameters: {
      path: {
        account: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["light_account_logout"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
        };
      };
    };
  };
  /** <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p> */
  GetAccountsAccountPeople: {
    parameters: {
      path: {
        account: string;
      };
      query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** Filters on the list of people returned based on the person's relationship to the account's company. */
        relationship?: {
          director?: boolean;
          executive?: boolean;
          owner?: boolean;
          representative?: boolean;
        };
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["person"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Creates a new person.</p> */
  PostAccountsAccountPeople: {
    parameters: {
      path: {
        account: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["person"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The person's address. */
          address?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          /** The Kana variation of the person's address (Japan only). */
          address_kana?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          /** The Kanji variation of the person's address (Japan only). */
          address_kanji?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          /** The person's date of birth. */
          dob?: Partial<{
            day: number;
            month: number;
            year: number;
          }> &
            Partial<"">;
          /** The person's email address. */
          email?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** The person's first name. */
          first_name?: string;
          /** The Kana variation of the person's first name (Japan only). */
          first_name_kana?: string;
          /** The Kanji variation of the person's first name (Japan only). */
          first_name_kanji?: string;
          /** The person's gender (International regulations require either "male" or "female"). */
          gender?: string;
          /** The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/stripe.js#collecting-pii-data). */
          id_number?: string;
          /** The person's last name. */
          last_name?: string;
          /** The Kana variation of the person's last name (Japan only). */
          last_name_kana?: string;
          /** The Kanji variation of the person's last name (Japan only). */
          last_name_kanji?: string;
          /** The person's maiden name. */
          maiden_name?: string;
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person. */
          person_token?: string;
          /** The person's phone number. */
          phone?: string;
          /** The relationship that this person has with the account's legal entity. */
          relationship?: {
            director?: boolean;
            executive?: boolean;
            owner?: boolean;
            percent_ownership?: Partial<number> & Partial<"">;
            representative?: boolean;
            title?: string;
          };
          /** The last 4 digits of the person's social security number. */
          ssn_last_4?: string;
          /** The person's verification status. */
          verification?: {
            additional_document?: {
              back?: string;
              front?: string;
            };
            document?: {
              back?: string;
              front?: string;
            };
          };
        };
      };
    };
  };
  /** <p>Retrieves an existing person.</p> */
  GetAccountsAccountPeoplePerson: {
    parameters: {
      path: {
        account: string;
        person: string;
      };
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["person"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Updates an existing person.</p> */
  PostAccountsAccountPeoplePerson: {
    parameters: {
      path: {
        account: string;
        person: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["person"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The person's address. */
          address?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          /** The Kana variation of the person's address (Japan only). */
          address_kana?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          /** The Kanji variation of the person's address (Japan only). */
          address_kanji?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          /** The person's date of birth. */
          dob?: Partial<{
            day: number;
            month: number;
            year: number;
          }> &
            Partial<"">;
          /** The person's email address. */
          email?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** The person's first name. */
          first_name?: string;
          /** The Kana variation of the person's first name (Japan only). */
          first_name_kana?: string;
          /** The Kanji variation of the person's first name (Japan only). */
          first_name_kanji?: string;
          /** The person's gender (International regulations require either "male" or "female"). */
          gender?: string;
          /** The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/stripe.js#collecting-pii-data). */
          id_number?: string;
          /** The person's last name. */
          last_name?: string;
          /** The Kana variation of the person's last name (Japan only). */
          last_name_kana?: string;
          /** The Kanji variation of the person's last name (Japan only). */
          last_name_kanji?: string;
          /** The person's maiden name. */
          maiden_name?: string;
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person. */
          person_token?: string;
          /** The person's phone number. */
          phone?: string;
          /** The relationship that this person has with the account's legal entity. */
          relationship?: {
            director?: boolean;
            executive?: boolean;
            owner?: boolean;
            percent_ownership?: Partial<number> & Partial<"">;
            representative?: boolean;
            title?: string;
          };
          /** The last 4 digits of the person's social security number. */
          ssn_last_4?: string;
          /** The person's verification status. */
          verification?: {
            additional_document?: {
              back?: string;
              front?: string;
            };
            document?: {
              back?: string;
              front?: string;
            };
          };
        };
      };
    };
  };
  /** <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p> */
  DeleteAccountsAccountPeoplePerson: {
    parameters: {
      path: {
        account: string;
        person: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["deleted_person"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p> */
  GetAccountsAccountPersons: {
    parameters: {
      path: {
        account: string;
      };
      query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** Filters on the list of people returned based on the person's relationship to the account's company. */
        relationship?: {
          director?: boolean;
          executive?: boolean;
          owner?: boolean;
          representative?: boolean;
        };
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["person"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Creates a new person.</p> */
  PostAccountsAccountPersons: {
    parameters: {
      path: {
        account: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["person"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The person's address. */
          address?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          /** The Kana variation of the person's address (Japan only). */
          address_kana?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          /** The Kanji variation of the person's address (Japan only). */
          address_kanji?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          /** The person's date of birth. */
          dob?: Partial<{
            day: number;
            month: number;
            year: number;
          }> &
            Partial<"">;
          /** The person's email address. */
          email?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** The person's first name. */
          first_name?: string;
          /** The Kana variation of the person's first name (Japan only). */
          first_name_kana?: string;
          /** The Kanji variation of the person's first name (Japan only). */
          first_name_kanji?: string;
          /** The person's gender (International regulations require either "male" or "female"). */
          gender?: string;
          /** The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/stripe.js#collecting-pii-data). */
          id_number?: string;
          /** The person's last name. */
          last_name?: string;
          /** The Kana variation of the person's last name (Japan only). */
          last_name_kana?: string;
          /** The Kanji variation of the person's last name (Japan only). */
          last_name_kanji?: string;
          /** The person's maiden name. */
          maiden_name?: string;
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person. */
          person_token?: string;
          /** The person's phone number. */
          phone?: string;
          /** The relationship that this person has with the account's legal entity. */
          relationship?: {
            director?: boolean;
            executive?: boolean;
            owner?: boolean;
            percent_ownership?: Partial<number> & Partial<"">;
            representative?: boolean;
            title?: string;
          };
          /** The last 4 digits of the person's social security number. */
          ssn_last_4?: string;
          /** The person's verification status. */
          verification?: {
            additional_document?: {
              back?: string;
              front?: string;
            };
            document?: {
              back?: string;
              front?: string;
            };
          };
        };
      };
    };
  };
  /** <p>Retrieves an existing person.</p> */
  GetAccountsAccountPersonsPerson: {
    parameters: {
      path: {
        account: string;
        person: string;
      };
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["person"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Updates an existing person.</p> */
  PostAccountsAccountPersonsPerson: {
    parameters: {
      path: {
        account: string;
        person: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["person"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The person's address. */
          address?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          /** The Kana variation of the person's address (Japan only). */
          address_kana?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          /** The Kanji variation of the person's address (Japan only). */
          address_kanji?: {
            city?: string;
            country?: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
            town?: string;
          };
          /** The person's date of birth. */
          dob?: Partial<{
            day: number;
            month: number;
            year: number;
          }> &
            Partial<"">;
          /** The person's email address. */
          email?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** The person's first name. */
          first_name?: string;
          /** The Kana variation of the person's first name (Japan only). */
          first_name_kana?: string;
          /** The Kanji variation of the person's first name (Japan only). */
          first_name_kanji?: string;
          /** The person's gender (International regulations require either "male" or "female"). */
          gender?: string;
          /** The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/stripe.js#collecting-pii-data). */
          id_number?: string;
          /** The person's last name. */
          last_name?: string;
          /** The Kana variation of the person's last name (Japan only). */
          last_name_kana?: string;
          /** The Kanji variation of the person's last name (Japan only). */
          last_name_kanji?: string;
          /** The person's maiden name. */
          maiden_name?: string;
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person. */
          person_token?: string;
          /** The person's phone number. */
          phone?: string;
          /** The relationship that this person has with the account's legal entity. */
          relationship?: {
            director?: boolean;
            executive?: boolean;
            owner?: boolean;
            percent_ownership?: Partial<number> & Partial<"">;
            representative?: boolean;
            title?: string;
          };
          /** The last 4 digits of the person's social security number. */
          ssn_last_4?: string;
          /** The person's verification status. */
          verification?: {
            additional_document?: {
              back?: string;
              front?: string;
            };
            document?: {
              back?: string;
              front?: string;
            };
          };
        };
      };
    };
  };
  /** <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p> */
  DeleteAccountsAccountPersonsPerson: {
    parameters: {
      path: {
        account: string;
        person: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["deleted_person"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>With <a href="/docs/connect">Connect</a>, you may flag accounts as suspicious.</p>
   *
   * <p>Test-mode Custom and Express accounts can be rejected at any time. Accounts created using live-mode keys may only be rejected once all balances are zero.</p>
   */
  PostAccountsAccountReject: {
    parameters: {
      path: {
        account: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["account"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** The reason for rejecting the account. Can be `fraud`, `terms_of_service`, or `other`. */
          reason: string;
        };
      };
    };
  };
  /** <p>List apple pay domains.</p> */
  GetApplePayDomains: {
    parameters: {
      query: {
        domain_name?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["apple_pay_domain"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Create an apple pay domain.</p> */
  PostApplePayDomains: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["apple_pay_domain"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          domain_name: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
        };
      };
    };
  };
  /** <p>Retrieve an apple pay domain.</p> */
  GetApplePayDomainsDomain: {
    parameters: {
      path: {
        domain: string;
      };
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["apple_pay_domain"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Delete an apple pay domain.</p> */
  DeleteApplePayDomainsDomain: {
    parameters: {
      path: {
        domain: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["deleted_apple_pay_domain"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Returns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.</p> */
  GetApplicationFees: {
    parameters: {
      query: {
        /** Only return application fees for the charge specified by this charge ID. */
        charge?: string;
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["application_fee"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>By default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.</p> */
  GetApplicationFeesFeeRefundsId: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        fee: string;
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["fee_refund"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>Updates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * <p>This request only accepts metadata as an argument.</p>
   */
  PostApplicationFeesFeeRefundsId: {
    parameters: {
      path: {
        fee: string;
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["fee_refund"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
        };
      };
    };
  };
  /** <p>Retrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.</p> */
  GetApplicationFeesId: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["application_fee"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  PostApplicationFeesIdRefund: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["application_fee"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          amount?: number;
          directive?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
        };
      };
    };
  };
  /** <p>You can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p> */
  GetApplicationFeesIdRefunds: {
    parameters: {
      query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            /** Details about each object. */
            data: components["schemas"]["fee_refund"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>Refunds an application fee that has previously been collected but not yet refunded.
   * Funds will be refunded to the Stripe account from which the fee was originally collected.</p>
   *
   * <p>You can optionally refund only part of an application fee.
   * You can do so multiple times, until the entire fee has been refunded.</p>
   *
   * <p>Once entirely refunded, an application fee can’t be refunded again.
   * This method will raise an error when called on an already-refunded application fee,
   * or when trying to refund more money than is left on an application fee.</p>
   */
  PostApplicationFeesIdRefunds: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["fee_refund"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** A positive integer, in _%s_, representing how much of this fee to refund. Can refund only up to the remaining unrefunded amount of the fee. */
          amount?: number;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: { [key: string]: string };
        };
      };
    };
  };
  /**
   * <p>Retrieves the current account balance, based on the authentication that was used to make the request.
   *  For a sample request, see <a href="/docs/connect/account-balances#accounting-for-negative-balances">Accounting for negative balances</a>.</p>
   */
  GetBalance: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["balance"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>
   *
   * <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
   */
  GetBalanceHistory: {
    parameters: {
      query: {
        available_on?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** Only return transactions in a certain currency. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
        currency?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** For automatic Stripe payouts only, only returns transactions that were paid out on the specified payout ID. */
        payout?: string;
        /** Only returns the original transaction. */
        source?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
        /** Only returns transactions of the given type. One of: `charge`, `refund`, `adjustment`, `application_fee`, `application_fee_refund`, `transfer`, `payment`, `payout`, `payout_failure`, `stripe_fee`, or `network_cost`. */
        type?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["balance_transaction"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>Retrieves the balance transaction with the given ID.</p>
   *
   * <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
   */
  GetBalanceHistoryId: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["balance_transaction"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>
   *
   * <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
   */
  GetBalanceTransactions: {
    parameters: {
      query: {
        available_on?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** Only return transactions in a certain currency. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
        currency?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** For automatic Stripe payouts only, only returns transactions that were paid out on the specified payout ID. */
        payout?: string;
        /** Only returns the original transaction. */
        source?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
        /** Only returns transactions of the given type. One of: `charge`, `refund`, `adjustment`, `application_fee`, `application_fee_refund`, `transfer`, `payment`, `payout`, `payout_failure`, `stripe_fee`, or `network_cost`. */
        type?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["balance_transaction"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>Retrieves the balance transaction with the given ID.</p>
   *
   * <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
   */
  GetBalanceTransactionsId: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["balance_transaction"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Creates a session of the Self-service Portal.</p> */
  PostBillingPortalSessions: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["billing_portal.session"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The ID of an existing customer. */
          customer: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** The URL to which Stripe should send customers when they click on the link to return to your website. This field is required if a default return URL has not been configured for the portal. */
          return_url?: string;
        };
      };
    };
  };
  /** <p>Returns a list of your receivers. Receivers are returned sorted by creation date, with the most recently created receivers appearing first.</p> */
  GetBitcoinReceivers: {
    parameters: {
      query: {
        /** Filter for active receivers. */
        active?: boolean;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** Filter for filled receivers. */
        filled?: boolean;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
        /** Filter for receivers with uncaptured funds. */
        uncaptured_funds?: boolean;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["bitcoin_receiver"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Retrieves the Bitcoin receiver with the given ID.</p> */
  GetBitcoinReceiversId: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["bitcoin_receiver"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>List bitcoin transacitons for a given receiver.</p> */
  GetBitcoinReceiversReceiverTransactions: {
    parameters: {
      query: {
        /** Only return transactions for the customer specified by this customer ID. */
        customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
      path: {
        receiver: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            /** Details about each object. */
            data: components["schemas"]["bitcoin_transaction"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>List bitcoin transacitons for a given receiver.</p> */
  GetBitcoinTransactions: {
    parameters: {
      query: {
        /** Only return transactions for the customer specified by this customer ID. */
        customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        receiver?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            /** Details about each object. */
            data: components["schemas"]["bitcoin_transaction"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.</p> */
  GetCharges: {
    parameters: {
      query: {
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** Only return charges for the customer specified by this customer ID. */
        customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** Only return charges that were created by the PaymentIntent specified by this PaymentIntent ID. */
        payment_intent?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
        /** Only return charges for this transfer group. */
        transfer_group?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["charge"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>To charge a credit card or other payment source, you create a <code>Charge</code> object. If your API key is in test mode, the supplied payment source (e.g., card) won’t actually be charged, although everything else will occur as if in live mode. (Stripe assumes that the charge would have completed successfully).</p> */
  PostCharges: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["charge"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
          amount?: number;
          application_fee?: number;
          /** A fee in %s that will be applied to the charge and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the `Stripe-Account` header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees). */
          application_fee_amount?: number;
          /** Whether to immediately capture the charge. Defaults to `true`. When `false`, the charge issues an authorization (or pre-authorization), and will need to be [captured](https://stripe.com/docs/api#capture_charge) later. Uncaptured charges expire in _seven days_. For more information, see the [authorizing charges and settling later](https://stripe.com/docs/charges/placing-a-hold) documentation. */
          capture?: boolean;
          /** A token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js). */
          card?: Partial<{
            address_city?: string;
            address_country?: string;
            address_line1?: string;
            address_line2?: string;
            address_state?: string;
            address_zip?: string;
            cvc?: string;
            exp_month: number;
            exp_year: number;
            metadata?: { [key: string]: string };
            name?: string;
            number: string;
            object?: "card";
          }> &
            Partial<string>;
          /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          currency?: string;
          /** The ID of an existing customer that will be charged in this request. */
          customer?: string;
          /** An arbitrary string which you can attach to a `Charge` object. It is displayed when in the web interface alongside the charge. Note that if you use Stripe to send automatic email receipts to your customers, your receipt emails will include the `description` of the charge(s) that they are describing. */
          description?: string;
          destination?: Partial<{
            account: string;
            amount?: number;
          }> &
            Partial<string>;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** The Stripe account ID for which these funds are intended. Automatically set if you use the `destination` parameter. For details, see [Creating Separate Charges and Transfers](https://stripe.com/docs/connect/charges-transfers#on-behalf-of). */
          on_behalf_of?: string;
          /** The email address to which this charge's [receipt](https://stripe.com/docs/dashboard/receipts) will be sent. The receipt will not be sent until the charge is paid, and no receipts will be sent for test mode charges. If this charge is for a [Customer](https://stripe.com/docs/api/customers/object), the email address specified here will override the customer's email address. If `receipt_email` is specified for a charge in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails). */
          receipt_email?: string;
          /** Shipping information for the charge. Helps prevent fraud on charges for physical goods. */
          shipping?: {
            address: {
              city?: string;
              country?: string;
              line1: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            carrier?: string;
            name: string;
            phone?: string;
            tracking_number?: string;
          };
          /** A payment source to be charged. This can be the ID of a [card](https://stripe.com/docs/api#cards) (i.e., credit or debit card), a [bank account](https://stripe.com/docs/api#bank_accounts), a [source](https://stripe.com/docs/api#sources), a [token](https://stripe.com/docs/api#tokens), or a [connected account](https://stripe.com/docs/connect/account-debits#charging-a-connected-account). For certain sources---namely, [cards](https://stripe.com/docs/api#cards), [bank accounts](https://stripe.com/docs/api#bank_accounts), and attached [sources](https://stripe.com/docs/api#sources)---you must also pass the ID of the associated customer. */
          source?: string;
          /** For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customers’ statements. Must contain at least one letter, maximum 22 characters. */
          statement_descriptor?: string;
          /** Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
          statement_descriptor_suffix?: string;
          /** An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details. */
          transfer_data?: {
            amount?: number;
            destination: string;
          };
          /** A string that identifies this transaction as part of a group. For details, see [Grouping transactions](https://stripe.com/docs/connect/charges-transfers#transfer-options). */
          transfer_group?: string;
        };
      };
    };
  };
  /** <p>Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.</p> */
  GetChargesCharge: {
    parameters: {
      path: {
        charge: string;
      };
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["charge"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
  PostChargesCharge: {
    parameters: {
      path: {
        charge: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["charge"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The ID of an existing customer that will be associated with this request. This field may only be updated if there is no existing associated customer with this charge. */
          customer?: string;
          /** An arbitrary string which you can attach to a charge object. It is displayed when in the web interface alongside the charge. Note that if you use Stripe to send automatic email receipts to your customers, your receipt emails will include the `description` of the charge(s) that they are describing. */
          description?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** A set of key-value pairs you can attach to a charge giving information about its riskiness. If you believe a charge is fraudulent, include a `user_report` key with a value of `fraudulent`. If you believe a charge is safe, include a `user_report` key with a value of `safe`. Stripe will use the information you send to improve our fraud detection algorithms. */
          fraud_details?: {
            user_report: "" | "fraudulent" | "safe";
          };
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** This is the email address that the receipt for this charge will be sent to. If this field is updated, then a new email receipt will be sent to the updated address. */
          receipt_email?: string;
          /** Shipping information for the charge. Helps prevent fraud on charges for physical goods. */
          shipping?: {
            address: {
              city?: string;
              country?: string;
              line1: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            carrier?: string;
            name: string;
            phone?: string;
            tracking_number?: string;
          };
          /** A string that identifies this transaction as part of a group. `transfer_group` may only be provided if it has not been set. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details. */
          transfer_group?: string;
        };
      };
    };
  };
  /**
   * <p>Capture the payment of an existing, uncaptured, charge. This is the second half of the two-step payment flow, where first you <a href="#create_charge">created a charge</a> with the capture option set to false.</p>
   *
   * <p>Uncaptured payments expire exactly seven days after they are created. If they are not captured by that point in time, they will be marked as refunded and will no longer be capturable.</p>
   */
  PostChargesChargeCapture: {
    parameters: {
      path: {
        charge: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["charge"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The amount to capture, which must be less than or equal to the original amount. Any additional amount will be automatically refunded. */
          amount?: number;
          /** An application fee to add on to this charge. */
          application_fee?: number;
          /** An application fee amount to add on to this charge, which must be less than or equal to the original amount. */
          application_fee_amount?: number;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** The email address to send this charge's receipt to. This will override the previously-specified email address for this charge, if one was set. Receipts will not be sent in test mode. */
          receipt_email?: string;
          /** For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customers’ statements. Must contain at least one letter, maximum 22 characters. */
          statement_descriptor?: string;
          /** Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
          statement_descriptor_suffix?: string;
          /** An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details. */
          transfer_data?: {
            amount?: number;
          };
          /** A string that identifies this transaction as part of a group. `transfer_group` may only be provided if it has not been set. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details. */
          transfer_group?: string;
        };
      };
    };
  };
  /** <p>Retrieve a dispute for a specified charge.</p> */
  GetChargesChargeDispute: {
    parameters: {
      path: {
        charge: string;
      };
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["dispute"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  PostChargesChargeDispute: {
    parameters: {
      path: {
        charge: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["dispute"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Evidence to upload, to respond to a dispute. Updating any field in the hash will submit all fields in the hash for review. The combined character count of all fields is limited to 150,000. */
          evidence?: {
            access_activity_log?: string;
            billing_address?: string;
            cancellation_policy?: string;
            cancellation_policy_disclosure?: string;
            cancellation_rebuttal?: string;
            customer_communication?: string;
            customer_email_address?: string;
            customer_name?: string;
            customer_purchase_ip?: string;
            customer_signature?: string;
            duplicate_charge_documentation?: string;
            duplicate_charge_explanation?: string;
            duplicate_charge_id?: string;
            product_description?: string;
            receipt?: string;
            refund_policy?: string;
            refund_policy_disclosure?: string;
            refund_refusal_explanation?: string;
            service_date?: string;
            service_documentation?: string;
            shipping_address?: string;
            shipping_carrier?: string;
            shipping_date?: string;
            shipping_documentation?: string;
            shipping_tracking_number?: string;
            uncategorized_file?: string;
            uncategorized_text?: string;
          };
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** Whether to immediately submit evidence to the bank. If `false`, evidence is staged on the dispute. Staged evidence is visible in the API and Dashboard, and can be submitted to the bank by making another request with this attribute set to `true` (the default). */
          submit?: boolean;
        };
      };
    };
  };
  PostChargesChargeDisputeClose: {
    parameters: {
      path: {
        charge: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["dispute"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
        };
      };
    };
  };
  /**
   * <p>When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.</p>
   *
   * <p>Creating a new refund will refund a charge that has previously been created but not yet refunded.
   * Funds will be refunded to the credit or debit card that was originally charged.</p>
   *
   * <p>You can optionally refund only part of a charge.
   * You can do so multiple times, until the entire charge has been refunded.</p>
   *
   * <p>Once entirely refunded, a charge can’t be refunded again.
   * This method will raise an error when called on an already-refunded charge,
   * or when trying to refund more money than is left on a charge.</p>
   */
  PostChargesChargeRefund: {
    parameters: {
      path: {
        charge: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["charge"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          amount?: number;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          payment_intent?: string;
          reason?: "duplicate" | "fraudulent" | "requested_by_customer";
          refund_application_fee?: boolean;
          reverse_transfer?: boolean;
        };
      };
    };
  };
  /** <p>You can see a list of the refunds belonging to a specific charge. Note that the 10 most recent refunds are always available by default on the charge object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p> */
  GetChargesChargeRefunds: {
    parameters: {
      path: {
        charge: string;
      };
      query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            /** Details about each object. */
            data: components["schemas"]["refund"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Create a refund.</p> */
  PostChargesChargeRefunds: {
    parameters: {
      path: {
        charge: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["refund"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          amount?: number;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          payment_intent?: string;
          reason?: "duplicate" | "fraudulent" | "requested_by_customer";
          refund_application_fee?: boolean;
          reverse_transfer?: boolean;
        };
      };
    };
  };
  /** <p>Retrieves the details of an existing refund.</p> */
  GetChargesChargeRefundsRefund: {
    parameters: {
      path: {
        charge: string;
        refund: string;
      };
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["refund"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Update a specified refund.</p> */
  PostChargesChargeRefundsRefund: {
    parameters: {
      path: {
        charge: string;
        refund: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["refund"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
        };
      };
    };
  };
  /** <p>Returns a list of Checkout Sessions.</p> */
  GetCheckoutSessions: {
    parameters: {
      query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** Only return the Checkout Session for the PaymentIntent specified. */
        payment_intent?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
        /** Only return the Checkout Session for the subscription specified. */
        subscription?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["checkout.session"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Creates a Session object.</p> */
  PostCheckoutSessions: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["checkout.session"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specify whether Checkout should collect the customer's billing address. */
          billing_address_collection?: "auto" | "required";
          /** The URL the customer will be directed to if they decide to cancel payment and return to your website. */
          cancel_url: string;
          /**
           * A unique string to reference the Checkout Session. This can be a
           * customer ID, a cart ID, or similar, and can be used to reconcile the
           * session with your internal systems.
           */
          client_reference_id?: string;
          /**
           * ID of an existing customer, if one exists. The email stored on the
           * customer will be used to prefill the email field on the Checkout page.
           * If the customer changes their email on the Checkout page, the Customer
           * object will be updated with the new email.
           * If blank for Checkout Sessions in `payment` or `subscription` mode,
           * Checkout will create a new customer object based on information
           * provided during the session.
           */
          customer?: string;
          /**
           * If provided, this value will be used when the Customer object is created.
           * If not provided, customers will be asked to enter their email address.
           * Use this parameter to prefill customer data if you already have an email
           * on file. To access information about the customer once a session is
           * complete, use the `customer` field.
           */
          customer_email?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /**
           * A list of items the customer is purchasing. Use this parameter for
           * one-time payments or adding invoice line items to a subscription (used
           * in conjunction with `subscription_data`).
           */
          line_items?: {
            amount?: number;
            currency?: string;
            description?: string;
            images?: string[];
            name?: string;
            quantity: number;
            tax_rates?: string[];
          }[];
          /** The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used. */
          locale?:
            | "auto"
            | "da"
            | "de"
            | "en"
            | "es"
            | "fi"
            | "fr"
            | "it"
            | "ja"
            | "ms"
            | "nb"
            | "nl"
            | "pl"
            | "pt"
            | "pt-BR"
            | "sv"
            | "zh";
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: { [key: string]: string };
          /** The mode of the Checkout Session, one of `payment`, `setup`, or `subscription`. */
          mode?: "payment" | "setup" | "subscription";
          /** A subset of parameters to be passed to PaymentIntent creation for Checkout Sessions in `payment` mode. */
          payment_intent_data?: {
            application_fee_amount?: number;
            capture_method?: "automatic" | "manual";
            description?: string;
            metadata?: { [key: string]: string };
            on_behalf_of?: string;
            receipt_email?: string;
            setup_future_usage?: "off_session" | "on_session";
            shipping?: {
              address: {
                city?: string;
                country?: string;
                line1: string;
                line2?: string;
                postal_code?: string;
                state?: string;
              };
              carrier?: string;
              name: string;
              phone?: string;
              tracking_number?: string;
            };
            statement_descriptor?: string;
            statement_descriptor_suffix?: string;
            transfer_data?: {
              amount?: number;
              destination: string;
            };
          };
          /** A list of the types of payment methods (e.g., card) this Checkout session can accept. */
          payment_method_types: ("card" | "fpx" | "ideal")[];
          /** A subset of parameters to be passed to SetupIntent creation for Checkout Sessions in `setup` mode. */
          setup_intent_data?: {
            description?: string;
            metadata?: { [key: string]: string };
            on_behalf_of?: string;
          };
          /** When set, provides configuration for Checkout to collect a shipping address from a customer. */
          shipping_address_collection?: {
            allowed_countries: (
              | "AC"
              | "AD"
              | "AE"
              | "AF"
              | "AG"
              | "AI"
              | "AL"
              | "AM"
              | "AO"
              | "AQ"
              | "AR"
              | "AT"
              | "AU"
              | "AW"
              | "AX"
              | "AZ"
              | "BA"
              | "BB"
              | "BD"
              | "BE"
              | "BF"
              | "BG"
              | "BH"
              | "BI"
              | "BJ"
              | "BL"
              | "BM"
              | "BN"
              | "BO"
              | "BQ"
              | "BR"
              | "BS"
              | "BT"
              | "BV"
              | "BW"
              | "BY"
              | "BZ"
              | "CA"
              | "CD"
              | "CF"
              | "CG"
              | "CH"
              | "CI"
              | "CK"
              | "CL"
              | "CM"
              | "CN"
              | "CO"
              | "CR"
              | "CV"
              | "CW"
              | "CY"
              | "CZ"
              | "DE"
              | "DJ"
              | "DK"
              | "DM"
              | "DO"
              | "DZ"
              | "EC"
              | "EE"
              | "EG"
              | "EH"
              | "ER"
              | "ES"
              | "ET"
              | "FI"
              | "FJ"
              | "FK"
              | "FO"
              | "FR"
              | "GA"
              | "GB"
              | "GD"
              | "GE"
              | "GF"
              | "GG"
              | "GH"
              | "GI"
              | "GL"
              | "GM"
              | "GN"
              | "GP"
              | "GQ"
              | "GR"
              | "GS"
              | "GT"
              | "GU"
              | "GW"
              | "GY"
              | "HK"
              | "HN"
              | "HR"
              | "HT"
              | "HU"
              | "ID"
              | "IE"
              | "IL"
              | "IM"
              | "IN"
              | "IO"
              | "IQ"
              | "IS"
              | "IT"
              | "JE"
              | "JM"
              | "JO"
              | "JP"
              | "KE"
              | "KG"
              | "KH"
              | "KI"
              | "KM"
              | "KN"
              | "KR"
              | "KW"
              | "KY"
              | "KZ"
              | "LA"
              | "LB"
              | "LC"
              | "LI"
              | "LK"
              | "LR"
              | "LS"
              | "LT"
              | "LU"
              | "LV"
              | "LY"
              | "MA"
              | "MC"
              | "MD"
              | "ME"
              | "MF"
              | "MG"
              | "MK"
              | "ML"
              | "MM"
              | "MN"
              | "MO"
              | "MQ"
              | "MR"
              | "MS"
              | "MT"
              | "MU"
              | "MV"
              | "MW"
              | "MX"
              | "MY"
              | "MZ"
              | "NA"
              | "NC"
              | "NE"
              | "NG"
              | "NI"
              | "NL"
              | "NO"
              | "NP"
              | "NR"
              | "NU"
              | "NZ"
              | "OM"
              | "PA"
              | "PE"
              | "PF"
              | "PG"
              | "PH"
              | "PK"
              | "PL"
              | "PM"
              | "PN"
              | "PR"
              | "PS"
              | "PT"
              | "PY"
              | "QA"
              | "RE"
              | "RO"
              | "RS"
              | "RU"
              | "RW"
              | "SA"
              | "SB"
              | "SC"
              | "SE"
              | "SG"
              | "SH"
              | "SI"
              | "SJ"
              | "SK"
              | "SL"
              | "SM"
              | "SN"
              | "SO"
              | "SR"
              | "SS"
              | "ST"
              | "SV"
              | "SX"
              | "SZ"
              | "TA"
              | "TC"
              | "TD"
              | "TF"
              | "TG"
              | "TH"
              | "TJ"
              | "TK"
              | "TL"
              | "TM"
              | "TN"
              | "TO"
              | "TR"
              | "TT"
              | "TV"
              | "TW"
              | "TZ"
              | "UA"
              | "UG"
              | "US"
              | "UY"
              | "UZ"
              | "VA"
              | "VC"
              | "VE"
              | "VG"
              | "VN"
              | "VU"
              | "WF"
              | "WS"
              | "XK"
              | "YE"
              | "YT"
              | "ZA"
              | "ZM"
              | "ZW"
              | "ZZ"
            )[];
          };
          /**
           * Describes the type of transaction being performed by Checkout in order to customize
           * relevant text on the page, such as the submit button. `submit_type` can only be
           * specified on Checkout Sessions in `payment` mode, but not Checkout Sessions
           * in `subscription` or `setup` mode.
           */
          submit_type?: "auto" | "book" | "donate" | "pay";
          /** A subset of parameters to be passed to subscription creation for Checkout Sessions in `subscription` mode. */
          subscription_data?: {
            application_fee_percent?: number;
            default_tax_rates?: string[];
            items?: {
              plan: string;
              quantity?: number;
              tax_rates?: string[];
            }[];
            metadata?: { [key: string]: string };
            trial_end?: number;
            trial_from_plan?: boolean;
            trial_period_days?: number;
          };
          /**
           * The URL to which Stripe should send customers when payment or setup
           * is complete.
           * If you’d like access to the Checkout Session for the successful
           * payment, read more about it in our guide on [fulfilling your payments
           * with webhooks](/docs/payments/checkout/fulfillment#webhooks).
           */
          success_url: string;
        };
      };
    };
  };
  /** <p>Retrieves a Session object.</p> */
  GetCheckoutSessionsSession: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        session: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["checkout.session"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Lists all Country Spec objects available in the API.</p> */
  GetCountrySpecs: {
    parameters: {
      query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["country_spec"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Returns a Country Spec for a given Country code.</p> */
  GetCountrySpecsCountry: {
    parameters: {
      path: {
        country: string;
      };
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["country_spec"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Returns a list of your coupons.</p> */
  GetCoupons: {
    parameters: {
      query: {
        /** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["coupon"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>You can create coupons easily via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.</p>
   *
   * <p>A coupon has either a <code>percent_off</code> or an <code>amount_off</code> and <code>currency</code>. If you set an <code>amount_off</code>, that amount will be subtracted from any invoice’s subtotal. For example, an invoice with a subtotal of <currency>100</currency> will have a final total of <currency>0</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it and an invoice with a subtotal of <currency>300</currency> will have a final total of <currency>100</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it.</p>
   */
  PostCoupons: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["coupon"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** A positive integer representing the amount to subtract from an invoice total (required if `percent_off` is not passed). */
          amount_off?: number;
          /** Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the `amount_off` parameter (required if `amount_off` is passed). */
          currency?: string;
          /** Specifies how long the discount will be in effect. Can be `forever`, `once`, or `repeating`. */
          duration: "forever" | "once" | "repeating";
          /** Required only if `duration` is `repeating`, in which case it must be a positive integer that specifies the number of months the discount will be in effect. */
          duration_in_months?: number;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Unique string of your choice that will be used to identify this coupon when applying it to a customer. This is often a specific code you'll give to your customer to use when signing up (e.g., `FALL25OFF`). If you don't want to specify a particular code, you can leave the ID blank and we'll generate a random code for you. */
          id?: string;
          /** A positive integer specifying the number of times the coupon can be redeemed before it's no longer valid. For example, you might have a 50% off coupon that the first 20 readers of your blog can use. */
          max_redemptions?: number;
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** Name of the coupon displayed to customers on, for instance invoices, or receipts. By default the `id` is shown if `name` is not set. */
          name?: string;
          /** A positive float larger than 0, and smaller or equal to 100, that represents the discount the coupon will apply (required if `amount_off` is not passed). */
          percent_off?: number;
          /** Unix timestamp specifying the last time at which the coupon can be redeemed. After the redeem_by date, the coupon can no longer be applied to new customers. */
          redeem_by?: number;
        };
      };
    };
  };
  /** <p>Retrieves the coupon with the given ID.</p> */
  GetCouponsCoupon: {
    parameters: {
      path: {
        coupon: string;
      };
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["coupon"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not editable.</p> */
  PostCouponsCoupon: {
    parameters: {
      path: {
        coupon: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["coupon"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** Name of the coupon displayed to customers on, for instance invoices, or receipts. By default the `id` is shown if `name` is not set. */
          name?: string;
        };
      };
    };
  };
  /** <p>You can delete coupons via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means that new customers can’t redeem the coupon. You can also delete coupons via the API.</p> */
  DeleteCouponsCoupon: {
    parameters: {
      path: {
        coupon: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["deleted_coupon"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Returns a list of credit notes.</p> */
  GetCreditNotes: {
    parameters: {
      query: {
        /** Only return credit notes for the customer specified by this customer ID. */
        customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** Only return credit notes for the invoice specified by this invoice ID. */
        invoice?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["credit_note"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>Issue a credit note to adjust the amount of a finalized invoice. For a <code>status=open</code> invoice, a credit note reduces
   * its <code>amount_due</code>. For a <code>status=paid</code> invoice, a credit note does not affect its <code>amount_due</code>. Instead, it can result
   * in any combination of the following:</p>
   *
   * <ul>
   *  <li>Refund: create a new refund (using <code>refund_amount</code>) or link an existing refund (using <code>refund</code>).</li>
   *  <li>Customer balance credit: credit the customer’s balance (using <code>credit_amount</code>) which will be automatically applied to their next invoice when it’s finalized.</li>
   *  <li>Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using <code>out_of_band_amount</code>).</li>
   * </ul>
   *
   * <p>For post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.</p>
   *
   * <p>You may issue multiple credit notes for an invoice. Each credit note will increment the invoice’s <code>pre_payment_credit_notes_amount</code>
   * or <code>post_payment_credit_notes_amount</code> depending on its <code>status</code> at the time of credit note creation.</p>
   */
  PostCreditNotes: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["credit_note"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The integer amount in **%s** representing the total amount of the credit note. */
          amount?: number;
          /** The integer amount in **%s** representing the amount to credit the customer's balance, which will be automatically applied to their next invoice. */
          credit_amount?: number;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** ID of the invoice. */
          invoice: string;
          /** Line items that make up the credit note. */
          lines?: {
            amount?: number;
            description?: string;
            invoice_line_item?: string;
            quantity?: number;
            tax_rates?: Partial<string[]> & Partial<"">;
            type: "custom_line_item" | "invoice_line_item";
            unit_amount?: number;
            unit_amount_decimal?: string;
          }[];
          /** The credit note's memo appears on the credit note PDF. */
          memo?: string;
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: { [key: string]: string };
          /** The integer amount in **%s** representing the amount that is credited outside of Stripe. */
          out_of_band_amount?: number;
          /** Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory` */
          reason?: "duplicate" | "fraudulent" | "order_change" | "product_unsatisfactory";
          /** ID of an existing refund to link this credit note to. */
          refund?: string;
          /** The integer amount in **%s** representing the amount to refund. If set, a refund will be created for the charge associated with the invoice. */
          refund_amount?: number;
        };
      };
    };
  };
  /** <p>Get a preview of a credit note without creating it.</p> */
  GetCreditNotesPreview: {
    parameters: {
      query: {
        /** The integer amount in **%s** representing the total amount of the credit note. */
        amount?: number;
        /** The integer amount in **%s** representing the amount to credit the customer's balance, which will be automatically applied to their next invoice. */
        credit_amount?: number;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** ID of the invoice. */
        invoice: string;
        /** Line items that make up the credit note. */
        lines?: {
          amount?: number;
          description?: string;
          invoice_line_item?: string;
          quantity?: number;
          tax_rates?: Partial<string[]> & Partial<"">;
          type: "custom_line_item" | "invoice_line_item";
          unit_amount?: number;
          unit_amount_decimal?: string;
        }[];
        /** The credit note's memo appears on the credit note PDF. */
        memo?: string;
        /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
        metadata?: { [key: string]: string };
        /** The integer amount in **%s** representing the amount that is credited outside of Stripe. */
        out_of_band_amount?: number;
        /** Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory` */
        reason?: "duplicate" | "fraudulent" | "order_change" | "product_unsatisfactory";
        /** ID of an existing refund to link this credit note to. */
        refund?: string;
        /** The integer amount in **%s** representing the amount to refund. If set, a refund will be created for the charge associated with the invoice. */
        refund_amount?: number;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["credit_note"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>When retrieving a credit note preview, you’ll get a <strong>lines</strong> property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.</p> */
  GetCreditNotesPreviewLines: {
    parameters: {
      query: {
        /** The integer amount in **%s** representing the total amount of the credit note. */
        amount?: number;
        /** The integer amount in **%s** representing the amount to credit the customer's balance, which will be automatically applied to their next invoice. */
        credit_amount?: number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** ID of the invoice. */
        invoice: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** Line items that make up the credit note. */
        lines?: {
          amount?: number;
          description?: string;
          invoice_line_item?: string;
          quantity?: number;
          tax_rates?: Partial<string[]> & Partial<"">;
          type: "custom_line_item" | "invoice_line_item";
          unit_amount?: number;
          unit_amount_decimal?: string;
        }[];
        /** The credit note's memo appears on the credit note PDF. */
        memo?: string;
        /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
        metadata?: { [key: string]: string };
        /** The integer amount in **%s** representing the amount that is credited outside of Stripe. */
        out_of_band_amount?: number;
        /** Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory` */
        reason?: "duplicate" | "fraudulent" | "order_change" | "product_unsatisfactory";
        /** ID of an existing refund to link this credit note to. */
        refund?: string;
        /** The integer amount in **%s** representing the amount to refund. If set, a refund will be created for the charge associated with the invoice. */
        refund_amount?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            /** Details about each object. */
            data: components["schemas"]["credit_note_line_item"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>When retrieving a credit note, you’ll get a <strong>lines</strong> property containing the the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p> */
  GetCreditNotesCreditNoteLines: {
    parameters: {
      path: {
        credit_note: string;
      };
      query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            /** Details about each object. */
            data: components["schemas"]["credit_note_line_item"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Retrieves the credit note object with the given identifier.</p> */
  GetCreditNotesId: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["credit_note"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Updates an existing credit note.</p> */
  PostCreditNotesId: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["credit_note"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Credit note memo. */
          memo?: string;
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: { [key: string]: string };
        };
      };
    };
  };
  /** <p>Marks a credit note as void. Learn more about <a href="/docs/billing/invoices/credit-notes#voiding">voiding credit notes</a>.</p> */
  PostCreditNotesIdVoid: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["credit_note"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
        };
      };
    };
  };
  /** <p>Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.</p> */
  GetCustomers: {
    parameters: {
      query: {
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** A filter on the list based on the customer's `email` field. The value must be a string. */
        email?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["customer"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Creates a new customer object.</p> */
  PostCustomers: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["customer"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The customer's address. */
          address?: Partial<{
            city?: string;
            country?: string;
            line1: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          }> &
            Partial<"">;
          /** An integer amount in %s that represents the customer's current balance, which affect the customer's future invoices. A negative amount represents a credit that decreases the amount due on an invoice; a positive amount increases the amount due on an invoice. */
          balance?: number;
          coupon?: string;
          /** An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard. */
          description?: string;
          /** Customer's email address. It's displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to *512 characters*. */
          email?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** The prefix for the customer used to generate unique invoice numbers. Must be 3–12 uppercase letters or numbers. */
          invoice_prefix?: string;
          /** Default invoice settings for this customer. */
          invoice_settings?: {
            custom_fields?: Partial<
              {
                name: string;
                value: string;
              }[]
            > &
              Partial<"">;
            default_payment_method?: string;
            footer?: string;
          };
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** The customer's full name or business name. */
          name?: string;
          /** The sequence to be used on the customer's next invoice. Defaults to 1. */
          next_invoice_sequence?: number;
          payment_method?: string;
          /** The customer's phone number. */
          phone?: string;
          /** Customer's preferred languages, ordered by preference. */
          preferred_locales?: string[];
          /** The customer's shipping information. Appears on invoices emailed to this customer. */
          shipping?: Partial<{
            address: {
              city?: string;
              country?: string;
              line1: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            name: string;
            phone?: string;
          }> &
            Partial<"">;
          source?: string;
          /** The customer's tax exemption. One of `none`, `exempt`, or `reverse`. */
          tax_exempt?: "" | "exempt" | "none" | "reverse";
          /** The customer's tax IDs. */
          tax_id_data?: {
            type:
              | "au_abn"
              | "ca_bn"
              | "ca_qst"
              | "ch_vat"
              | "es_cif"
              | "eu_vat"
              | "hk_br"
              | "in_gst"
              | "jp_cn"
              | "kr_brn"
              | "li_uid"
              | "mx_rfc"
              | "my_itn"
              | "my_sst"
              | "no_vat"
              | "nz_gst"
              | "ru_inn"
              | "sg_gst"
              | "sg_uen"
              | "th_vat"
              | "tw_vat"
              | "us_ein"
              | "za_vat";
            value: string;
          }[];
        };
      };
    };
  };
  /** <p>Retrieves the details of an existing customer. You need only supply the unique customer identifier that was returned upon customer creation.</p> */
  GetCustomersCustomer: {
    parameters: {
      path: {
        customer: string;
      };
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": Partial<components["schemas"]["customer"]> &
            Partial<components["schemas"]["deleted_customer"]>;
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the <strong>source</strong> parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the <strong>source</strong> parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the <code>past_due</code> state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the <strong>default_source</strong> for a customer will not trigger this behavior.</p>
   *
   * <p>This request accepts mostly the same arguments as the customer creation call.</p>
   */
  PostCustomersCustomer: {
    parameters: {
      path: {
        customer: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["customer"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The customer's address. */
          address?: Partial<{
            city?: string;
            country?: string;
            line1: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          }> &
            Partial<"">;
          /** An integer amount in %s that represents the customer's current balance, which affect the customer's future invoices. A negative amount represents a credit that decreases the amount due on an invoice; a positive amount increases the amount due on an invoice. */
          balance?: number;
          /** Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details. */
          bank_account?: Partial<{
            account_holder_name?: string;
            account_holder_type?: "company" | "individual";
            account_number: string;
            country: string;
            currency?: string;
            object?: "bank_account";
            routing_number?: string;
          }> &
            Partial<string>;
          /** A token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js). */
          card?: Partial<{
            address_city?: string;
            address_country?: string;
            address_line1?: string;
            address_line2?: string;
            address_state?: string;
            address_zip?: string;
            cvc?: string;
            exp_month: number;
            exp_year: number;
            metadata?: { [key: string]: string };
            name?: string;
            number: string;
            object?: "card";
          }> &
            Partial<string>;
          coupon?: string;
          /** ID of Alipay account to make the customer's new default for invoice payments. */
          default_alipay_account?: string;
          /** ID of bank account to make the customer's new default for invoice payments. */
          default_bank_account?: string;
          /** ID of card to make the customer's new default for invoice payments. */
          default_card?: string;
          /**
           * If you are using payment methods created via the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/update#update_customer-invoice_settings-default_payment_method) parameter.
           *
           * Provide the ID of a payment source already attached to this customer to make it this customer's default payment source.
           *
           * If you want to add a new payment source and make it the default, see the [source](https://stripe.com/docs/api/customers/update#update_customer-source) property.
           */
          default_source?: string;
          /** An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard. */
          description?: string;
          /** Customer's email address. It's displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to *512 characters*. */
          email?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** The prefix for the customer used to generate unique invoice numbers. Must be 3–12 uppercase letters or numbers. */
          invoice_prefix?: string;
          /** Default invoice settings for this customer. */
          invoice_settings?: {
            custom_fields?: Partial<
              {
                name: string;
                value: string;
              }[]
            > &
              Partial<"">;
            default_payment_method?: string;
            footer?: string;
          };
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** The customer's full name or business name. */
          name?: string;
          /** The sequence to be used on the customer's next invoice. Defaults to 1. */
          next_invoice_sequence?: number;
          /** The customer's phone number. */
          phone?: string;
          /** Customer's preferred languages, ordered by preference. */
          preferred_locales?: string[];
          /** The customer's shipping information. Appears on invoices emailed to this customer. */
          shipping?: Partial<{
            address: {
              city?: string;
              country?: string;
              line1: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            name: string;
            phone?: string;
          }> &
            Partial<"">;
          source?: string;
          /** The customer's tax exemption. One of `none`, `exempt`, or `reverse`. */
          tax_exempt?: "" | "exempt" | "none" | "reverse";
          /** Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`. */
          trial_end?: Partial<"now"> & Partial<number>;
        };
      };
    };
  };
  /** <p>Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.</p> */
  DeleteCustomersCustomer: {
    parameters: {
      path: {
        customer: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["deleted_customer"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Returns a list of transactions that updated the customer’s <a href="/docs/api/customers/object#customer_object-balance"><code>balance</code></a>.</p> */
  GetCustomersCustomerBalanceTransactions: {
    parameters: {
      path: {
        customer: string;
      };
      query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            /** Details about each object. */
            data: components["schemas"]["customer_balance_transaction"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Creates an immutable transaction that updates the customer’s <a href="/docs/api/customers/object#customer_object-balance"><code>balance</code></a>.</p> */
  PostCustomersCustomerBalanceTransactions: {
    parameters: {
      path: {
        customer: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["customer_balance_transaction"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The integer amount in **%s** to apply to the customer's balance. Pass a negative amount to credit the customer's balance, and pass in a positive amount to debit the customer's balance. */
          amount: number;
          /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). If the customer's [`currency`](https://stripe.com/docs/api/customers/object#customer_object-currency) is set, this value must match it. If the customer's `currency` is not set, it will be updated to this value. */
          currency: string;
          /** An arbitrary string attached to the object. Often useful for displaying to users. */
          description?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
        };
      };
    };
  };
  /** <p>Retrieves a specific transaction that updated the customer’s <a href="/docs/api/customers/object#customer_object-balance"><code>balance</code></a>.</p> */
  GetCustomersCustomerBalanceTransactionsTransaction: {
    parameters: {
      path: {
        customer: string;
        transaction: string;
      };
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["customer_balance_transaction"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Most customer balance transaction fields are immutable, but you may update its <code>description</code> and <code>metadata</code>.</p> */
  PostCustomersCustomerBalanceTransactionsTransaction: {
    parameters: {
      path: {
        customer: string;
        transaction: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["customer_balance_transaction"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** An arbitrary string attached to the object. Often useful for displaying to users. */
          description?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
        };
      };
    };
  };
  /** <p>You can see a list of the bank accounts belonging to a Customer. Note that the 10 most recent sources are always available by default on the Customer. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional bank accounts.</p> */
  GetCustomersCustomerBankAccounts: {
    parameters: {
      path: {
        customer: string;
      };
      query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            /** Details about each object. */
            data: components["schemas"]["bank_account"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
   *
   * <p>If the card’s owner has no default card, then the new card will become the default.
   * However, if the owner already has a default, then it will not change.
   * To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
   */
  PostCustomersCustomerBankAccounts: {
    parameters: {
      path: {
        customer: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["payment_source"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** A token returned by [Stripe.js](https://stripe.com/docs/stripe.js) representing the user’s Alipay account details. */
          alipay_account?: string;
          /** Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details. */
          bank_account?: Partial<{
            account_holder_name?: string;
            account_holder_type?: "company" | "individual";
            account_number: string;
            country: string;
            currency?: string;
            object?: "bank_account";
            routing_number?: string;
          }> &
            Partial<string>;
          /** A token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js). */
          card?: Partial<{
            address_city?: string;
            address_country?: string;
            address_line1?: string;
            address_line2?: string;
            address_state?: string;
            address_zip?: string;
            cvc?: string;
            exp_month: number;
            exp_year: number;
            metadata?: { [key: string]: string };
            name?: string;
            number: string;
            object?: "card";
          }> &
            Partial<string>;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: { [key: string]: string };
          /** Please refer to full [documentation](https://stripe.com/docs/api) instead. */
          source?: string;
        };
      };
    };
  };
  /** <p>By default, you can see the 10 most recent sources stored on a Customer directly on the object, but you can also retrieve details about a specific bank account stored on the Stripe account.</p> */
  GetCustomersCustomerBankAccountsId: {
    parameters: {
      path: {
        customer: string;
        id: string;
      };
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["bank_account"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Update a specified source for a given customer.</p> */
  PostCustomersCustomerBankAccountsId: {
    parameters: {
      path: {
        customer: string;
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": Partial<components["schemas"]["card"]> &
            Partial<components["schemas"]["bank_account"]> &
            Partial<components["schemas"]["source"]>;
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The name of the person or business that owns the bank account. */
          account_holder_name?: string;
          /** The type of entity that holds the account. This can be either `individual` or `company`. */
          account_holder_type?: "company" | "individual";
          /** City/District/Suburb/Town/Village. */
          address_city?: string;
          /** Billing address country, if provided when creating card. */
          address_country?: string;
          /** Address line 1 (Street address/PO Box/Company name). */
          address_line1?: string;
          /** Address line 2 (Apartment/Suite/Unit/Building). */
          address_line2?: string;
          /** State/County/Province/Region. */
          address_state?: string;
          /** ZIP or postal code. */
          address_zip?: string;
          /** Two digit number representing the card’s expiration month. */
          exp_month?: string;
          /** Four digit number representing the card’s expiration year. */
          exp_year?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** Cardholder name. */
          name?: string;
          owner?: {
            address?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            email?: string;
            name?: string;
            phone?: string;
          };
        };
      };
    };
  };
  /** <p>Delete a specified source for a given customer.</p> */
  DeleteCustomersCustomerBankAccountsId: {
    parameters: {
      path: {
        customer: string;
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": Partial<components["schemas"]["payment_source"]> &
            Partial<components["schemas"]["deleted_payment_source"]>;
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
        };
      };
    };
  };
  /** <p>Verify a specified bank account for a given customer.</p> */
  PostCustomersCustomerBankAccountsIdVerify: {
    parameters: {
      path: {
        customer: string;
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["bank_account"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account. */
          amounts?: number[];
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
        };
      };
    };
  };
  /**
   * <p>You can see a list of the cards belonging to a customer.
   * Note that the 10 most recent sources are always available on the <code>Customer</code> object.
   * If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional cards.</p>
   */
  GetCustomersCustomerCards: {
    parameters: {
      path: {
        customer: string;
      };
      query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["card"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
   *
   * <p>If the card’s owner has no default card, then the new card will become the default.
   * However, if the owner already has a default, then it will not change.
   * To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
   */
  PostCustomersCustomerCards: {
    parameters: {
      path: {
        customer: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["payment_source"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** A token returned by [Stripe.js](https://stripe.com/docs/stripe.js) representing the user’s Alipay account details. */
          alipay_account?: string;
          /** Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details. */
          bank_account?: Partial<{
            account_holder_name?: string;
            account_holder_type?: "company" | "individual";
            account_number: string;
            country: string;
            currency?: string;
            object?: "bank_account";
            routing_number?: string;
          }> &
            Partial<string>;
          /** A token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js). */
          card?: Partial<{
            address_city?: string;
            address_country?: string;
            address_line1?: string;
            address_line2?: string;
            address_state?: string;
            address_zip?: string;
            cvc?: string;
            exp_month: number;
            exp_year: number;
            metadata?: { [key: string]: string };
            name?: string;
            number: string;
            object?: "card";
          }> &
            Partial<string>;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: { [key: string]: string };
          /** Please refer to full [documentation](https://stripe.com/docs/api) instead. */
          source?: string;
        };
      };
    };
  };
  /** <p>You can always see the 10 most recent cards directly on a customer; this method lets you retrieve details about a specific card stored on the customer.</p> */
  GetCustomersCustomerCardsId: {
    parameters: {
      path: {
        customer: string;
        id: string;
      };
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["card"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Update a specified source for a given customer.</p> */
  PostCustomersCustomerCardsId: {
    parameters: {
      path: {
        customer: string;
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": Partial<components["schemas"]["card"]> &
            Partial<components["schemas"]["bank_account"]> &
            Partial<components["schemas"]["source"]>;
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The name of the person or business that owns the bank account. */
          account_holder_name?: string;
          /** The type of entity that holds the account. This can be either `individual` or `company`. */
          account_holder_type?: "company" | "individual";
          /** City/District/Suburb/Town/Village. */
          address_city?: string;
          /** Billing address country, if provided when creating card. */
          address_country?: string;
          /** Address line 1 (Street address/PO Box/Company name). */
          address_line1?: string;
          /** Address line 2 (Apartment/Suite/Unit/Building). */
          address_line2?: string;
          /** State/County/Province/Region. */
          address_state?: string;
          /** ZIP or postal code. */
          address_zip?: string;
          /** Two digit number representing the card’s expiration month. */
          exp_month?: string;
          /** Four digit number representing the card’s expiration year. */
          exp_year?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** Cardholder name. */
          name?: string;
          owner?: {
            address?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            email?: string;
            name?: string;
            phone?: string;
          };
        };
      };
    };
  };
  /** <p>Delete a specified source for a given customer.</p> */
  DeleteCustomersCustomerCardsId: {
    parameters: {
      path: {
        customer: string;
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": Partial<components["schemas"]["payment_source"]> &
            Partial<components["schemas"]["deleted_payment_source"]>;
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
        };
      };
    };
  };
  GetCustomersCustomerDiscount: {
    parameters: {
      path: {
        customer: string;
      };
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["discount"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Removes the currently applied discount on a customer.</p> */
  DeleteCustomersCustomerDiscount: {
    parameters: {
      path: {
        customer: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["deleted_discount"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>List sources for a specified customer.</p> */
  GetCustomersCustomerSources: {
    parameters: {
      path: {
        customer: string;
      };
      query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** Filter sources according to a particular object type. */
        object?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            /** Details about each object. */
            data: (Partial<components["schemas"]["alipay_account"]> &
              Partial<components["schemas"]["bank_account"]> &
              Partial<components["schemas"]["bitcoin_receiver"]> &
              Partial<components["schemas"]["card"]> &
              Partial<components["schemas"]["source"]>)[];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
   *
   * <p>If the card’s owner has no default card, then the new card will become the default.
   * However, if the owner already has a default, then it will not change.
   * To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
   */
  PostCustomersCustomerSources: {
    parameters: {
      path: {
        customer: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["payment_source"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** A token returned by [Stripe.js](https://stripe.com/docs/stripe.js) representing the user’s Alipay account details. */
          alipay_account?: string;
          /** Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details. */
          bank_account?: Partial<{
            account_holder_name?: string;
            account_holder_type?: "company" | "individual";
            account_number: string;
            country: string;
            currency?: string;
            object?: "bank_account";
            routing_number?: string;
          }> &
            Partial<string>;
          /** A token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js). */
          card?: Partial<{
            address_city?: string;
            address_country?: string;
            address_line1?: string;
            address_line2?: string;
            address_state?: string;
            address_zip?: string;
            cvc?: string;
            exp_month: number;
            exp_year: number;
            metadata?: { [key: string]: string };
            name?: string;
            number: string;
            object?: "card";
          }> &
            Partial<string>;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: { [key: string]: string };
          /** Please refer to full [documentation](https://stripe.com/docs/api) instead. */
          source?: string;
        };
      };
    };
  };
  /** <p>Retrieve a specified source for a given customer.</p> */
  GetCustomersCustomerSourcesId: {
    parameters: {
      path: {
        customer: string;
        id: string;
      };
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["payment_source"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Update a specified source for a given customer.</p> */
  PostCustomersCustomerSourcesId: {
    parameters: {
      path: {
        customer: string;
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": Partial<components["schemas"]["card"]> &
            Partial<components["schemas"]["bank_account"]> &
            Partial<components["schemas"]["source"]>;
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The name of the person or business that owns the bank account. */
          account_holder_name?: string;
          /** The type of entity that holds the account. This can be either `individual` or `company`. */
          account_holder_type?: "company" | "individual";
          /** City/District/Suburb/Town/Village. */
          address_city?: string;
          /** Billing address country, if provided when creating card. */
          address_country?: string;
          /** Address line 1 (Street address/PO Box/Company name). */
          address_line1?: string;
          /** Address line 2 (Apartment/Suite/Unit/Building). */
          address_line2?: string;
          /** State/County/Province/Region. */
          address_state?: string;
          /** ZIP or postal code. */
          address_zip?: string;
          /** Two digit number representing the card’s expiration month. */
          exp_month?: string;
          /** Four digit number representing the card’s expiration year. */
          exp_year?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** Cardholder name. */
          name?: string;
          owner?: {
            address?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            email?: string;
            name?: string;
            phone?: string;
          };
        };
      };
    };
  };
  /** <p>Delete a specified source for a given customer.</p> */
  DeleteCustomersCustomerSourcesId: {
    parameters: {
      path: {
        customer: string;
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": Partial<components["schemas"]["payment_source"]> &
            Partial<components["schemas"]["deleted_payment_source"]>;
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
        };
      };
    };
  };
  /** <p>Verify a specified bank account for a given customer.</p> */
  PostCustomersCustomerSourcesIdVerify: {
    parameters: {
      path: {
        customer: string;
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["bank_account"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account. */
          amounts?: number[];
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
        };
      };
    };
  };
  /** <p>You can see a list of the customer’s active subscriptions. Note that the 10 most recent active subscriptions are always available by default on the customer object. If you need more than those 10, you can use the limit and starting_after parameters to page through additional subscriptions.</p> */
  GetCustomersCustomerSubscriptions: {
    parameters: {
      path: {
        customer: string;
      };
      query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            /** Details about each object. */
            data: components["schemas"]["subscription"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Creates a new subscription on an existing customer.</p> */
  PostCustomersCustomerSubscriptions: {
    parameters: {
      path: {
        customer: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["subscription"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions). */
          application_fee_percent?: number;
          /** For new subscriptions, a past timestamp to backdate the subscription's start date to. If set, the first invoice will contain a proration for the timespan between the start date and the current time. Can be combined with trials and the billing cycle anchor. */
          backdate_start_date?: number;
          /** A future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. */
          billing_cycle_anchor?: number;
          /** Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds. */
          billing_thresholds?: Partial<{
            amount_gte?: number;
            reset_billing_cycle_anchor?: boolean;
          }> &
            Partial<"">;
          /** A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period. */
          cancel_at?: number;
          /** Boolean indicating whether this subscription should cancel at the end of the current period. */
          cancel_at_period_end?: boolean;
          /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`. */
          collection_method?: "charge_automatically" | "send_invoice";
          /** The code of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription. */
          coupon?: string;
          /** Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`. */
          days_until_due?: number;
          /** ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. If not set, invoices will use the default payment method in the customer's invoice settings. */
          default_payment_method?: string;
          /** ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If not set, defaults to the customer's default source. */
          default_source?: string;
          /** The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. */
          default_tax_rates?: Partial<string[]> & Partial<"">;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** A list of up to 20 subscription items, each with an attached plan. */
          items?: {
            billing_thresholds?: Partial<{
              usage_gte: number;
            }> &
              Partial<"">;
            metadata?: { [key: string]: string };
            plan?: string;
            quantity?: number;
            tax_rates?: Partial<string[]> & Partial<"">;
          }[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** Indicates if a customer is on or off-session while an invoice payment is attempted. */
          off_session?: boolean;
          /**
           * Use `allow_incomplete` to create subscriptions with `status=incomplete` if the first invoice cannot be paid. Creating subscriptions with this status allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
           *
           * Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's first invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not create a subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
           *
           * `pending_if_incomplete` is only used with updates and cannot be passed when creating a subscription.
           */
          payment_behavior?: "allow_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
          /** Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval. */
          pending_invoice_item_interval?: Partial<{
            interval: "day" | "month" | "week" | "year";
            interval_count?: number;
          }> &
            Partial<"">;
          /** This field has been renamed to `proration_behavior`. `prorate=true` can be replaced with `proration_behavior=create_prorations` and `prorate=false` can be replaced with `proration_behavior=none`. */
          prorate?: boolean;
          /**
           * Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) resulting from the `billing_cycle_anchor`. Valid values are `create_prorations` or `none`.
           *
           * Passing `create_prorations` will cause proration invoice items to be created when applicable. Prorations can be disabled by passing `none`. If no value is passed, the default is `create_prorations`.
           */
          proration_behavior?: "always_invoice" | "create_prorations" | "none";
          /** A non-negative decimal (with at most four decimal places) between 0 and 100. This represents the percentage of the subscription invoice subtotal that will be calculated and added as tax to the final amount in each billing period. For example, a plan which charges $10/month with a `tax_percent` of `20.0` will charge $12 per invoice. To unset a previously-set value, pass an empty string. This field has been deprecated and will be removed in a future API version, for further information view the [migration docs](https://stripe.com/docs/billing/migration/taxes) for `tax_rates`. */
          tax_percent?: Partial<number> & Partial<"">;
          /** Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`. */
          trial_end?: Partial<"now"> & Partial<number>;
          /** Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. */
          trial_from_plan?: boolean;
          /** Integer representing the number of trial period days before the customer is charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. */
          trial_period_days?: number;
        };
      };
    };
  };
  /** <p>Retrieves the subscription with the given ID.</p> */
  GetCustomersCustomerSubscriptionsSubscriptionExposedId: {
    parameters: {
      path: {
        customer: string;
        subscription_exposed_id: string;
      };
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["subscription"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href="#upcoming_invoice">upcoming invoice</a> endpoint.</p> */
  PostCustomersCustomerSubscriptionsSubscriptionExposedId: {
    parameters: {
      path: {
        customer: string;
        subscription_exposed_id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["subscription"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions). */
          application_fee_percent?: number;
          /** Either `now` or `unchanged`. Setting the value to `now` resets the subscription's billing cycle anchor to the current time. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle). */
          billing_cycle_anchor?: "now" | "unchanged";
          /** Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds. */
          billing_thresholds?: Partial<{
            amount_gte?: number;
            reset_billing_cycle_anchor?: boolean;
          }> &
            Partial<"">;
          /** A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period. */
          cancel_at?: Partial<number> & Partial<"">;
          /** Boolean indicating whether this subscription should cancel at the end of the current period. */
          cancel_at_period_end?: boolean;
          /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`. */
          collection_method?: "charge_automatically" | "send_invoice";
          /** The code of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription. */
          coupon?: string;
          /** Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`. */
          days_until_due?: number;
          /** ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. If not set, invoices will use the default payment method in the customer's invoice settings. */
          default_payment_method?: string;
          /** ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If not set, defaults to the customer's default source. */
          default_source?: string;
          /** The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. Pass an empty string to remove previously-defined tax rates. */
          default_tax_rates?: Partial<string[]> & Partial<"">;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** List of subscription items, each with an attached plan. */
          items?: {
            billing_thresholds?: Partial<{
              usage_gte: number;
            }> &
              Partial<"">;
            clear_usage?: boolean;
            deleted?: boolean;
            id?: string;
            metadata?: Partial<{ [key: string]: string }> & Partial<"">;
            plan?: string;
            quantity?: number;
            tax_rates?: Partial<string[]> & Partial<"">;
          }[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** Indicates if a customer is on or off-session while an invoice payment is attempted. */
          off_session?: boolean;
          /** If specified, payment collection for this subscription will be paused. */
          pause_collection?: Partial<{
            behavior: "keep_as_draft" | "mark_uncollectible" | "void";
            resumes_at?: number;
          }> &
            Partial<"">;
          /**
           * Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
           *
           * Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).
           *
           * Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's first invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not create a subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
           */
          payment_behavior?: "allow_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
          /** Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval. */
          pending_invoice_item_interval?: Partial<{
            interval: "day" | "month" | "week" | "year";
            interval_count?: number;
          }> &
            Partial<"">;
          /** This field has been renamed to `proration_behavior`. `prorate=true` can be replaced with `proration_behavior=create_prorations` and `prorate=false` can be replaced with `proration_behavior=none`. */
          prorate?: boolean;
          /**
           * Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. Valid values are `create_prorations`, `none`, or `always_invoice`.
           *
           * Passing `create_prorations` will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://stripe.com/docs/subscriptions/upgrading-downgrading#immediate-payment). In order to always invoice immediately for prorations, pass `always_invoice`.
           *
           * Prorations can be disabled by passing `none`.
           */
          proration_behavior?: "always_invoice" | "create_prorations" | "none";
          /** If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply exactly the same proration that was previewed with [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint. It can also be used to implement custom proration logic, such as prorating by day instead of by second, by providing the time that you wish to use for proration calculations. */
          proration_date?: number;
          /** A non-negative decimal (with at most four decimal places) between 0 and 100. This represents the percentage of the subscription invoice subtotal that will be calculated and added as tax to the final amount in each billing period. For example, a plan which charges $10/month with a `tax_percent` of `20.0` will charge $12 per invoice. To unset a previously-set value, pass an empty string. This field has been deprecated and will be removed in a future API version, for further information view the [migration docs](https://stripe.com/docs/billing/migration/taxes) for `tax_rates`. */
          tax_percent?: Partial<number> & Partial<"">;
          /** Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`. */
          trial_end?: Partial<"now"> & Partial<number>;
          /** Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. */
          trial_from_plan?: boolean;
        };
      };
    };
  };
  /**
   * <p>Cancels a customer’s subscription. If you set the <code>at_period_end</code> parameter to <code>true</code>, the subscription will remain active until the end of the period, at which point it will be canceled and not renewed. Otherwise, with the default <code>false</code> value, the subscription is terminated immediately. In either case, the customer will not be charged again for the subscription.</p>
   *
   * <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>
   *
   * <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
   */
  DeleteCustomersCustomerSubscriptionsSubscriptionExposedId: {
    parameters: {
      path: {
        customer: string;
        subscription_exposed_id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["subscription"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Can be set to `true` if `at_period_end` is not set to `true`. Will generate a final invoice that invoices for any un-invoiced metered usage and new/pending proration invoice items. */
          invoice_now?: boolean;
          /** Can be set to `true` if `at_period_end` is not set to `true`. Will generate a proration invoice item that credits remaining unused time until the subscription period end. */
          prorate?: boolean;
        };
      };
    };
  };
  GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount: {
    parameters: {
      path: {
        customer: string;
        subscription_exposed_id: string;
      };
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["discount"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Removes the currently applied discount on a customer.</p> */
  DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount: {
    parameters: {
      path: {
        customer: string;
        subscription_exposed_id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["deleted_discount"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Returns a list of tax IDs for a customer.</p> */
  GetCustomersCustomerTaxIds: {
    parameters: {
      path: {
        customer: string;
      };
      query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            /** Details about each object. */
            data: components["schemas"]["tax_id"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Creates a new <code>TaxID</code> object for a customer.</p> */
  PostCustomersCustomerTaxIds: {
    parameters: {
      path: {
        customer: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["tax_id"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Type of the tax ID, one of `eu_vat`, `nz_gst`, `au_abn`, `in_gst`, `no_vat`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `my_sst`, or `sg_gst` */
          type:
            | "au_abn"
            | "ca_bn"
            | "ca_qst"
            | "ch_vat"
            | "es_cif"
            | "eu_vat"
            | "hk_br"
            | "in_gst"
            | "jp_cn"
            | "kr_brn"
            | "li_uid"
            | "mx_rfc"
            | "my_itn"
            | "my_sst"
            | "no_vat"
            | "nz_gst"
            | "ru_inn"
            | "sg_gst"
            | "sg_uen"
            | "th_vat"
            | "tw_vat"
            | "us_ein"
            | "za_vat";
          /** Value of the tax ID. */
          value: string;
        };
      };
    };
  };
  /** <p>Retrieves the <code>TaxID</code> object with the given identifier.</p> */
  GetCustomersCustomerTaxIdsId: {
    parameters: {
      path: {
        customer: string;
        id: string;
      };
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["tax_id"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Deletes an existing <code>TaxID</code> object.</p> */
  DeleteCustomersCustomerTaxIdsId: {
    parameters: {
      path: {
        customer: string;
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["deleted_tax_id"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Returns a list of your disputes.</p> */
  GetDisputes: {
    parameters: {
      query: {
        /** Only return disputes associated to the charge specified by this charge ID. */
        charge?: string;
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** Only return disputes associated to the PaymentIntent specified by this PaymentIntent ID. */
        payment_intent?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["dispute"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Retrieves the dispute with the given ID.</p> */
  GetDisputesDispute: {
    parameters: {
      path: {
        dispute: string;
      };
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["dispute"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>When you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your <a href="https://dashboard.stripe.com/disputes">dashboard</a>, but if you prefer, you can use the API to submit evidence programmatically.</p>
   *
   * <p>Depending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our <a href="/docs/disputes/categories">guide to dispute types</a>.</p>
   */
  PostDisputesDispute: {
    parameters: {
      path: {
        dispute: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["dispute"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Evidence to upload, to respond to a dispute. Updating any field in the hash will submit all fields in the hash for review. The combined character count of all fields is limited to 150,000. */
          evidence?: {
            access_activity_log?: string;
            billing_address?: string;
            cancellation_policy?: string;
            cancellation_policy_disclosure?: string;
            cancellation_rebuttal?: string;
            customer_communication?: string;
            customer_email_address?: string;
            customer_name?: string;
            customer_purchase_ip?: string;
            customer_signature?: string;
            duplicate_charge_documentation?: string;
            duplicate_charge_explanation?: string;
            duplicate_charge_id?: string;
            product_description?: string;
            receipt?: string;
            refund_policy?: string;
            refund_policy_disclosure?: string;
            refund_refusal_explanation?: string;
            service_date?: string;
            service_documentation?: string;
            shipping_address?: string;
            shipping_carrier?: string;
            shipping_date?: string;
            shipping_documentation?: string;
            shipping_tracking_number?: string;
            uncategorized_file?: string;
            uncategorized_text?: string;
          };
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** Whether to immediately submit evidence to the bank. If `false`, evidence is staged on the dispute. Staged evidence is visible in the API and Dashboard, and can be submitted to the bank by making another request with this attribute set to `true` (the default). */
          submit?: boolean;
        };
      };
    };
  };
  /**
   * <p>Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.</p>
   *
   * <p>The status of the dispute will change from <code>needs_response</code> to <code>lost</code>. <em>Closing a dispute is irreversible</em>.</p>
   */
  PostDisputesDisputeClose: {
    parameters: {
      path: {
        dispute: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["dispute"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
        };
      };
    };
  };
  /** <p>Creates a short-lived API key for a given resource.</p> */
  PostEphemeralKeys: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["ephemeral_key"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The ID of the Customer you'd like to modify using the resulting ephemeral key. */
          customer?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** The ID of the Issuing Card you'd like to access using the resulting ephemeral key. */
          issuing_card?: string;
        };
      };
    };
  };
  /** <p>Invalidates a short-lived API key for a given resource.</p> */
  DeleteEphemeralKeysKey: {
    parameters: {
      path: {
        key: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["ephemeral_key"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
        };
      };
    };
  };
  /** <p>List events, going back up to 30 days. Each event data is rendered according to Stripe API version at its creation time, specified in <a href="/docs/api/events/object">event object</a> <code>api_version</code> attribute (not according to your current Stripe API version or <code>Stripe-Version</code> header).</p> */
  GetEvents: {
    parameters: {
      query: {
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** Filter events by whether all webhooks were successfully delivered. If false, events which are still pending or have failed all delivery attempts to a webhook endpoint will be returned. */
        delivery_success?: boolean;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
        /** A string containing a specific event name, or group of events using * as a wildcard. The list will be filtered to include only events with a matching event property. */
        type?: string;
        /** An array of up to 20 strings containing specific event names. The list will be filtered to include only events with a matching event property. You may pass either `type` or `types`, but not both. */
        types?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["event"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Retrieves the details of an event. Supply the unique identifier of the event, which you might have received in a webhook.</p> */
  GetEventsId: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["event"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Returns a list of objects that contain the rates at which foreign currencies are converted to one another. Only shows the currencies for which Stripe supports.</p> */
  GetExchangeRates: {
    parameters: {
      query: {
        /** A cursor for use in pagination. `ending_before` is the currency that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with the exchange rate for currency X your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and total number of supported payout currencies, and the default is the max. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is the currency that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with the exchange rate for currency X, your subsequent call can include `starting_after=X` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["exchange_rate"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Retrieves the exchange rates from the given currency to every supported currency.</p> */
  GetExchangeRatesCurrency: {
    parameters: {
      path: {
        currency: string;
      };
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["exchange_rate"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Returns a list of file links.</p> */
  GetFileLinks: {
    parameters: {
      query: {
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** Filter links by their expiration status. By default, all links are returned. */
        expired?: boolean;
        /** Only return links for the given file. */
        file?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["file_link"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Creates a new file link object.</p> */
  PostFileLinks: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["file_link"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** A future timestamp after which the link will no longer be usable. */
          expires_at?: number;
          /** The ID of the file. The file's `purpose` must be one of the following: `business_icon`, `business_logo`, `customer_signature`, `dispute_evidence`, `finance_report_run`, `pci_document`, `sigma_scheduled_query`, or `tax_document_user_upload`. */
          file: string;
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
        };
      };
    };
  };
  /** <p>Retrieves the file link with the given ID.</p> */
  GetFileLinksLink: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        link: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["file_link"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Updates an existing file link object. Expired links can no longer be updated.</p> */
  PostFileLinksLink: {
    parameters: {
      path: {
        link: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["file_link"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** A future timestamp after which the link will no longer be usable, or `now` to expire the link immediately. */
          expires_at?: Partial<"now"> & Partial<number> & Partial<"">;
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
        };
      };
    };
  };
  /** <p>Returns a list of the files that your account has access to. The files are returned sorted by creation date, with the most recently created files appearing first.</p> */
  GetFiles: {
    parameters: {
      query: {
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** The file purpose to filter queries by. If none is provided, files will not be filtered by purpose. */
        purpose?:
          | "additional_verification"
          | "business_icon"
          | "business_logo"
          | "customer_signature"
          | "dispute_evidence"
          | "finance_report_run"
          | "identity_document"
          | "pci_document"
          | "sigma_scheduled_query"
          | "tax_document_user_upload";
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["file"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>To upload a file to Stripe, you’ll need to send a request of type <code>multipart/form-data</code>. The request should contain the file you would like to upload, as well as the parameters for creating a file.</p>
   *
   * <p>All of Stripe’s officially supported Client libraries should have support for sending <code>multipart/form-data</code>.</p>
   */
  PostFiles: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["file"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** A file to upload. The file should follow the specifications of RFC 2388 (which defines file transfers for the `multipart/form-data` protocol). */
          file: string;
          /** Optional parameters to automatically create a [file link](https://stripe.com/docs/api#file_links) for the newly created file. */
          file_link_data?: {
            create: boolean;
            expires_at?: number;
            metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          };
          /** The purpose of the uploaded file. Possible values are `additional_verification`, `business_icon`, `business_logo`, `customer_signature`, `dispute_evidence`, `identity_document`, `pci_document`, or `tax_document_user_upload`. */
          purpose:
            | "additional_verification"
            | "business_icon"
            | "business_logo"
            | "customer_signature"
            | "dispute_evidence"
            | "identity_document"
            | "pci_document"
            | "tax_document_user_upload";
        };
      };
    };
  };
  /** <p>Retrieves the details of an existing file object. Supply the unique file ID from a file, and Stripe will return the corresponding file object. To access file contents, see the <a href="/docs/file-upload#download-file-contents">File Upload Guide</a>.</p> */
  GetFilesFile: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        file: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["file"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.</p> */
  GetInvoiceitems: {
    parameters: {
      query: {
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** The identifier of the customer whose invoice items to return. If none is provided, all invoice items will be returned. */
        customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** Only return invoice items belonging to this invoice. If none is provided, all invoice items will be returned. If specifying an invoice, no customer identifier is needed. */
        invoice?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** Set to `true` to only show pending invoice items, which are not yet attached to any invoices. Set to `false` to only show invoice items already attached to invoices. If unspecified, no filter is applied. */
        pending?: boolean;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["invoiceitem"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Creates an item to be added to a draft invoice. If no invoice is specified, the item will be on the next invoice created for the customer specified.</p> */
  PostInvoiceitems: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["invoiceitem"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The integer amount in **%s** of the charge to be applied to the upcoming invoice. Passing in a negative `amount` will reduce the `amount_due` on the invoice. */
          amount?: number;
          /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          currency?: string;
          /** The ID of the customer who will be billed when this invoice item is billed. */
          customer: string;
          /** An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking. */
          description?: string;
          /** Controls whether discounts apply to this invoice item. Defaults to false for prorations or negative invoice items, and true for all other invoice items. */
          discountable?: boolean;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** The ID of an existing invoice to add this invoice item to. When left blank, the invoice item will be added to the next upcoming scheduled invoice. This is useful when adding invoice items in response to an invoice.created webhook. You can only add invoice items to draft invoices. */
          invoice?: string;
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** The period associated with this invoice item. */
          period?: {
            end: number;
            start: number;
          };
          /** Non-negative integer. The quantity of units for the invoice item. */
          quantity?: number;
          /** The ID of a subscription to add this invoice item to. When left blank, the invoice item will be be added to the next upcoming scheduled invoice. When set, scheduled invoices for subscriptions other than the specified subscription will ignore the invoice item. Use this when you want to express that an invoice item has been accrued within the context of a particular subscription. */
          subscription?: string;
          /** The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item. */
          tax_rates?: string[];
          /** The integer unit amount in **%s** of the charge to be applied to the upcoming invoice. This `unit_amount` will be multiplied by the quantity to get the full amount. Passing in a negative `unit_amount` will reduce the `amount_due` on the invoice. */
          unit_amount?: number;
          /** Same as `unit_amount`, but accepts a decimal value with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set. */
          unit_amount_decimal?: string;
        };
      };
    };
  };
  /** <p>Retrieves the invoice item with the given ID.</p> */
  GetInvoiceitemsInvoiceitem: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        invoiceitem: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["invoiceitem"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed.</p> */
  PostInvoiceitemsInvoiceitem: {
    parameters: {
      path: {
        invoiceitem: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["invoiceitem"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The integer amount in **%s** of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customer's account, pass a negative amount. */
          amount?: number;
          /** An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking. */
          description?: string;
          /** Controls whether discounts apply to this invoice item. Defaults to false for prorations or negative invoice items, and true for all other invoice items. Cannot be set to true for prorations. */
          discountable?: boolean;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** The period associated with this invoice item. */
          period?: {
            end: number;
            start: number;
          };
          /** Non-negative integer. The quantity of units for the invoice item. */
          quantity?: number;
          /** The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item. Pass an empty string to remove previously-defined tax rates. */
          tax_rates?: Partial<string[]> & Partial<"">;
          /** The integer unit amount in **%s** of the charge to be applied to the upcoming invoice. This unit_amount will be multiplied by the quantity to get the full amount. If you want to apply a credit to the customer's account, pass a negative unit_amount. */
          unit_amount?: number;
          /** Same as `unit_amount`, but accepts a decimal value with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set. */
          unit_amount_decimal?: string;
        };
      };
    };
  };
  /** <p>Deletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.</p> */
  DeleteInvoiceitemsInvoiceitem: {
    parameters: {
      path: {
        invoiceitem: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["deleted_invoiceitem"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.</p> */
  GetInvoices: {
    parameters: {
      query: {
        /** The collection method of the invoice to retrieve. Either `charge_automatically` or `send_invoice`. */
        collection_method?: "charge_automatically" | "send_invoice";
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** Only return invoices for the customer specified by this customer ID. */
        customer?: string;
        due_date?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
        /** The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview) */
        status?: "draft" | "open" | "paid" | "uncollectible" | "void";
        /** Only return invoices for the subscription specified by this subscription ID. */
        subscription?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["invoice"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>This endpoint creates a draft invoice for a given customer. The draft invoice created pulls in all pending invoice items on that customer, including prorations.</p> */
  PostInvoices: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["invoice"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** A fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#invoices). */
          application_fee_amount?: number;
          /** Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action. */
          auto_advance?: boolean;
          /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions. Defaults to `charge_automatically`. */
          collection_method?: "charge_automatically" | "send_invoice";
          /** A list of up to 4 custom fields to be displayed on the invoice. */
          custom_fields?: Partial<
            {
              name: string;
              value: string;
            }[]
          > &
            Partial<"">;
          /** The ID of the customer who will be billed. */
          customer: string;
          /** The number of days from when the invoice is created until it is due. Valid only for invoices where `collection_method=send_invoice`. */
          days_until_due?: number;
          /** ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings. */
          default_payment_method?: string;
          /** ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source. */
          default_source?: string;
          /** The tax rates that will apply to any line item that does not have `tax_rates` set. */
          default_tax_rates?: string[];
          /** An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard. */
          description?: string;
          /** The date on which payment for this invoice is due. Valid only for invoices where `collection_method=send_invoice`. */
          due_date?: number;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Footer to be displayed on the invoice. */
          footer?: string;
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** Extra information about a charge for the customer's credit card statement. It must contain at least one letter. If not specified and this invoice is part of a subscription, the default `statement_descriptor` will be set to the first subscription item's product's `statement_descriptor`. */
          statement_descriptor?: string;
          /** The ID of the subscription to invoice, if any. If not set, the created invoice will include all pending invoice items for the customer. If set, the created invoice will only include pending invoice items for that subscription and pending invoice items not associated with any subscription. The subscription's billing cycle and regular subscription events won't be affected. */
          subscription?: string;
          /** The percent tax rate applied to the invoice, represented as a decimal number. This field has been deprecated and will be removed in a future API version, for further information view the [migration docs](https://stripe.com/docs/billing/migration/taxes) for `tax_rates`. */
          tax_percent?: number;
        };
      };
    };
  };
  /**
   * <p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discount that is applicable to the customer.</p>
   *
   * <p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p>
   *
   * <p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass a <code>proration_date</code> parameter when doing the actual subscription update. The value passed in should be the same as the <code>subscription_proration_date</code> returned on the upcoming invoice resource. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period[start]</code> is equal to the <code>subscription_proration_date</code> on the upcoming invoice resource.</p>
   */
  GetInvoicesUpcoming: {
    parameters: {
      query: {
        /** The code of the coupon to apply. If `subscription` or `subscription_items` is provided, the invoice returned will preview updating or creating a subscription with that coupon. Otherwise, it will preview applying that coupon to the customer for the next upcoming invoice from among the customer's subscriptions. The invoice can be previewed without a coupon by passing this value as an empty string. */
        coupon?: string;
        /** The identifier of the customer whose upcoming invoice you'd like to retrieve. */
        customer?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** List of invoice items to add or update in the upcoming invoice preview. */
        invoice_items?: {
          amount?: number;
          currency?: string;
          description?: string;
          discountable?: boolean;
          invoiceitem?: string;
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          period?: {
            end: number;
            start: number;
          };
          quantity?: number;
          tax_rates?: Partial<string[]> & Partial<"">;
          unit_amount?: number;
          unit_amount_decimal?: string;
        }[];
        /** The identifier of the unstarted schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields. */
        schedule?: string;
        /** The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions. */
        subscription?: string;
        /** For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`. */
        subscription_billing_cycle_anchor?: Partial<"now" | "unchanged"> & Partial<number>;
        /** Timestamp indicating when the subscription should be scheduled to cancel. Will prorate if within the current period and prorations have been enabled using `proration_behavior`.` */
        subscription_cancel_at?: Partial<number> & Partial<"">;
        /** Boolean indicating whether this subscription should cancel at the end of the current period. */
        subscription_cancel_at_period_end?: boolean;
        /** This simulates the subscription being canceled or expired immediately. */
        subscription_cancel_now?: boolean;
        /** If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have `tax_rates` set. */
        subscription_default_tax_rates?: Partial<string[]> & Partial<"">;
        /** List of subscription items, each with an attached plan. */
        subscription_items?: {
          billing_thresholds?: Partial<{
            usage_gte: number;
          }> &
            Partial<"">;
          clear_usage?: boolean;
          deleted?: boolean;
          id?: string;
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          plan?: string;
          quantity?: number;
          tax_rates?: Partial<string[]> & Partial<"">;
        }[];
        /** If previewing an update to a subscription, this decides whether the preview will show the result of applying prorations or not. If set, one of `subscription_items` or `subscription`, and one of `subscription_items` or `subscription_trial_end` are required. */
        subscription_prorate?: boolean;
        /**
         * Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. Valid values are `create_prorations`, `none`, or `always_invoice`.
         *
         * Passing `create_prorations` will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://stripe.com/docs/subscriptions/upgrading-downgrading#immediate-payment). In order to always invoice immediately for prorations, pass `always_invoice`.
         *
         * Prorations can be disabled by passing `none`.
         */
        subscription_proration_behavior?: "always_invoice" | "create_prorations" | "none";
        /** If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period, and cannot be before the subscription was on its current plan. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration` cannot be set to false. */
        subscription_proration_date?: number;
        /** Date a subscription is intended to start (can be future or past) */
        subscription_start_date?: number;
        /** If provided, the invoice returned will preview updating or creating a subscription with that tax percent. If set, one of `subscription_items` or `subscription` is required. This field has been deprecated and will be removed in a future API version, for further information view the [migration docs](https://stripe.com/docs/billing/migration/taxes) for `tax_rates`. */
        subscription_tax_percent?: number;
        /** If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required. */
        subscription_trial_end?: Partial<"now"> & Partial<number>;
        /** Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `subscription_trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `subscription_trial_end` is not allowed. */
        subscription_trial_from_plan?: boolean;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["invoice"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>When retrieving an upcoming invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p> */
  GetInvoicesUpcomingLines: {
    parameters: {
      query: {
        /** The code of the coupon to apply. If `subscription` or `subscription_items` is provided, the invoice returned will preview updating or creating a subscription with that coupon. Otherwise, it will preview applying that coupon to the customer for the next upcoming invoice from among the customer's subscriptions. The invoice can be previewed without a coupon by passing this value as an empty string. */
        coupon?: string;
        /** The identifier of the customer whose upcoming invoice you'd like to retrieve. */
        customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** List of invoice items to add or update in the upcoming invoice preview. */
        invoice_items?: {
          amount?: number;
          currency?: string;
          description?: string;
          discountable?: boolean;
          invoiceitem?: string;
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          period?: {
            end: number;
            start: number;
          };
          quantity?: number;
          tax_rates?: Partial<string[]> & Partial<"">;
          unit_amount?: number;
          unit_amount_decimal?: string;
        }[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** The identifier of the unstarted schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields. */
        schedule?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
        /** The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions. */
        subscription?: string;
        /** For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`. */
        subscription_billing_cycle_anchor?: Partial<"now" | "unchanged"> & Partial<number>;
        /** Timestamp indicating when the subscription should be scheduled to cancel. Will prorate if within the current period and prorations have been enabled using `proration_behavior`.` */
        subscription_cancel_at?: Partial<number> & Partial<"">;
        /** Boolean indicating whether this subscription should cancel at the end of the current period. */
        subscription_cancel_at_period_end?: boolean;
        /** This simulates the subscription being canceled or expired immediately. */
        subscription_cancel_now?: boolean;
        /** If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have `tax_rates` set. */
        subscription_default_tax_rates?: Partial<string[]> & Partial<"">;
        /** List of subscription items, each with an attached plan. */
        subscription_items?: {
          billing_thresholds?: Partial<{
            usage_gte: number;
          }> &
            Partial<"">;
          clear_usage?: boolean;
          deleted?: boolean;
          id?: string;
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          plan?: string;
          quantity?: number;
          tax_rates?: Partial<string[]> & Partial<"">;
        }[];
        /** If previewing an update to a subscription, this decides whether the preview will show the result of applying prorations or not. If set, one of `subscription_items` or `subscription`, and one of `subscription_items` or `subscription_trial_end` are required. */
        subscription_prorate?: boolean;
        /**
         * Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. Valid values are `create_prorations`, `none`, or `always_invoice`.
         *
         * Passing `create_prorations` will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://stripe.com/docs/subscriptions/upgrading-downgrading#immediate-payment). In order to always invoice immediately for prorations, pass `always_invoice`.
         *
         * Prorations can be disabled by passing `none`.
         */
        subscription_proration_behavior?: "always_invoice" | "create_prorations" | "none";
        /** If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period, and cannot be before the subscription was on its current plan. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration` cannot be set to false. */
        subscription_proration_date?: number;
        /** Date a subscription is intended to start (can be future or past) */
        subscription_start_date?: number;
        /** If provided, the invoice returned will preview updating or creating a subscription with that tax percent. If set, one of `subscription_items` or `subscription` is required. This field has been deprecated and will be removed in a future API version, for further information view the [migration docs](https://stripe.com/docs/billing/migration/taxes) for `tax_rates`. */
        subscription_tax_percent?: number;
        /** If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required. */
        subscription_trial_end?: Partial<"now"> & Partial<number>;
        /** Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `subscription_trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `subscription_trial_end` is not allowed. */
        subscription_trial_from_plan?: boolean;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            /** Details about each object. */
            data: components["schemas"]["line_item"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Retrieves the invoice with the given ID.</p> */
  GetInvoicesInvoice: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        invoice: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["invoice"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>Draft invoices are fully editable. Once an invoice is <a href="/docs/billing/invoices/workflow#finalized">finalized</a>,
   * monetary values, as well as <code>collection_method</code>, become uneditable.</p>
   *
   * <p>If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on,
   * sending reminders for, or <a href="/docs/billing/invoices/reconciliation">automatically reconciling</a> invoices, pass
   * <code>auto_advance=false</code>.</p>
   */
  PostInvoicesInvoice: {
    parameters: {
      path: {
        invoice: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["invoice"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** A fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#invoices). */
          application_fee_amount?: number;
          /** Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. */
          auto_advance?: boolean;
          /** Either `charge_automatically` or `send_invoice`. This field can be updated only on `draft` invoices. */
          collection_method?: "charge_automatically" | "send_invoice";
          /** A list of up to 4 custom fields to be displayed on the invoice. If a value for `custom_fields` is specified, the list specified will replace the existing custom field list on this invoice. Pass an empty string to remove previously-defined fields. */
          custom_fields?: Partial<
            {
              name: string;
              value: string;
            }[]
          > &
            Partial<"">;
          /** The number of days from which the invoice is created until it is due. Only valid for invoices where `collection_method=send_invoice`. This field can only be updated on `draft` invoices. */
          days_until_due?: number;
          /** ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings. */
          default_payment_method?: string;
          /** ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source. */
          default_source?: string;
          /** The tax rates that will apply to any line item that does not have `tax_rates` set. Pass an empty string to remove previously-defined tax rates. */
          default_tax_rates?: Partial<string[]> & Partial<"">;
          /** An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard. */
          description?: string;
          /** The date on which payment for this invoice is due. Only valid for invoices where `collection_method=send_invoice`. This field can only be updated on `draft` invoices. */
          due_date?: number;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Footer to be displayed on the invoice. */
          footer?: string;
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** Extra information about a charge for the customer's credit card statement. It must contain at least one letter. If not specified and this invoice is part of a subscription, the default `statement_descriptor` will be set to the first subscription item's product's `statement_descriptor`. */
          statement_descriptor?: string;
          /** The percent tax rate applied to the invoice, represented as a non-negative decimal number (with at most four decimal places) between 0 and 100. To unset a previously-set value, pass an empty string. This field can be updated only on `draft` invoices. This field has been deprecated and will be removed in a future API version, for further information view the [migration docs](https://stripe.com/docs/billing/migration/taxes) for `tax_rates`. */
          tax_percent?: Partial<number> & Partial<"">;
        };
      };
    };
  };
  /** <p>Permanently deletes a draft invoice. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized, it must be <a href="#void_invoice">voided</a>.</p> */
  DeleteInvoicesInvoice: {
    parameters: {
      path: {
        invoice: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["deleted_invoice"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.</p> */
  PostInvoicesInvoiceFinalize: {
    parameters: {
      path: {
        invoice: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["invoice"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action. */
          auto_advance?: boolean;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
        };
      };
    };
  };
  /** <p>When retrieving an invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p> */
  GetInvoicesInvoiceLines: {
    parameters: {
      query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
      path: {
        invoice: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            /** Details about each object. */
            data: components["schemas"]["line_item"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.</p> */
  PostInvoicesInvoiceMarkUncollectible: {
    parameters: {
      path: {
        invoice: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["invoice"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
        };
      };
    };
  };
  /** <p>Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.</p> */
  PostInvoicesInvoicePay: {
    parameters: {
      path: {
        invoice: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["invoice"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /**
           * In cases where the source used to pay the invoice has insufficient funds, passing `forgive=true` controls whether a charge should be attempted for the full amount available on the source, up to the amount to fully pay the invoice. This effectively forgives the difference between the amount available on the source and the amount due.
           *
           * Passing `forgive=false` will fail the charge if the source hasn't been pre-funded with the right amount. An example for this case is with ACH Credit Transfers and wires: if the amount wired is less than the amount due by a small amount, you might want to forgive the difference.
           */
          forgive?: boolean;
          /** Indicates if a customer is on or off-session while an invoice payment is attempted. */
          off_session?: boolean;
          /** Boolean representing whether an invoice is paid outside of Stripe. This will result in no charge being made. */
          paid_out_of_band?: boolean;
          /** A PaymentMethod to be charged. The PaymentMethod must be the ID of a PaymentMethod belonging to the customer associated with the invoice being paid. */
          payment_method?: string;
          /** A payment source to be charged. The source must be the ID of a source belonging to the customer associated with the invoice being paid. */
          source?: string;
        };
      };
    };
  };
  /**
   * <p>Stripe will automatically send invoices to customers according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.</p>
   *
   * <p>Requests made in test-mode result in no emails being sent, despite sending an <code>invoice.sent</code> event.</p>
   */
  PostInvoicesInvoiceSend: {
    parameters: {
      path: {
        invoice: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["invoice"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
        };
      };
    };
  };
  /** <p>Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to <a href="#delete_invoice">deletion</a>, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.</p> */
  PostInvoicesInvoiceVoid: {
    parameters: {
      path: {
        invoice: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["invoice"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
        };
      };
    };
  };
  /** <p>Returns a list of issuer fraud records.</p> */
  GetIssuerFraudRecords: {
    parameters: {
      query: {
        /** Only return issuer fraud records for the charge specified by this charge ID. */
        charge?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["issuer_fraud_record"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>Retrieves the details of an issuer fraud record that has previously been created. </p>
   *
   * <p>Please refer to the <a href="#issuer_fraud_record_object">issuer fraud record</a> object reference for more details.</p>
   */
  GetIssuerFraudRecordsIssuerFraudRecord: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        issuer_fraud_record: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["issuer_fraud_record"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Returns a list of Issuing <code>Authorization</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
  GetIssuingAuthorizations: {
    parameters: {
      query: {
        /** Only return issuing transactions that belong to the given card. */
        card?: string;
        /** Only return authorizations belonging to the given cardholder. */
        cardholder?: string;
        /** Only return authorizations that were created during the given date interval. */
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
        /** Only return authorizations with the given status. One of `pending`, `closed`, or `reversed`. */
        status?: "closed" | "pending" | "reversed";
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["issuing.authorization"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Retrieves an Issuing <code>Authorization</code> object.</p> */
  GetIssuingAuthorizationsAuthorization: {
    parameters: {
      path: {
        authorization: string;
      };
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["issuing.authorization"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Updates the specified Issuing <code>Authorization</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
  PostIssuingAuthorizationsAuthorization: {
    parameters: {
      path: {
        authorization: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["issuing.authorization"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
        };
      };
    };
  };
  /** <p>Approves a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real-time authorization</a> flow.</p> */
  PostIssuingAuthorizationsAuthorizationApprove: {
    parameters: {
      path: {
        authorization: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["issuing.authorization"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** If the authorization's `pending_request.is_amount_controllable` property is `true`, you may provide this value to control how much to hold for the authorization. Must be positive (use [`decline`](https://stripe.com/docs/api/issuing/authorizations/decline) to decline an authorization request). */
          amount?: number;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
        };
      };
    };
  };
  /** <p>Declines a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real time authorization</a> flow.</p> */
  PostIssuingAuthorizationsAuthorizationDecline: {
    parameters: {
      path: {
        authorization: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["issuing.authorization"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
        };
      };
    };
  };
  /** <p>Returns a list of Issuing <code>Cardholder</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
  GetIssuingCardholders: {
    parameters: {
      query: {
        /** Only return cardholders that were created during the given date interval. */
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** Only return cardholders that have the given email address. */
        email?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** Only return cardholders that have the given phone number. */
        phone_number?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
        /** Only return cardholders that have the given status. One of `active`, `inactive`, or `blocked`. */
        status?: "active" | "blocked" | "inactive";
        /** Only return cardholders that have the given type. One of `individual` or `company`. */
        type?: "company" | "individual";
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["issuing.cardholder"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Creates a new Issuing <code>Cardholder</code> object that can be issued cards.</p> */
  PostIssuingCardholders: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["issuing.cardholder"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The cardholder's billing address. */
          billing: {
            address: {
              city: string;
              country: string;
              line1: string;
              line2?: string;
              postal_code: string;
              state?: string;
            };
          };
          /** Additional information about a `company` cardholder. */
          company?: {
            tax_id?: string;
          };
          /** The cardholder's email address. */
          email?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Additional information about an `individual` cardholder. */
          individual?: {
            dob?: {
              day: number;
              month: number;
              year: number;
            };
            first_name: string;
            last_name: string;
            verification?: {
              document?: {
                back?: string;
                front?: string;
              };
            };
          };
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: { [key: string]: string };
          /** The cardholder's name. This will be printed on cards issued to them. */
          name: string;
          /** The cardholder's phone number. This will be transformed to [E.164](https://en.wikipedia.org/wiki/E.164) if it is not provided in that format already. */
          phone_number?: string;
          /** Spending rules that give you control over how your cardholders can make charges. Refer to our [authorizations](https://stripe.com/docs/issuing/purchases/authorizations) documentation for more details. */
          spending_controls?: {
            allowed_categories?: (
              | "ac_refrigeration_repair"
              | "accounting_bookkeeping_services"
              | "advertising_services"
              | "agricultural_cooperative"
              | "airlines_air_carriers"
              | "airports_flying_fields"
              | "ambulance_services"
              | "amusement_parks_carnivals"
              | "antique_reproductions"
              | "antique_shops"
              | "aquariums"
              | "architectural_surveying_services"
              | "art_dealers_and_galleries"
              | "artists_supply_and_craft_shops"
              | "auto_and_home_supply_stores"
              | "auto_body_repair_shops"
              | "auto_paint_shops"
              | "auto_service_shops"
              | "automated_cash_disburse"
              | "automated_fuel_dispensers"
              | "automobile_associations"
              | "automotive_parts_and_accessories_stores"
              | "automotive_tire_stores"
              | "bail_and_bond_payments"
              | "bakeries"
              | "bands_orchestras"
              | "barber_and_beauty_shops"
              | "betting_casino_gambling"
              | "bicycle_shops"
              | "billiard_pool_establishments"
              | "boat_dealers"
              | "boat_rentals_and_leases"
              | "book_stores"
              | "books_periodicals_and_newspapers"
              | "bowling_alleys"
              | "bus_lines"
              | "business_secretarial_schools"
              | "buying_shopping_services"
              | "cable_satellite_and_other_pay_television_and_radio"
              | "camera_and_photographic_supply_stores"
              | "candy_nut_and_confectionery_stores"
              | "car_and_truck_dealers_new_used"
              | "car_and_truck_dealers_used_only"
              | "car_rental_agencies"
              | "car_washes"
              | "carpentry_services"
              | "carpet_upholstery_cleaning"
              | "caterers"
              | "charitable_and_social_service_organizations_fundraising"
              | "chemicals_and_allied_products"
              | "child_care_services"
              | "childrens_and_infants_wear_stores"
              | "chiropodists_podiatrists"
              | "chiropractors"
              | "cigar_stores_and_stands"
              | "civic_social_fraternal_associations"
              | "cleaning_and_maintenance"
              | "clothing_rental"
              | "colleges_universities"
              | "commercial_equipment"
              | "commercial_footwear"
              | "commercial_photography_art_and_graphics"
              | "commuter_transport_and_ferries"
              | "computer_network_services"
              | "computer_programming"
              | "computer_repair"
              | "computer_software_stores"
              | "computers_peripherals_and_software"
              | "concrete_work_services"
              | "construction_materials"
              | "consulting_public_relations"
              | "correspondence_schools"
              | "cosmetic_stores"
              | "counseling_services"
              | "country_clubs"
              | "courier_services"
              | "court_costs"
              | "credit_reporting_agencies"
              | "cruise_lines"
              | "dairy_products_stores"
              | "dance_hall_studios_schools"
              | "dating_escort_services"
              | "dentists_orthodontists"
              | "department_stores"
              | "detective_agencies"
              | "digital_goods_applications"
              | "digital_goods_games"
              | "digital_goods_large_volume"
              | "digital_goods_media"
              | "direct_marketing_catalog_merchant"
              | "direct_marketing_combination_catalog_and_retail_merchant"
              | "direct_marketing_inbound_telemarketing"
              | "direct_marketing_insurance_services"
              | "direct_marketing_other"
              | "direct_marketing_outbound_telemarketing"
              | "direct_marketing_subscription"
              | "direct_marketing_travel"
              | "discount_stores"
              | "doctors"
              | "door_to_door_sales"
              | "drapery_window_covering_and_upholstery_stores"
              | "drinking_places"
              | "drug_stores_and_pharmacies"
              | "drugs_drug_proprietaries_and_druggist_sundries"
              | "dry_cleaners"
              | "durable_goods"
              | "duty_free_stores"
              | "eating_places_restaurants"
              | "educational_services"
              | "electric_razor_stores"
              | "electrical_parts_and_equipment"
              | "electrical_services"
              | "electronics_repair_shops"
              | "electronics_stores"
              | "elementary_secondary_schools"
              | "employment_temp_agencies"
              | "equipment_rental"
              | "exterminating_services"
              | "family_clothing_stores"
              | "fast_food_restaurants"
              | "financial_institutions"
              | "fines_government_administrative_entities"
              | "fireplace_fireplace_screens_and_accessories_stores"
              | "floor_covering_stores"
              | "florists"
              | "florists_supplies_nursery_stock_and_flowers"
              | "freezer_and_locker_meat_provisioners"
              | "fuel_dealers_non_automotive"
              | "funeral_services_crematories"
              | "furniture_home_furnishings_and_equipment_stores_except_appliances"
              | "furniture_repair_refinishing"
              | "furriers_and_fur_shops"
              | "general_services"
              | "gift_card_novelty_and_souvenir_shops"
              | "glass_paint_and_wallpaper_stores"
              | "glassware_crystal_stores"
              | "golf_courses_public"
              | "government_services"
              | "grocery_stores_supermarkets"
              | "hardware_equipment_and_supplies"
              | "hardware_stores"
              | "health_and_beauty_spas"
              | "hearing_aids_sales_and_supplies"
              | "heating_plumbing_a_c"
              | "hobby_toy_and_game_shops"
              | "home_supply_warehouse_stores"
              | "hospitals"
              | "hotels_motels_and_resorts"
              | "household_appliance_stores"
              | "industrial_supplies"
              | "information_retrieval_services"
              | "insurance_default"
              | "insurance_underwriting_premiums"
              | "intra_company_purchases"
              | "jewelry_stores_watches_clocks_and_silverware_stores"
              | "landscaping_services"
              | "laundries"
              | "laundry_cleaning_services"
              | "legal_services_attorneys"
              | "luggage_and_leather_goods_stores"
              | "lumber_building_materials_stores"
              | "manual_cash_disburse"
              | "marinas_service_and_supplies"
              | "masonry_stonework_and_plaster"
              | "massage_parlors"
              | "medical_and_dental_labs"
              | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
              | "medical_services"
              | "membership_organizations"
              | "mens_and_boys_clothing_and_accessories_stores"
              | "mens_womens_clothing_stores"
              | "metal_service_centers"
              | "miscellaneous"
              | "miscellaneous_apparel_and_accessory_shops"
              | "miscellaneous_auto_dealers"
              | "miscellaneous_business_services"
              | "miscellaneous_food_stores"
              | "miscellaneous_general_merchandise"
              | "miscellaneous_general_services"
              | "miscellaneous_home_furnishing_specialty_stores"
              | "miscellaneous_publishing_and_printing"
              | "miscellaneous_recreation_services"
              | "miscellaneous_repair_shops"
              | "miscellaneous_specialty_retail"
              | "mobile_home_dealers"
              | "motion_picture_theaters"
              | "motor_freight_carriers_and_trucking"
              | "motor_homes_dealers"
              | "motor_vehicle_supplies_and_new_parts"
              | "motorcycle_shops_and_dealers"
              | "motorcycle_shops_dealers"
              | "music_stores_musical_instruments_pianos_and_sheet_music"
              | "news_dealers_and_newsstands"
              | "non_fi_money_orders"
              | "non_fi_stored_value_card_purchase_load"
              | "nondurable_goods"
              | "nurseries_lawn_and_garden_supply_stores"
              | "nursing_personal_care"
              | "office_and_commercial_furniture"
              | "opticians_eyeglasses"
              | "optometrists_ophthalmologist"
              | "orthopedic_goods_prosthetic_devices"
              | "osteopaths"
              | "package_stores_beer_wine_and_liquor"
              | "paints_varnishes_and_supplies"
              | "parking_lots_garages"
              | "passenger_railways"
              | "pawn_shops"
              | "pet_shops_pet_food_and_supplies"
              | "petroleum_and_petroleum_products"
              | "photo_developing"
              | "photographic_photocopy_microfilm_equipment_and_supplies"
              | "photographic_studios"
              | "picture_video_production"
              | "piece_goods_notions_and_other_dry_goods"
              | "plumbing_heating_equipment_and_supplies"
              | "political_organizations"
              | "postal_services_government_only"
              | "precious_stones_and_metals_watches_and_jewelry"
              | "professional_services"
              | "public_warehousing_and_storage"
              | "quick_copy_repro_and_blueprint"
              | "railroads"
              | "real_estate_agents_and_managers_rentals"
              | "record_stores"
              | "recreational_vehicle_rentals"
              | "religious_goods_stores"
              | "religious_organizations"
              | "roofing_siding_sheet_metal"
              | "secretarial_support_services"
              | "security_brokers_dealers"
              | "service_stations"
              | "sewing_needlework_fabric_and_piece_goods_stores"
              | "shoe_repair_hat_cleaning"
              | "shoe_stores"
              | "small_appliance_repair"
              | "snowmobile_dealers"
              | "special_trade_services"
              | "specialty_cleaning"
              | "sporting_goods_stores"
              | "sporting_recreation_camps"
              | "sports_and_riding_apparel_stores"
              | "sports_clubs_fields"
              | "stamp_and_coin_stores"
              | "stationary_office_supplies_printing_and_writing_paper"
              | "stationery_stores_office_and_school_supply_stores"
              | "swimming_pools_sales"
              | "t_ui_travel_germany"
              | "tailors_alterations"
              | "tax_payments_government_agencies"
              | "tax_preparation_services"
              | "taxicabs_limousines"
              | "telecommunication_equipment_and_telephone_sales"
              | "telecommunication_services"
              | "telegraph_services"
              | "tent_and_awning_shops"
              | "testing_laboratories"
              | "theatrical_ticket_agencies"
              | "timeshares"
              | "tire_retreading_and_repair"
              | "tolls_bridge_fees"
              | "tourist_attractions_and_exhibits"
              | "towing_services"
              | "trailer_parks_campgrounds"
              | "transportation_services"
              | "travel_agencies_tour_operators"
              | "truck_stop_iteration"
              | "truck_utility_trailer_rentals"
              | "typesetting_plate_making_and_related_services"
              | "typewriter_stores"
              | "u_s_federal_government_agencies_or_departments"
              | "uniforms_commercial_clothing"
              | "used_merchandise_and_secondhand_stores"
              | "utilities"
              | "variety_stores"
              | "veterinary_services"
              | "video_amusement_game_supplies"
              | "video_game_arcades"
              | "video_tape_rental_stores"
              | "vocational_trade_schools"
              | "watch_jewelry_repair"
              | "welding_repair"
              | "wholesale_clubs"
              | "wig_and_toupee_stores"
              | "wires_money_orders"
              | "womens_accessory_and_specialty_shops"
              | "womens_ready_to_wear_stores"
              | "wrecking_and_salvage_yards"
            )[];
            blocked_categories?: (
              | "ac_refrigeration_repair"
              | "accounting_bookkeeping_services"
              | "advertising_services"
              | "agricultural_cooperative"
              | "airlines_air_carriers"
              | "airports_flying_fields"
              | "ambulance_services"
              | "amusement_parks_carnivals"
              | "antique_reproductions"
              | "antique_shops"
              | "aquariums"
              | "architectural_surveying_services"
              | "art_dealers_and_galleries"
              | "artists_supply_and_craft_shops"
              | "auto_and_home_supply_stores"
              | "auto_body_repair_shops"
              | "auto_paint_shops"
              | "auto_service_shops"
              | "automated_cash_disburse"
              | "automated_fuel_dispensers"
              | "automobile_associations"
              | "automotive_parts_and_accessories_stores"
              | "automotive_tire_stores"
              | "bail_and_bond_payments"
              | "bakeries"
              | "bands_orchestras"
              | "barber_and_beauty_shops"
              | "betting_casino_gambling"
              | "bicycle_shops"
              | "billiard_pool_establishments"
              | "boat_dealers"
              | "boat_rentals_and_leases"
              | "book_stores"
              | "books_periodicals_and_newspapers"
              | "bowling_alleys"
              | "bus_lines"
              | "business_secretarial_schools"
              | "buying_shopping_services"
              | "cable_satellite_and_other_pay_television_and_radio"
              | "camera_and_photographic_supply_stores"
              | "candy_nut_and_confectionery_stores"
              | "car_and_truck_dealers_new_used"
              | "car_and_truck_dealers_used_only"
              | "car_rental_agencies"
              | "car_washes"
              | "carpentry_services"
              | "carpet_upholstery_cleaning"
              | "caterers"
              | "charitable_and_social_service_organizations_fundraising"
              | "chemicals_and_allied_products"
              | "child_care_services"
              | "childrens_and_infants_wear_stores"
              | "chiropodists_podiatrists"
              | "chiropractors"
              | "cigar_stores_and_stands"
              | "civic_social_fraternal_associations"
              | "cleaning_and_maintenance"
              | "clothing_rental"
              | "colleges_universities"
              | "commercial_equipment"
              | "commercial_footwear"
              | "commercial_photography_art_and_graphics"
              | "commuter_transport_and_ferries"
              | "computer_network_services"
              | "computer_programming"
              | "computer_repair"
              | "computer_software_stores"
              | "computers_peripherals_and_software"
              | "concrete_work_services"
              | "construction_materials"
              | "consulting_public_relations"
              | "correspondence_schools"
              | "cosmetic_stores"
              | "counseling_services"
              | "country_clubs"
              | "courier_services"
              | "court_costs"
              | "credit_reporting_agencies"
              | "cruise_lines"
              | "dairy_products_stores"
              | "dance_hall_studios_schools"
              | "dating_escort_services"
              | "dentists_orthodontists"
              | "department_stores"
              | "detective_agencies"
              | "digital_goods_applications"
              | "digital_goods_games"
              | "digital_goods_large_volume"
              | "digital_goods_media"
              | "direct_marketing_catalog_merchant"
              | "direct_marketing_combination_catalog_and_retail_merchant"
              | "direct_marketing_inbound_telemarketing"
              | "direct_marketing_insurance_services"
              | "direct_marketing_other"
              | "direct_marketing_outbound_telemarketing"
              | "direct_marketing_subscription"
              | "direct_marketing_travel"
              | "discount_stores"
              | "doctors"
              | "door_to_door_sales"
              | "drapery_window_covering_and_upholstery_stores"
              | "drinking_places"
              | "drug_stores_and_pharmacies"
              | "drugs_drug_proprietaries_and_druggist_sundries"
              | "dry_cleaners"
              | "durable_goods"
              | "duty_free_stores"
              | "eating_places_restaurants"
              | "educational_services"
              | "electric_razor_stores"
              | "electrical_parts_and_equipment"
              | "electrical_services"
              | "electronics_repair_shops"
              | "electronics_stores"
              | "elementary_secondary_schools"
              | "employment_temp_agencies"
              | "equipment_rental"
              | "exterminating_services"
              | "family_clothing_stores"
              | "fast_food_restaurants"
              | "financial_institutions"
              | "fines_government_administrative_entities"
              | "fireplace_fireplace_screens_and_accessories_stores"
              | "floor_covering_stores"
              | "florists"
              | "florists_supplies_nursery_stock_and_flowers"
              | "freezer_and_locker_meat_provisioners"
              | "fuel_dealers_non_automotive"
              | "funeral_services_crematories"
              | "furniture_home_furnishings_and_equipment_stores_except_appliances"
              | "furniture_repair_refinishing"
              | "furriers_and_fur_shops"
              | "general_services"
              | "gift_card_novelty_and_souvenir_shops"
              | "glass_paint_and_wallpaper_stores"
              | "glassware_crystal_stores"
              | "golf_courses_public"
              | "government_services"
              | "grocery_stores_supermarkets"
              | "hardware_equipment_and_supplies"
              | "hardware_stores"
              | "health_and_beauty_spas"
              | "hearing_aids_sales_and_supplies"
              | "heating_plumbing_a_c"
              | "hobby_toy_and_game_shops"
              | "home_supply_warehouse_stores"
              | "hospitals"
              | "hotels_motels_and_resorts"
              | "household_appliance_stores"
              | "industrial_supplies"
              | "information_retrieval_services"
              | "insurance_default"
              | "insurance_underwriting_premiums"
              | "intra_company_purchases"
              | "jewelry_stores_watches_clocks_and_silverware_stores"
              | "landscaping_services"
              | "laundries"
              | "laundry_cleaning_services"
              | "legal_services_attorneys"
              | "luggage_and_leather_goods_stores"
              | "lumber_building_materials_stores"
              | "manual_cash_disburse"
              | "marinas_service_and_supplies"
              | "masonry_stonework_and_plaster"
              | "massage_parlors"
              | "medical_and_dental_labs"
              | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
              | "medical_services"
              | "membership_organizations"
              | "mens_and_boys_clothing_and_accessories_stores"
              | "mens_womens_clothing_stores"
              | "metal_service_centers"
              | "miscellaneous"
              | "miscellaneous_apparel_and_accessory_shops"
              | "miscellaneous_auto_dealers"
              | "miscellaneous_business_services"
              | "miscellaneous_food_stores"
              | "miscellaneous_general_merchandise"
              | "miscellaneous_general_services"
              | "miscellaneous_home_furnishing_specialty_stores"
              | "miscellaneous_publishing_and_printing"
              | "miscellaneous_recreation_services"
              | "miscellaneous_repair_shops"
              | "miscellaneous_specialty_retail"
              | "mobile_home_dealers"
              | "motion_picture_theaters"
              | "motor_freight_carriers_and_trucking"
              | "motor_homes_dealers"
              | "motor_vehicle_supplies_and_new_parts"
              | "motorcycle_shops_and_dealers"
              | "motorcycle_shops_dealers"
              | "music_stores_musical_instruments_pianos_and_sheet_music"
              | "news_dealers_and_newsstands"
              | "non_fi_money_orders"
              | "non_fi_stored_value_card_purchase_load"
              | "nondurable_goods"
              | "nurseries_lawn_and_garden_supply_stores"
              | "nursing_personal_care"
              | "office_and_commercial_furniture"
              | "opticians_eyeglasses"
              | "optometrists_ophthalmologist"
              | "orthopedic_goods_prosthetic_devices"
              | "osteopaths"
              | "package_stores_beer_wine_and_liquor"
              | "paints_varnishes_and_supplies"
              | "parking_lots_garages"
              | "passenger_railways"
              | "pawn_shops"
              | "pet_shops_pet_food_and_supplies"
              | "petroleum_and_petroleum_products"
              | "photo_developing"
              | "photographic_photocopy_microfilm_equipment_and_supplies"
              | "photographic_studios"
              | "picture_video_production"
              | "piece_goods_notions_and_other_dry_goods"
              | "plumbing_heating_equipment_and_supplies"
              | "political_organizations"
              | "postal_services_government_only"
              | "precious_stones_and_metals_watches_and_jewelry"
              | "professional_services"
              | "public_warehousing_and_storage"
              | "quick_copy_repro_and_blueprint"
              | "railroads"
              | "real_estate_agents_and_managers_rentals"
              | "record_stores"
              | "recreational_vehicle_rentals"
              | "religious_goods_stores"
              | "religious_organizations"
              | "roofing_siding_sheet_metal"
              | "secretarial_support_services"
              | "security_brokers_dealers"
              | "service_stations"
              | "sewing_needlework_fabric_and_piece_goods_stores"
              | "shoe_repair_hat_cleaning"
              | "shoe_stores"
              | "small_appliance_repair"
              | "snowmobile_dealers"
              | "special_trade_services"
              | "specialty_cleaning"
              | "sporting_goods_stores"
              | "sporting_recreation_camps"
              | "sports_and_riding_apparel_stores"
              | "sports_clubs_fields"
              | "stamp_and_coin_stores"
              | "stationary_office_supplies_printing_and_writing_paper"
              | "stationery_stores_office_and_school_supply_stores"
              | "swimming_pools_sales"
              | "t_ui_travel_germany"
              | "tailors_alterations"
              | "tax_payments_government_agencies"
              | "tax_preparation_services"
              | "taxicabs_limousines"
              | "telecommunication_equipment_and_telephone_sales"
              | "telecommunication_services"
              | "telegraph_services"
              | "tent_and_awning_shops"
              | "testing_laboratories"
              | "theatrical_ticket_agencies"
              | "timeshares"
              | "tire_retreading_and_repair"
              | "tolls_bridge_fees"
              | "tourist_attractions_and_exhibits"
              | "towing_services"
              | "trailer_parks_campgrounds"
              | "transportation_services"
              | "travel_agencies_tour_operators"
              | "truck_stop_iteration"
              | "truck_utility_trailer_rentals"
              | "typesetting_plate_making_and_related_services"
              | "typewriter_stores"
              | "u_s_federal_government_agencies_or_departments"
              | "uniforms_commercial_clothing"
              | "used_merchandise_and_secondhand_stores"
              | "utilities"
              | "variety_stores"
              | "veterinary_services"
              | "video_amusement_game_supplies"
              | "video_game_arcades"
              | "video_tape_rental_stores"
              | "vocational_trade_schools"
              | "watch_jewelry_repair"
              | "welding_repair"
              | "wholesale_clubs"
              | "wig_and_toupee_stores"
              | "wires_money_orders"
              | "womens_accessory_and_specialty_shops"
              | "womens_ready_to_wear_stores"
              | "wrecking_and_salvage_yards"
            )[];
            spending_limits?: {
              amount: number;
              categories?: (
                | "ac_refrigeration_repair"
                | "accounting_bookkeeping_services"
                | "advertising_services"
                | "agricultural_cooperative"
                | "airlines_air_carriers"
                | "airports_flying_fields"
                | "ambulance_services"
                | "amusement_parks_carnivals"
                | "antique_reproductions"
                | "antique_shops"
                | "aquariums"
                | "architectural_surveying_services"
                | "art_dealers_and_galleries"
                | "artists_supply_and_craft_shops"
                | "auto_and_home_supply_stores"
                | "auto_body_repair_shops"
                | "auto_paint_shops"
                | "auto_service_shops"
                | "automated_cash_disburse"
                | "automated_fuel_dispensers"
                | "automobile_associations"
                | "automotive_parts_and_accessories_stores"
                | "automotive_tire_stores"
                | "bail_and_bond_payments"
                | "bakeries"
                | "bands_orchestras"
                | "barber_and_beauty_shops"
                | "betting_casino_gambling"
                | "bicycle_shops"
                | "billiard_pool_establishments"
                | "boat_dealers"
                | "boat_rentals_and_leases"
                | "book_stores"
                | "books_periodicals_and_newspapers"
                | "bowling_alleys"
                | "bus_lines"
                | "business_secretarial_schools"
                | "buying_shopping_services"
                | "cable_satellite_and_other_pay_television_and_radio"
                | "camera_and_photographic_supply_stores"
                | "candy_nut_and_confectionery_stores"
                | "car_and_truck_dealers_new_used"
                | "car_and_truck_dealers_used_only"
                | "car_rental_agencies"
                | "car_washes"
                | "carpentry_services"
                | "carpet_upholstery_cleaning"
                | "caterers"
                | "charitable_and_social_service_organizations_fundraising"
                | "chemicals_and_allied_products"
                | "child_care_services"
                | "childrens_and_infants_wear_stores"
                | "chiropodists_podiatrists"
                | "chiropractors"
                | "cigar_stores_and_stands"
                | "civic_social_fraternal_associations"
                | "cleaning_and_maintenance"
                | "clothing_rental"
                | "colleges_universities"
                | "commercial_equipment"
                | "commercial_footwear"
                | "commercial_photography_art_and_graphics"
                | "commuter_transport_and_ferries"
                | "computer_network_services"
                | "computer_programming"
                | "computer_repair"
                | "computer_software_stores"
                | "computers_peripherals_and_software"
                | "concrete_work_services"
                | "construction_materials"
                | "consulting_public_relations"
                | "correspondence_schools"
                | "cosmetic_stores"
                | "counseling_services"
                | "country_clubs"
                | "courier_services"
                | "court_costs"
                | "credit_reporting_agencies"
                | "cruise_lines"
                | "dairy_products_stores"
                | "dance_hall_studios_schools"
                | "dating_escort_services"
                | "dentists_orthodontists"
                | "department_stores"
                | "detective_agencies"
                | "digital_goods_applications"
                | "digital_goods_games"
                | "digital_goods_large_volume"
                | "digital_goods_media"
                | "direct_marketing_catalog_merchant"
                | "direct_marketing_combination_catalog_and_retail_merchant"
                | "direct_marketing_inbound_telemarketing"
                | "direct_marketing_insurance_services"
                | "direct_marketing_other"
                | "direct_marketing_outbound_telemarketing"
                | "direct_marketing_subscription"
                | "direct_marketing_travel"
                | "discount_stores"
                | "doctors"
                | "door_to_door_sales"
                | "drapery_window_covering_and_upholstery_stores"
                | "drinking_places"
                | "drug_stores_and_pharmacies"
                | "drugs_drug_proprietaries_and_druggist_sundries"
                | "dry_cleaners"
                | "durable_goods"
                | "duty_free_stores"
                | "eating_places_restaurants"
                | "educational_services"
                | "electric_razor_stores"
                | "electrical_parts_and_equipment"
                | "electrical_services"
                | "electronics_repair_shops"
                | "electronics_stores"
                | "elementary_secondary_schools"
                | "employment_temp_agencies"
                | "equipment_rental"
                | "exterminating_services"
                | "family_clothing_stores"
                | "fast_food_restaurants"
                | "financial_institutions"
                | "fines_government_administrative_entities"
                | "fireplace_fireplace_screens_and_accessories_stores"
                | "floor_covering_stores"
                | "florists"
                | "florists_supplies_nursery_stock_and_flowers"
                | "freezer_and_locker_meat_provisioners"
                | "fuel_dealers_non_automotive"
                | "funeral_services_crematories"
                | "furniture_home_furnishings_and_equipment_stores_except_appliances"
                | "furniture_repair_refinishing"
                | "furriers_and_fur_shops"
                | "general_services"
                | "gift_card_novelty_and_souvenir_shops"
                | "glass_paint_and_wallpaper_stores"
                | "glassware_crystal_stores"
                | "golf_courses_public"
                | "government_services"
                | "grocery_stores_supermarkets"
                | "hardware_equipment_and_supplies"
                | "hardware_stores"
                | "health_and_beauty_spas"
                | "hearing_aids_sales_and_supplies"
                | "heating_plumbing_a_c"
                | "hobby_toy_and_game_shops"
                | "home_supply_warehouse_stores"
                | "hospitals"
                | "hotels_motels_and_resorts"
                | "household_appliance_stores"
                | "industrial_supplies"
                | "information_retrieval_services"
                | "insurance_default"
                | "insurance_underwriting_premiums"
                | "intra_company_purchases"
                | "jewelry_stores_watches_clocks_and_silverware_stores"
                | "landscaping_services"
                | "laundries"
                | "laundry_cleaning_services"
                | "legal_services_attorneys"
                | "luggage_and_leather_goods_stores"
                | "lumber_building_materials_stores"
                | "manual_cash_disburse"
                | "marinas_service_and_supplies"
                | "masonry_stonework_and_plaster"
                | "massage_parlors"
                | "medical_and_dental_labs"
                | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
                | "medical_services"
                | "membership_organizations"
                | "mens_and_boys_clothing_and_accessories_stores"
                | "mens_womens_clothing_stores"
                | "metal_service_centers"
                | "miscellaneous"
                | "miscellaneous_apparel_and_accessory_shops"
                | "miscellaneous_auto_dealers"
                | "miscellaneous_business_services"
                | "miscellaneous_food_stores"
                | "miscellaneous_general_merchandise"
                | "miscellaneous_general_services"
                | "miscellaneous_home_furnishing_specialty_stores"
                | "miscellaneous_publishing_and_printing"
                | "miscellaneous_recreation_services"
                | "miscellaneous_repair_shops"
                | "miscellaneous_specialty_retail"
                | "mobile_home_dealers"
                | "motion_picture_theaters"
                | "motor_freight_carriers_and_trucking"
                | "motor_homes_dealers"
                | "motor_vehicle_supplies_and_new_parts"
                | "motorcycle_shops_and_dealers"
                | "motorcycle_shops_dealers"
                | "music_stores_musical_instruments_pianos_and_sheet_music"
                | "news_dealers_and_newsstands"
                | "non_fi_money_orders"
                | "non_fi_stored_value_card_purchase_load"
                | "nondurable_goods"
                | "nurseries_lawn_and_garden_supply_stores"
                | "nursing_personal_care"
                | "office_and_commercial_furniture"
                | "opticians_eyeglasses"
                | "optometrists_ophthalmologist"
                | "orthopedic_goods_prosthetic_devices"
                | "osteopaths"
                | "package_stores_beer_wine_and_liquor"
                | "paints_varnishes_and_supplies"
                | "parking_lots_garages"
                | "passenger_railways"
                | "pawn_shops"
                | "pet_shops_pet_food_and_supplies"
                | "petroleum_and_petroleum_products"
                | "photo_developing"
                | "photographic_photocopy_microfilm_equipment_and_supplies"
                | "photographic_studios"
                | "picture_video_production"
                | "piece_goods_notions_and_other_dry_goods"
                | "plumbing_heating_equipment_and_supplies"
                | "political_organizations"
                | "postal_services_government_only"
                | "precious_stones_and_metals_watches_and_jewelry"
                | "professional_services"
                | "public_warehousing_and_storage"
                | "quick_copy_repro_and_blueprint"
                | "railroads"
                | "real_estate_agents_and_managers_rentals"
                | "record_stores"
                | "recreational_vehicle_rentals"
                | "religious_goods_stores"
                | "religious_organizations"
                | "roofing_siding_sheet_metal"
                | "secretarial_support_services"
                | "security_brokers_dealers"
                | "service_stations"
                | "sewing_needlework_fabric_and_piece_goods_stores"
                | "shoe_repair_hat_cleaning"
                | "shoe_stores"
                | "small_appliance_repair"
                | "snowmobile_dealers"
                | "special_trade_services"
                | "specialty_cleaning"
                | "sporting_goods_stores"
                | "sporting_recreation_camps"
                | "sports_and_riding_apparel_stores"
                | "sports_clubs_fields"
                | "stamp_and_coin_stores"
                | "stationary_office_supplies_printing_and_writing_paper"
                | "stationery_stores_office_and_school_supply_stores"
                | "swimming_pools_sales"
                | "t_ui_travel_germany"
                | "tailors_alterations"
                | "tax_payments_government_agencies"
                | "tax_preparation_services"
                | "taxicabs_limousines"
                | "telecommunication_equipment_and_telephone_sales"
                | "telecommunication_services"
                | "telegraph_services"
                | "tent_and_awning_shops"
                | "testing_laboratories"
                | "theatrical_ticket_agencies"
                | "timeshares"
                | "tire_retreading_and_repair"
                | "tolls_bridge_fees"
                | "tourist_attractions_and_exhibits"
                | "towing_services"
                | "trailer_parks_campgrounds"
                | "transportation_services"
                | "travel_agencies_tour_operators"
                | "truck_stop_iteration"
                | "truck_utility_trailer_rentals"
                | "typesetting_plate_making_and_related_services"
                | "typewriter_stores"
                | "u_s_federal_government_agencies_or_departments"
                | "uniforms_commercial_clothing"
                | "used_merchandise_and_secondhand_stores"
                | "utilities"
                | "variety_stores"
                | "veterinary_services"
                | "video_amusement_game_supplies"
                | "video_game_arcades"
                | "video_tape_rental_stores"
                | "vocational_trade_schools"
                | "watch_jewelry_repair"
                | "welding_repair"
                | "wholesale_clubs"
                | "wig_and_toupee_stores"
                | "wires_money_orders"
                | "womens_accessory_and_specialty_shops"
                | "womens_ready_to_wear_stores"
                | "wrecking_and_salvage_yards"
              )[];
              interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
            }[];
            spending_limits_currency?: string;
          };
          /** Specifies whether to permit authorizations on this cardholder's cards. Defaults to `active`. */
          status?: "active" | "inactive";
          /** One of `individual` or `company`. */
          type: "company" | "individual";
        };
      };
    };
  };
  /** <p>Retrieves an Issuing <code>Cardholder</code> object.</p> */
  GetIssuingCardholdersCardholder: {
    parameters: {
      path: {
        cardholder: string;
      };
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["issuing.cardholder"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Updates the specified Issuing <code>Cardholder</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
  PostIssuingCardholdersCardholder: {
    parameters: {
      path: {
        cardholder: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["issuing.cardholder"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The cardholder's billing address. */
          billing?: {
            address: {
              city: string;
              country: string;
              line1: string;
              line2?: string;
              postal_code: string;
              state?: string;
            };
          };
          /** Additional information about a `company` cardholder. */
          company?: {
            tax_id?: string;
          };
          /** The cardholder's email address. */
          email?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Additional information about an `individual` cardholder. */
          individual?: {
            dob?: {
              day: number;
              month: number;
              year: number;
            };
            first_name: string;
            last_name: string;
            verification?: {
              document?: {
                back?: string;
                front?: string;
              };
            };
          };
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: { [key: string]: string };
          /** The cardholder's phone number. */
          phone_number?: string;
          /** Spending rules that give you some control over how your cards can be used. Refer to our [authorizations](https://stripe.com/docs/issuing/purchases/authorizations) documentation for more details. */
          spending_controls?: {
            allowed_categories?: (
              | "ac_refrigeration_repair"
              | "accounting_bookkeeping_services"
              | "advertising_services"
              | "agricultural_cooperative"
              | "airlines_air_carriers"
              | "airports_flying_fields"
              | "ambulance_services"
              | "amusement_parks_carnivals"
              | "antique_reproductions"
              | "antique_shops"
              | "aquariums"
              | "architectural_surveying_services"
              | "art_dealers_and_galleries"
              | "artists_supply_and_craft_shops"
              | "auto_and_home_supply_stores"
              | "auto_body_repair_shops"
              | "auto_paint_shops"
              | "auto_service_shops"
              | "automated_cash_disburse"
              | "automated_fuel_dispensers"
              | "automobile_associations"
              | "automotive_parts_and_accessories_stores"
              | "automotive_tire_stores"
              | "bail_and_bond_payments"
              | "bakeries"
              | "bands_orchestras"
              | "barber_and_beauty_shops"
              | "betting_casino_gambling"
              | "bicycle_shops"
              | "billiard_pool_establishments"
              | "boat_dealers"
              | "boat_rentals_and_leases"
              | "book_stores"
              | "books_periodicals_and_newspapers"
              | "bowling_alleys"
              | "bus_lines"
              | "business_secretarial_schools"
              | "buying_shopping_services"
              | "cable_satellite_and_other_pay_television_and_radio"
              | "camera_and_photographic_supply_stores"
              | "candy_nut_and_confectionery_stores"
              | "car_and_truck_dealers_new_used"
              | "car_and_truck_dealers_used_only"
              | "car_rental_agencies"
              | "car_washes"
              | "carpentry_services"
              | "carpet_upholstery_cleaning"
              | "caterers"
              | "charitable_and_social_service_organizations_fundraising"
              | "chemicals_and_allied_products"
              | "child_care_services"
              | "childrens_and_infants_wear_stores"
              | "chiropodists_podiatrists"
              | "chiropractors"
              | "cigar_stores_and_stands"
              | "civic_social_fraternal_associations"
              | "cleaning_and_maintenance"
              | "clothing_rental"
              | "colleges_universities"
              | "commercial_equipment"
              | "commercial_footwear"
              | "commercial_photography_art_and_graphics"
              | "commuter_transport_and_ferries"
              | "computer_network_services"
              | "computer_programming"
              | "computer_repair"
              | "computer_software_stores"
              | "computers_peripherals_and_software"
              | "concrete_work_services"
              | "construction_materials"
              | "consulting_public_relations"
              | "correspondence_schools"
              | "cosmetic_stores"
              | "counseling_services"
              | "country_clubs"
              | "courier_services"
              | "court_costs"
              | "credit_reporting_agencies"
              | "cruise_lines"
              | "dairy_products_stores"
              | "dance_hall_studios_schools"
              | "dating_escort_services"
              | "dentists_orthodontists"
              | "department_stores"
              | "detective_agencies"
              | "digital_goods_applications"
              | "digital_goods_games"
              | "digital_goods_large_volume"
              | "digital_goods_media"
              | "direct_marketing_catalog_merchant"
              | "direct_marketing_combination_catalog_and_retail_merchant"
              | "direct_marketing_inbound_telemarketing"
              | "direct_marketing_insurance_services"
              | "direct_marketing_other"
              | "direct_marketing_outbound_telemarketing"
              | "direct_marketing_subscription"
              | "direct_marketing_travel"
              | "discount_stores"
              | "doctors"
              | "door_to_door_sales"
              | "drapery_window_covering_and_upholstery_stores"
              | "drinking_places"
              | "drug_stores_and_pharmacies"
              | "drugs_drug_proprietaries_and_druggist_sundries"
              | "dry_cleaners"
              | "durable_goods"
              | "duty_free_stores"
              | "eating_places_restaurants"
              | "educational_services"
              | "electric_razor_stores"
              | "electrical_parts_and_equipment"
              | "electrical_services"
              | "electronics_repair_shops"
              | "electronics_stores"
              | "elementary_secondary_schools"
              | "employment_temp_agencies"
              | "equipment_rental"
              | "exterminating_services"
              | "family_clothing_stores"
              | "fast_food_restaurants"
              | "financial_institutions"
              | "fines_government_administrative_entities"
              | "fireplace_fireplace_screens_and_accessories_stores"
              | "floor_covering_stores"
              | "florists"
              | "florists_supplies_nursery_stock_and_flowers"
              | "freezer_and_locker_meat_provisioners"
              | "fuel_dealers_non_automotive"
              | "funeral_services_crematories"
              | "furniture_home_furnishings_and_equipment_stores_except_appliances"
              | "furniture_repair_refinishing"
              | "furriers_and_fur_shops"
              | "general_services"
              | "gift_card_novelty_and_souvenir_shops"
              | "glass_paint_and_wallpaper_stores"
              | "glassware_crystal_stores"
              | "golf_courses_public"
              | "government_services"
              | "grocery_stores_supermarkets"
              | "hardware_equipment_and_supplies"
              | "hardware_stores"
              | "health_and_beauty_spas"
              | "hearing_aids_sales_and_supplies"
              | "heating_plumbing_a_c"
              | "hobby_toy_and_game_shops"
              | "home_supply_warehouse_stores"
              | "hospitals"
              | "hotels_motels_and_resorts"
              | "household_appliance_stores"
              | "industrial_supplies"
              | "information_retrieval_services"
              | "insurance_default"
              | "insurance_underwriting_premiums"
              | "intra_company_purchases"
              | "jewelry_stores_watches_clocks_and_silverware_stores"
              | "landscaping_services"
              | "laundries"
              | "laundry_cleaning_services"
              | "legal_services_attorneys"
              | "luggage_and_leather_goods_stores"
              | "lumber_building_materials_stores"
              | "manual_cash_disburse"
              | "marinas_service_and_supplies"
              | "masonry_stonework_and_plaster"
              | "massage_parlors"
              | "medical_and_dental_labs"
              | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
              | "medical_services"
              | "membership_organizations"
              | "mens_and_boys_clothing_and_accessories_stores"
              | "mens_womens_clothing_stores"
              | "metal_service_centers"
              | "miscellaneous"
              | "miscellaneous_apparel_and_accessory_shops"
              | "miscellaneous_auto_dealers"
              | "miscellaneous_business_services"
              | "miscellaneous_food_stores"
              | "miscellaneous_general_merchandise"
              | "miscellaneous_general_services"
              | "miscellaneous_home_furnishing_specialty_stores"
              | "miscellaneous_publishing_and_printing"
              | "miscellaneous_recreation_services"
              | "miscellaneous_repair_shops"
              | "miscellaneous_specialty_retail"
              | "mobile_home_dealers"
              | "motion_picture_theaters"
              | "motor_freight_carriers_and_trucking"
              | "motor_homes_dealers"
              | "motor_vehicle_supplies_and_new_parts"
              | "motorcycle_shops_and_dealers"
              | "motorcycle_shops_dealers"
              | "music_stores_musical_instruments_pianos_and_sheet_music"
              | "news_dealers_and_newsstands"
              | "non_fi_money_orders"
              | "non_fi_stored_value_card_purchase_load"
              | "nondurable_goods"
              | "nurseries_lawn_and_garden_supply_stores"
              | "nursing_personal_care"
              | "office_and_commercial_furniture"
              | "opticians_eyeglasses"
              | "optometrists_ophthalmologist"
              | "orthopedic_goods_prosthetic_devices"
              | "osteopaths"
              | "package_stores_beer_wine_and_liquor"
              | "paints_varnishes_and_supplies"
              | "parking_lots_garages"
              | "passenger_railways"
              | "pawn_shops"
              | "pet_shops_pet_food_and_supplies"
              | "petroleum_and_petroleum_products"
              | "photo_developing"
              | "photographic_photocopy_microfilm_equipment_and_supplies"
              | "photographic_studios"
              | "picture_video_production"
              | "piece_goods_notions_and_other_dry_goods"
              | "plumbing_heating_equipment_and_supplies"
              | "political_organizations"
              | "postal_services_government_only"
              | "precious_stones_and_metals_watches_and_jewelry"
              | "professional_services"
              | "public_warehousing_and_storage"
              | "quick_copy_repro_and_blueprint"
              | "railroads"
              | "real_estate_agents_and_managers_rentals"
              | "record_stores"
              | "recreational_vehicle_rentals"
              | "religious_goods_stores"
              | "religious_organizations"
              | "roofing_siding_sheet_metal"
              | "secretarial_support_services"
              | "security_brokers_dealers"
              | "service_stations"
              | "sewing_needlework_fabric_and_piece_goods_stores"
              | "shoe_repair_hat_cleaning"
              | "shoe_stores"
              | "small_appliance_repair"
              | "snowmobile_dealers"
              | "special_trade_services"
              | "specialty_cleaning"
              | "sporting_goods_stores"
              | "sporting_recreation_camps"
              | "sports_and_riding_apparel_stores"
              | "sports_clubs_fields"
              | "stamp_and_coin_stores"
              | "stationary_office_supplies_printing_and_writing_paper"
              | "stationery_stores_office_and_school_supply_stores"
              | "swimming_pools_sales"
              | "t_ui_travel_germany"
              | "tailors_alterations"
              | "tax_payments_government_agencies"
              | "tax_preparation_services"
              | "taxicabs_limousines"
              | "telecommunication_equipment_and_telephone_sales"
              | "telecommunication_services"
              | "telegraph_services"
              | "tent_and_awning_shops"
              | "testing_laboratories"
              | "theatrical_ticket_agencies"
              | "timeshares"
              | "tire_retreading_and_repair"
              | "tolls_bridge_fees"
              | "tourist_attractions_and_exhibits"
              | "towing_services"
              | "trailer_parks_campgrounds"
              | "transportation_services"
              | "travel_agencies_tour_operators"
              | "truck_stop_iteration"
              | "truck_utility_trailer_rentals"
              | "typesetting_plate_making_and_related_services"
              | "typewriter_stores"
              | "u_s_federal_government_agencies_or_departments"
              | "uniforms_commercial_clothing"
              | "used_merchandise_and_secondhand_stores"
              | "utilities"
              | "variety_stores"
              | "veterinary_services"
              | "video_amusement_game_supplies"
              | "video_game_arcades"
              | "video_tape_rental_stores"
              | "vocational_trade_schools"
              | "watch_jewelry_repair"
              | "welding_repair"
              | "wholesale_clubs"
              | "wig_and_toupee_stores"
              | "wires_money_orders"
              | "womens_accessory_and_specialty_shops"
              | "womens_ready_to_wear_stores"
              | "wrecking_and_salvage_yards"
            )[];
            blocked_categories?: (
              | "ac_refrigeration_repair"
              | "accounting_bookkeeping_services"
              | "advertising_services"
              | "agricultural_cooperative"
              | "airlines_air_carriers"
              | "airports_flying_fields"
              | "ambulance_services"
              | "amusement_parks_carnivals"
              | "antique_reproductions"
              | "antique_shops"
              | "aquariums"
              | "architectural_surveying_services"
              | "art_dealers_and_galleries"
              | "artists_supply_and_craft_shops"
              | "auto_and_home_supply_stores"
              | "auto_body_repair_shops"
              | "auto_paint_shops"
              | "auto_service_shops"
              | "automated_cash_disburse"
              | "automated_fuel_dispensers"
              | "automobile_associations"
              | "automotive_parts_and_accessories_stores"
              | "automotive_tire_stores"
              | "bail_and_bond_payments"
              | "bakeries"
              | "bands_orchestras"
              | "barber_and_beauty_shops"
              | "betting_casino_gambling"
              | "bicycle_shops"
              | "billiard_pool_establishments"
              | "boat_dealers"
              | "boat_rentals_and_leases"
              | "book_stores"
              | "books_periodicals_and_newspapers"
              | "bowling_alleys"
              | "bus_lines"
              | "business_secretarial_schools"
              | "buying_shopping_services"
              | "cable_satellite_and_other_pay_television_and_radio"
              | "camera_and_photographic_supply_stores"
              | "candy_nut_and_confectionery_stores"
              | "car_and_truck_dealers_new_used"
              | "car_and_truck_dealers_used_only"
              | "car_rental_agencies"
              | "car_washes"
              | "carpentry_services"
              | "carpet_upholstery_cleaning"
              | "caterers"
              | "charitable_and_social_service_organizations_fundraising"
              | "chemicals_and_allied_products"
              | "child_care_services"
              | "childrens_and_infants_wear_stores"
              | "chiropodists_podiatrists"
              | "chiropractors"
              | "cigar_stores_and_stands"
              | "civic_social_fraternal_associations"
              | "cleaning_and_maintenance"
              | "clothing_rental"
              | "colleges_universities"
              | "commercial_equipment"
              | "commercial_footwear"
              | "commercial_photography_art_and_graphics"
              | "commuter_transport_and_ferries"
              | "computer_network_services"
              | "computer_programming"
              | "computer_repair"
              | "computer_software_stores"
              | "computers_peripherals_and_software"
              | "concrete_work_services"
              | "construction_materials"
              | "consulting_public_relations"
              | "correspondence_schools"
              | "cosmetic_stores"
              | "counseling_services"
              | "country_clubs"
              | "courier_services"
              | "court_costs"
              | "credit_reporting_agencies"
              | "cruise_lines"
              | "dairy_products_stores"
              | "dance_hall_studios_schools"
              | "dating_escort_services"
              | "dentists_orthodontists"
              | "department_stores"
              | "detective_agencies"
              | "digital_goods_applications"
              | "digital_goods_games"
              | "digital_goods_large_volume"
              | "digital_goods_media"
              | "direct_marketing_catalog_merchant"
              | "direct_marketing_combination_catalog_and_retail_merchant"
              | "direct_marketing_inbound_telemarketing"
              | "direct_marketing_insurance_services"
              | "direct_marketing_other"
              | "direct_marketing_outbound_telemarketing"
              | "direct_marketing_subscription"
              | "direct_marketing_travel"
              | "discount_stores"
              | "doctors"
              | "door_to_door_sales"
              | "drapery_window_covering_and_upholstery_stores"
              | "drinking_places"
              | "drug_stores_and_pharmacies"
              | "drugs_drug_proprietaries_and_druggist_sundries"
              | "dry_cleaners"
              | "durable_goods"
              | "duty_free_stores"
              | "eating_places_restaurants"
              | "educational_services"
              | "electric_razor_stores"
              | "electrical_parts_and_equipment"
              | "electrical_services"
              | "electronics_repair_shops"
              | "electronics_stores"
              | "elementary_secondary_schools"
              | "employment_temp_agencies"
              | "equipment_rental"
              | "exterminating_services"
              | "family_clothing_stores"
              | "fast_food_restaurants"
              | "financial_institutions"
              | "fines_government_administrative_entities"
              | "fireplace_fireplace_screens_and_accessories_stores"
              | "floor_covering_stores"
              | "florists"
              | "florists_supplies_nursery_stock_and_flowers"
              | "freezer_and_locker_meat_provisioners"
              | "fuel_dealers_non_automotive"
              | "funeral_services_crematories"
              | "furniture_home_furnishings_and_equipment_stores_except_appliances"
              | "furniture_repair_refinishing"
              | "furriers_and_fur_shops"
              | "general_services"
              | "gift_card_novelty_and_souvenir_shops"
              | "glass_paint_and_wallpaper_stores"
              | "glassware_crystal_stores"
              | "golf_courses_public"
              | "government_services"
              | "grocery_stores_supermarkets"
              | "hardware_equipment_and_supplies"
              | "hardware_stores"
              | "health_and_beauty_spas"
              | "hearing_aids_sales_and_supplies"
              | "heating_plumbing_a_c"
              | "hobby_toy_and_game_shops"
              | "home_supply_warehouse_stores"
              | "hospitals"
              | "hotels_motels_and_resorts"
              | "household_appliance_stores"
              | "industrial_supplies"
              | "information_retrieval_services"
              | "insurance_default"
              | "insurance_underwriting_premiums"
              | "intra_company_purchases"
              | "jewelry_stores_watches_clocks_and_silverware_stores"
              | "landscaping_services"
              | "laundries"
              | "laundry_cleaning_services"
              | "legal_services_attorneys"
              | "luggage_and_leather_goods_stores"
              | "lumber_building_materials_stores"
              | "manual_cash_disburse"
              | "marinas_service_and_supplies"
              | "masonry_stonework_and_plaster"
              | "massage_parlors"
              | "medical_and_dental_labs"
              | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
              | "medical_services"
              | "membership_organizations"
              | "mens_and_boys_clothing_and_accessories_stores"
              | "mens_womens_clothing_stores"
              | "metal_service_centers"
              | "miscellaneous"
              | "miscellaneous_apparel_and_accessory_shops"
              | "miscellaneous_auto_dealers"
              | "miscellaneous_business_services"
              | "miscellaneous_food_stores"
              | "miscellaneous_general_merchandise"
              | "miscellaneous_general_services"
              | "miscellaneous_home_furnishing_specialty_stores"
              | "miscellaneous_publishing_and_printing"
              | "miscellaneous_recreation_services"
              | "miscellaneous_repair_shops"
              | "miscellaneous_specialty_retail"
              | "mobile_home_dealers"
              | "motion_picture_theaters"
              | "motor_freight_carriers_and_trucking"
              | "motor_homes_dealers"
              | "motor_vehicle_supplies_and_new_parts"
              | "motorcycle_shops_and_dealers"
              | "motorcycle_shops_dealers"
              | "music_stores_musical_instruments_pianos_and_sheet_music"
              | "news_dealers_and_newsstands"
              | "non_fi_money_orders"
              | "non_fi_stored_value_card_purchase_load"
              | "nondurable_goods"
              | "nurseries_lawn_and_garden_supply_stores"
              | "nursing_personal_care"
              | "office_and_commercial_furniture"
              | "opticians_eyeglasses"
              | "optometrists_ophthalmologist"
              | "orthopedic_goods_prosthetic_devices"
              | "osteopaths"
              | "package_stores_beer_wine_and_liquor"
              | "paints_varnishes_and_supplies"
              | "parking_lots_garages"
              | "passenger_railways"
              | "pawn_shops"
              | "pet_shops_pet_food_and_supplies"
              | "petroleum_and_petroleum_products"
              | "photo_developing"
              | "photographic_photocopy_microfilm_equipment_and_supplies"
              | "photographic_studios"
              | "picture_video_production"
              | "piece_goods_notions_and_other_dry_goods"
              | "plumbing_heating_equipment_and_supplies"
              | "political_organizations"
              | "postal_services_government_only"
              | "precious_stones_and_metals_watches_and_jewelry"
              | "professional_services"
              | "public_warehousing_and_storage"
              | "quick_copy_repro_and_blueprint"
              | "railroads"
              | "real_estate_agents_and_managers_rentals"
              | "record_stores"
              | "recreational_vehicle_rentals"
              | "religious_goods_stores"
              | "religious_organizations"
              | "roofing_siding_sheet_metal"
              | "secretarial_support_services"
              | "security_brokers_dealers"
              | "service_stations"
              | "sewing_needlework_fabric_and_piece_goods_stores"
              | "shoe_repair_hat_cleaning"
              | "shoe_stores"
              | "small_appliance_repair"
              | "snowmobile_dealers"
              | "special_trade_services"
              | "specialty_cleaning"
              | "sporting_goods_stores"
              | "sporting_recreation_camps"
              | "sports_and_riding_apparel_stores"
              | "sports_clubs_fields"
              | "stamp_and_coin_stores"
              | "stationary_office_supplies_printing_and_writing_paper"
              | "stationery_stores_office_and_school_supply_stores"
              | "swimming_pools_sales"
              | "t_ui_travel_germany"
              | "tailors_alterations"
              | "tax_payments_government_agencies"
              | "tax_preparation_services"
              | "taxicabs_limousines"
              | "telecommunication_equipment_and_telephone_sales"
              | "telecommunication_services"
              | "telegraph_services"
              | "tent_and_awning_shops"
              | "testing_laboratories"
              | "theatrical_ticket_agencies"
              | "timeshares"
              | "tire_retreading_and_repair"
              | "tolls_bridge_fees"
              | "tourist_attractions_and_exhibits"
              | "towing_services"
              | "trailer_parks_campgrounds"
              | "transportation_services"
              | "travel_agencies_tour_operators"
              | "truck_stop_iteration"
              | "truck_utility_trailer_rentals"
              | "typesetting_plate_making_and_related_services"
              | "typewriter_stores"
              | "u_s_federal_government_agencies_or_departments"
              | "uniforms_commercial_clothing"
              | "used_merchandise_and_secondhand_stores"
              | "utilities"
              | "variety_stores"
              | "veterinary_services"
              | "video_amusement_game_supplies"
              | "video_game_arcades"
              | "video_tape_rental_stores"
              | "vocational_trade_schools"
              | "watch_jewelry_repair"
              | "welding_repair"
              | "wholesale_clubs"
              | "wig_and_toupee_stores"
              | "wires_money_orders"
              | "womens_accessory_and_specialty_shops"
              | "womens_ready_to_wear_stores"
              | "wrecking_and_salvage_yards"
            )[];
            spending_limits?: {
              amount: number;
              categories?: (
                | "ac_refrigeration_repair"
                | "accounting_bookkeeping_services"
                | "advertising_services"
                | "agricultural_cooperative"
                | "airlines_air_carriers"
                | "airports_flying_fields"
                | "ambulance_services"
                | "amusement_parks_carnivals"
                | "antique_reproductions"
                | "antique_shops"
                | "aquariums"
                | "architectural_surveying_services"
                | "art_dealers_and_galleries"
                | "artists_supply_and_craft_shops"
                | "auto_and_home_supply_stores"
                | "auto_body_repair_shops"
                | "auto_paint_shops"
                | "auto_service_shops"
                | "automated_cash_disburse"
                | "automated_fuel_dispensers"
                | "automobile_associations"
                | "automotive_parts_and_accessories_stores"
                | "automotive_tire_stores"
                | "bail_and_bond_payments"
                | "bakeries"
                | "bands_orchestras"
                | "barber_and_beauty_shops"
                | "betting_casino_gambling"
                | "bicycle_shops"
                | "billiard_pool_establishments"
                | "boat_dealers"
                | "boat_rentals_and_leases"
                | "book_stores"
                | "books_periodicals_and_newspapers"
                | "bowling_alleys"
                | "bus_lines"
                | "business_secretarial_schools"
                | "buying_shopping_services"
                | "cable_satellite_and_other_pay_television_and_radio"
                | "camera_and_photographic_supply_stores"
                | "candy_nut_and_confectionery_stores"
                | "car_and_truck_dealers_new_used"
                | "car_and_truck_dealers_used_only"
                | "car_rental_agencies"
                | "car_washes"
                | "carpentry_services"
                | "carpet_upholstery_cleaning"
                | "caterers"
                | "charitable_and_social_service_organizations_fundraising"
                | "chemicals_and_allied_products"
                | "child_care_services"
                | "childrens_and_infants_wear_stores"
                | "chiropodists_podiatrists"
                | "chiropractors"
                | "cigar_stores_and_stands"
                | "civic_social_fraternal_associations"
                | "cleaning_and_maintenance"
                | "clothing_rental"
                | "colleges_universities"
                | "commercial_equipment"
                | "commercial_footwear"
                | "commercial_photography_art_and_graphics"
                | "commuter_transport_and_ferries"
                | "computer_network_services"
                | "computer_programming"
                | "computer_repair"
                | "computer_software_stores"
                | "computers_peripherals_and_software"
                | "concrete_work_services"
                | "construction_materials"
                | "consulting_public_relations"
                | "correspondence_schools"
                | "cosmetic_stores"
                | "counseling_services"
                | "country_clubs"
                | "courier_services"
                | "court_costs"
                | "credit_reporting_agencies"
                | "cruise_lines"
                | "dairy_products_stores"
                | "dance_hall_studios_schools"
                | "dating_escort_services"
                | "dentists_orthodontists"
                | "department_stores"
                | "detective_agencies"
                | "digital_goods_applications"
                | "digital_goods_games"
                | "digital_goods_large_volume"
                | "digital_goods_media"
                | "direct_marketing_catalog_merchant"
                | "direct_marketing_combination_catalog_and_retail_merchant"
                | "direct_marketing_inbound_telemarketing"
                | "direct_marketing_insurance_services"
                | "direct_marketing_other"
                | "direct_marketing_outbound_telemarketing"
                | "direct_marketing_subscription"
                | "direct_marketing_travel"
                | "discount_stores"
                | "doctors"
                | "door_to_door_sales"
                | "drapery_window_covering_and_upholstery_stores"
                | "drinking_places"
                | "drug_stores_and_pharmacies"
                | "drugs_drug_proprietaries_and_druggist_sundries"
                | "dry_cleaners"
                | "durable_goods"
                | "duty_free_stores"
                | "eating_places_restaurants"
                | "educational_services"
                | "electric_razor_stores"
                | "electrical_parts_and_equipment"
                | "electrical_services"
                | "electronics_repair_shops"
                | "electronics_stores"
                | "elementary_secondary_schools"
                | "employment_temp_agencies"
                | "equipment_rental"
                | "exterminating_services"
                | "family_clothing_stores"
                | "fast_food_restaurants"
                | "financial_institutions"
                | "fines_government_administrative_entities"
                | "fireplace_fireplace_screens_and_accessories_stores"
                | "floor_covering_stores"
                | "florists"
                | "florists_supplies_nursery_stock_and_flowers"
                | "freezer_and_locker_meat_provisioners"
                | "fuel_dealers_non_automotive"
                | "funeral_services_crematories"
                | "furniture_home_furnishings_and_equipment_stores_except_appliances"
                | "furniture_repair_refinishing"
                | "furriers_and_fur_shops"
                | "general_services"
                | "gift_card_novelty_and_souvenir_shops"
                | "glass_paint_and_wallpaper_stores"
                | "glassware_crystal_stores"
                | "golf_courses_public"
                | "government_services"
                | "grocery_stores_supermarkets"
                | "hardware_equipment_and_supplies"
                | "hardware_stores"
                | "health_and_beauty_spas"
                | "hearing_aids_sales_and_supplies"
                | "heating_plumbing_a_c"
                | "hobby_toy_and_game_shops"
                | "home_supply_warehouse_stores"
                | "hospitals"
                | "hotels_motels_and_resorts"
                | "household_appliance_stores"
                | "industrial_supplies"
                | "information_retrieval_services"
                | "insurance_default"
                | "insurance_underwriting_premiums"
                | "intra_company_purchases"
                | "jewelry_stores_watches_clocks_and_silverware_stores"
                | "landscaping_services"
                | "laundries"
                | "laundry_cleaning_services"
                | "legal_services_attorneys"
                | "luggage_and_leather_goods_stores"
                | "lumber_building_materials_stores"
                | "manual_cash_disburse"
                | "marinas_service_and_supplies"
                | "masonry_stonework_and_plaster"
                | "massage_parlors"
                | "medical_and_dental_labs"
                | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
                | "medical_services"
                | "membership_organizations"
                | "mens_and_boys_clothing_and_accessories_stores"
                | "mens_womens_clothing_stores"
                | "metal_service_centers"
                | "miscellaneous"
                | "miscellaneous_apparel_and_accessory_shops"
                | "miscellaneous_auto_dealers"
                | "miscellaneous_business_services"
                | "miscellaneous_food_stores"
                | "miscellaneous_general_merchandise"
                | "miscellaneous_general_services"
                | "miscellaneous_home_furnishing_specialty_stores"
                | "miscellaneous_publishing_and_printing"
                | "miscellaneous_recreation_services"
                | "miscellaneous_repair_shops"
                | "miscellaneous_specialty_retail"
                | "mobile_home_dealers"
                | "motion_picture_theaters"
                | "motor_freight_carriers_and_trucking"
                | "motor_homes_dealers"
                | "motor_vehicle_supplies_and_new_parts"
                | "motorcycle_shops_and_dealers"
                | "motorcycle_shops_dealers"
                | "music_stores_musical_instruments_pianos_and_sheet_music"
                | "news_dealers_and_newsstands"
                | "non_fi_money_orders"
                | "non_fi_stored_value_card_purchase_load"
                | "nondurable_goods"
                | "nurseries_lawn_and_garden_supply_stores"
                | "nursing_personal_care"
                | "office_and_commercial_furniture"
                | "opticians_eyeglasses"
                | "optometrists_ophthalmologist"
                | "orthopedic_goods_prosthetic_devices"
                | "osteopaths"
                | "package_stores_beer_wine_and_liquor"
                | "paints_varnishes_and_supplies"
                | "parking_lots_garages"
                | "passenger_railways"
                | "pawn_shops"
                | "pet_shops_pet_food_and_supplies"
                | "petroleum_and_petroleum_products"
                | "photo_developing"
                | "photographic_photocopy_microfilm_equipment_and_supplies"
                | "photographic_studios"
                | "picture_video_production"
                | "piece_goods_notions_and_other_dry_goods"
                | "plumbing_heating_equipment_and_supplies"
                | "political_organizations"
                | "postal_services_government_only"
                | "precious_stones_and_metals_watches_and_jewelry"
                | "professional_services"
                | "public_warehousing_and_storage"
                | "quick_copy_repro_and_blueprint"
                | "railroads"
                | "real_estate_agents_and_managers_rentals"
                | "record_stores"
                | "recreational_vehicle_rentals"
                | "religious_goods_stores"
                | "religious_organizations"
                | "roofing_siding_sheet_metal"
                | "secretarial_support_services"
                | "security_brokers_dealers"
                | "service_stations"
                | "sewing_needlework_fabric_and_piece_goods_stores"
                | "shoe_repair_hat_cleaning"
                | "shoe_stores"
                | "small_appliance_repair"
                | "snowmobile_dealers"
                | "special_trade_services"
                | "specialty_cleaning"
                | "sporting_goods_stores"
                | "sporting_recreation_camps"
                | "sports_and_riding_apparel_stores"
                | "sports_clubs_fields"
                | "stamp_and_coin_stores"
                | "stationary_office_supplies_printing_and_writing_paper"
                | "stationery_stores_office_and_school_supply_stores"
                | "swimming_pools_sales"
                | "t_ui_travel_germany"
                | "tailors_alterations"
                | "tax_payments_government_agencies"
                | "tax_preparation_services"
                | "taxicabs_limousines"
                | "telecommunication_equipment_and_telephone_sales"
                | "telecommunication_services"
                | "telegraph_services"
                | "tent_and_awning_shops"
                | "testing_laboratories"
                | "theatrical_ticket_agencies"
                | "timeshares"
                | "tire_retreading_and_repair"
                | "tolls_bridge_fees"
                | "tourist_attractions_and_exhibits"
                | "towing_services"
                | "trailer_parks_campgrounds"
                | "transportation_services"
                | "travel_agencies_tour_operators"
                | "truck_stop_iteration"
                | "truck_utility_trailer_rentals"
                | "typesetting_plate_making_and_related_services"
                | "typewriter_stores"
                | "u_s_federal_government_agencies_or_departments"
                | "uniforms_commercial_clothing"
                | "used_merchandise_and_secondhand_stores"
                | "utilities"
                | "variety_stores"
                | "veterinary_services"
                | "video_amusement_game_supplies"
                | "video_game_arcades"
                | "video_tape_rental_stores"
                | "vocational_trade_schools"
                | "watch_jewelry_repair"
                | "welding_repair"
                | "wholesale_clubs"
                | "wig_and_toupee_stores"
                | "wires_money_orders"
                | "womens_accessory_and_specialty_shops"
                | "womens_ready_to_wear_stores"
                | "wrecking_and_salvage_yards"
              )[];
              interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
            }[];
            spending_limits_currency?: string;
          };
          /** Specifies whether to permit authorizations on this cardholder's cards. */
          status?: "active" | "inactive";
        };
      };
    };
  };
  /** <p>Returns a list of Issuing <code>Card</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
  GetIssuingCards: {
    parameters: {
      query: {
        /** Only return cards belonging to the Cardholder with the provided ID. */
        cardholder?: string;
        /** Only return cards that were issued during the given date interval. */
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Only return cards that have the given expiration month. */
        exp_month?: number;
        /** Only return cards that have the given expiration year. */
        exp_year?: number;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** Only return cards that have the given last four digits. */
        last4?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
        /** Only return cards that have the given status. One of `active`, `inactive`, or `canceled`. */
        status?: "active" | "canceled" | "inactive";
        /** Only return cards that have the given type. One of `virtual` or `physical`. */
        type?: "physical" | "virtual";
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["issuing.card"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Creates an Issuing <code>Card</code> object.</p> */
  PostIssuingCards: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["issuing.card"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The [Cardholder](https://stripe.com/docs/api#issuing_cardholder_object) object with which the card will be associated. */
          cardholder?: string;
          /** The currency for the card. This currently must be `usd`. */
          currency: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: { [key: string]: string };
          /** The card this is meant to be a replacement for (if any). */
          replacement_for?: string;
          /** If `replacement_for` is specified, this should indicate why that card is being replaced. */
          replacement_reason?: "damaged" | "expired" | "lost" | "stolen";
          /** The address where the card will be shipped. */
          shipping?: {
            address: {
              city: string;
              country: string;
              line1: string;
              line2?: string;
              postal_code: string;
              state?: string;
            };
            name: string;
            service?: "express" | "priority" | "standard";
            type?: "bulk" | "individual";
          };
          /** Spending rules that give you some control over how your cards can be used. Refer to our [authorizations](https://stripe.com/docs/issuing/purchases/authorizations) documentation for more details. */
          spending_controls?: {
            allowed_categories?: (
              | "ac_refrigeration_repair"
              | "accounting_bookkeeping_services"
              | "advertising_services"
              | "agricultural_cooperative"
              | "airlines_air_carriers"
              | "airports_flying_fields"
              | "ambulance_services"
              | "amusement_parks_carnivals"
              | "antique_reproductions"
              | "antique_shops"
              | "aquariums"
              | "architectural_surveying_services"
              | "art_dealers_and_galleries"
              | "artists_supply_and_craft_shops"
              | "auto_and_home_supply_stores"
              | "auto_body_repair_shops"
              | "auto_paint_shops"
              | "auto_service_shops"
              | "automated_cash_disburse"
              | "automated_fuel_dispensers"
              | "automobile_associations"
              | "automotive_parts_and_accessories_stores"
              | "automotive_tire_stores"
              | "bail_and_bond_payments"
              | "bakeries"
              | "bands_orchestras"
              | "barber_and_beauty_shops"
              | "betting_casino_gambling"
              | "bicycle_shops"
              | "billiard_pool_establishments"
              | "boat_dealers"
              | "boat_rentals_and_leases"
              | "book_stores"
              | "books_periodicals_and_newspapers"
              | "bowling_alleys"
              | "bus_lines"
              | "business_secretarial_schools"
              | "buying_shopping_services"
              | "cable_satellite_and_other_pay_television_and_radio"
              | "camera_and_photographic_supply_stores"
              | "candy_nut_and_confectionery_stores"
              | "car_and_truck_dealers_new_used"
              | "car_and_truck_dealers_used_only"
              | "car_rental_agencies"
              | "car_washes"
              | "carpentry_services"
              | "carpet_upholstery_cleaning"
              | "caterers"
              | "charitable_and_social_service_organizations_fundraising"
              | "chemicals_and_allied_products"
              | "child_care_services"
              | "childrens_and_infants_wear_stores"
              | "chiropodists_podiatrists"
              | "chiropractors"
              | "cigar_stores_and_stands"
              | "civic_social_fraternal_associations"
              | "cleaning_and_maintenance"
              | "clothing_rental"
              | "colleges_universities"
              | "commercial_equipment"
              | "commercial_footwear"
              | "commercial_photography_art_and_graphics"
              | "commuter_transport_and_ferries"
              | "computer_network_services"
              | "computer_programming"
              | "computer_repair"
              | "computer_software_stores"
              | "computers_peripherals_and_software"
              | "concrete_work_services"
              | "construction_materials"
              | "consulting_public_relations"
              | "correspondence_schools"
              | "cosmetic_stores"
              | "counseling_services"
              | "country_clubs"
              | "courier_services"
              | "court_costs"
              | "credit_reporting_agencies"
              | "cruise_lines"
              | "dairy_products_stores"
              | "dance_hall_studios_schools"
              | "dating_escort_services"
              | "dentists_orthodontists"
              | "department_stores"
              | "detective_agencies"
              | "digital_goods_applications"
              | "digital_goods_games"
              | "digital_goods_large_volume"
              | "digital_goods_media"
              | "direct_marketing_catalog_merchant"
              | "direct_marketing_combination_catalog_and_retail_merchant"
              | "direct_marketing_inbound_telemarketing"
              | "direct_marketing_insurance_services"
              | "direct_marketing_other"
              | "direct_marketing_outbound_telemarketing"
              | "direct_marketing_subscription"
              | "direct_marketing_travel"
              | "discount_stores"
              | "doctors"
              | "door_to_door_sales"
              | "drapery_window_covering_and_upholstery_stores"
              | "drinking_places"
              | "drug_stores_and_pharmacies"
              | "drugs_drug_proprietaries_and_druggist_sundries"
              | "dry_cleaners"
              | "durable_goods"
              | "duty_free_stores"
              | "eating_places_restaurants"
              | "educational_services"
              | "electric_razor_stores"
              | "electrical_parts_and_equipment"
              | "electrical_services"
              | "electronics_repair_shops"
              | "electronics_stores"
              | "elementary_secondary_schools"
              | "employment_temp_agencies"
              | "equipment_rental"
              | "exterminating_services"
              | "family_clothing_stores"
              | "fast_food_restaurants"
              | "financial_institutions"
              | "fines_government_administrative_entities"
              | "fireplace_fireplace_screens_and_accessories_stores"
              | "floor_covering_stores"
              | "florists"
              | "florists_supplies_nursery_stock_and_flowers"
              | "freezer_and_locker_meat_provisioners"
              | "fuel_dealers_non_automotive"
              | "funeral_services_crematories"
              | "furniture_home_furnishings_and_equipment_stores_except_appliances"
              | "furniture_repair_refinishing"
              | "furriers_and_fur_shops"
              | "general_services"
              | "gift_card_novelty_and_souvenir_shops"
              | "glass_paint_and_wallpaper_stores"
              | "glassware_crystal_stores"
              | "golf_courses_public"
              | "government_services"
              | "grocery_stores_supermarkets"
              | "hardware_equipment_and_supplies"
              | "hardware_stores"
              | "health_and_beauty_spas"
              | "hearing_aids_sales_and_supplies"
              | "heating_plumbing_a_c"
              | "hobby_toy_and_game_shops"
              | "home_supply_warehouse_stores"
              | "hospitals"
              | "hotels_motels_and_resorts"
              | "household_appliance_stores"
              | "industrial_supplies"
              | "information_retrieval_services"
              | "insurance_default"
              | "insurance_underwriting_premiums"
              | "intra_company_purchases"
              | "jewelry_stores_watches_clocks_and_silverware_stores"
              | "landscaping_services"
              | "laundries"
              | "laundry_cleaning_services"
              | "legal_services_attorneys"
              | "luggage_and_leather_goods_stores"
              | "lumber_building_materials_stores"
              | "manual_cash_disburse"
              | "marinas_service_and_supplies"
              | "masonry_stonework_and_plaster"
              | "massage_parlors"
              | "medical_and_dental_labs"
              | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
              | "medical_services"
              | "membership_organizations"
              | "mens_and_boys_clothing_and_accessories_stores"
              | "mens_womens_clothing_stores"
              | "metal_service_centers"
              | "miscellaneous"
              | "miscellaneous_apparel_and_accessory_shops"
              | "miscellaneous_auto_dealers"
              | "miscellaneous_business_services"
              | "miscellaneous_food_stores"
              | "miscellaneous_general_merchandise"
              | "miscellaneous_general_services"
              | "miscellaneous_home_furnishing_specialty_stores"
              | "miscellaneous_publishing_and_printing"
              | "miscellaneous_recreation_services"
              | "miscellaneous_repair_shops"
              | "miscellaneous_specialty_retail"
              | "mobile_home_dealers"
              | "motion_picture_theaters"
              | "motor_freight_carriers_and_trucking"
              | "motor_homes_dealers"
              | "motor_vehicle_supplies_and_new_parts"
              | "motorcycle_shops_and_dealers"
              | "motorcycle_shops_dealers"
              | "music_stores_musical_instruments_pianos_and_sheet_music"
              | "news_dealers_and_newsstands"
              | "non_fi_money_orders"
              | "non_fi_stored_value_card_purchase_load"
              | "nondurable_goods"
              | "nurseries_lawn_and_garden_supply_stores"
              | "nursing_personal_care"
              | "office_and_commercial_furniture"
              | "opticians_eyeglasses"
              | "optometrists_ophthalmologist"
              | "orthopedic_goods_prosthetic_devices"
              | "osteopaths"
              | "package_stores_beer_wine_and_liquor"
              | "paints_varnishes_and_supplies"
              | "parking_lots_garages"
              | "passenger_railways"
              | "pawn_shops"
              | "pet_shops_pet_food_and_supplies"
              | "petroleum_and_petroleum_products"
              | "photo_developing"
              | "photographic_photocopy_microfilm_equipment_and_supplies"
              | "photographic_studios"
              | "picture_video_production"
              | "piece_goods_notions_and_other_dry_goods"
              | "plumbing_heating_equipment_and_supplies"
              | "political_organizations"
              | "postal_services_government_only"
              | "precious_stones_and_metals_watches_and_jewelry"
              | "professional_services"
              | "public_warehousing_and_storage"
              | "quick_copy_repro_and_blueprint"
              | "railroads"
              | "real_estate_agents_and_managers_rentals"
              | "record_stores"
              | "recreational_vehicle_rentals"
              | "religious_goods_stores"
              | "religious_organizations"
              | "roofing_siding_sheet_metal"
              | "secretarial_support_services"
              | "security_brokers_dealers"
              | "service_stations"
              | "sewing_needlework_fabric_and_piece_goods_stores"
              | "shoe_repair_hat_cleaning"
              | "shoe_stores"
              | "small_appliance_repair"
              | "snowmobile_dealers"
              | "special_trade_services"
              | "specialty_cleaning"
              | "sporting_goods_stores"
              | "sporting_recreation_camps"
              | "sports_and_riding_apparel_stores"
              | "sports_clubs_fields"
              | "stamp_and_coin_stores"
              | "stationary_office_supplies_printing_and_writing_paper"
              | "stationery_stores_office_and_school_supply_stores"
              | "swimming_pools_sales"
              | "t_ui_travel_germany"
              | "tailors_alterations"
              | "tax_payments_government_agencies"
              | "tax_preparation_services"
              | "taxicabs_limousines"
              | "telecommunication_equipment_and_telephone_sales"
              | "telecommunication_services"
              | "telegraph_services"
              | "tent_and_awning_shops"
              | "testing_laboratories"
              | "theatrical_ticket_agencies"
              | "timeshares"
              | "tire_retreading_and_repair"
              | "tolls_bridge_fees"
              | "tourist_attractions_and_exhibits"
              | "towing_services"
              | "trailer_parks_campgrounds"
              | "transportation_services"
              | "travel_agencies_tour_operators"
              | "truck_stop_iteration"
              | "truck_utility_trailer_rentals"
              | "typesetting_plate_making_and_related_services"
              | "typewriter_stores"
              | "u_s_federal_government_agencies_or_departments"
              | "uniforms_commercial_clothing"
              | "used_merchandise_and_secondhand_stores"
              | "utilities"
              | "variety_stores"
              | "veterinary_services"
              | "video_amusement_game_supplies"
              | "video_game_arcades"
              | "video_tape_rental_stores"
              | "vocational_trade_schools"
              | "watch_jewelry_repair"
              | "welding_repair"
              | "wholesale_clubs"
              | "wig_and_toupee_stores"
              | "wires_money_orders"
              | "womens_accessory_and_specialty_shops"
              | "womens_ready_to_wear_stores"
              | "wrecking_and_salvage_yards"
            )[];
            blocked_categories?: (
              | "ac_refrigeration_repair"
              | "accounting_bookkeeping_services"
              | "advertising_services"
              | "agricultural_cooperative"
              | "airlines_air_carriers"
              | "airports_flying_fields"
              | "ambulance_services"
              | "amusement_parks_carnivals"
              | "antique_reproductions"
              | "antique_shops"
              | "aquariums"
              | "architectural_surveying_services"
              | "art_dealers_and_galleries"
              | "artists_supply_and_craft_shops"
              | "auto_and_home_supply_stores"
              | "auto_body_repair_shops"
              | "auto_paint_shops"
              | "auto_service_shops"
              | "automated_cash_disburse"
              | "automated_fuel_dispensers"
              | "automobile_associations"
              | "automotive_parts_and_accessories_stores"
              | "automotive_tire_stores"
              | "bail_and_bond_payments"
              | "bakeries"
              | "bands_orchestras"
              | "barber_and_beauty_shops"
              | "betting_casino_gambling"
              | "bicycle_shops"
              | "billiard_pool_establishments"
              | "boat_dealers"
              | "boat_rentals_and_leases"
              | "book_stores"
              | "books_periodicals_and_newspapers"
              | "bowling_alleys"
              | "bus_lines"
              | "business_secretarial_schools"
              | "buying_shopping_services"
              | "cable_satellite_and_other_pay_television_and_radio"
              | "camera_and_photographic_supply_stores"
              | "candy_nut_and_confectionery_stores"
              | "car_and_truck_dealers_new_used"
              | "car_and_truck_dealers_used_only"
              | "car_rental_agencies"
              | "car_washes"
              | "carpentry_services"
              | "carpet_upholstery_cleaning"
              | "caterers"
              | "charitable_and_social_service_organizations_fundraising"
              | "chemicals_and_allied_products"
              | "child_care_services"
              | "childrens_and_infants_wear_stores"
              | "chiropodists_podiatrists"
              | "chiropractors"
              | "cigar_stores_and_stands"
              | "civic_social_fraternal_associations"
              | "cleaning_and_maintenance"
              | "clothing_rental"
              | "colleges_universities"
              | "commercial_equipment"
              | "commercial_footwear"
              | "commercial_photography_art_and_graphics"
              | "commuter_transport_and_ferries"
              | "computer_network_services"
              | "computer_programming"
              | "computer_repair"
              | "computer_software_stores"
              | "computers_peripherals_and_software"
              | "concrete_work_services"
              | "construction_materials"
              | "consulting_public_relations"
              | "correspondence_schools"
              | "cosmetic_stores"
              | "counseling_services"
              | "country_clubs"
              | "courier_services"
              | "court_costs"
              | "credit_reporting_agencies"
              | "cruise_lines"
              | "dairy_products_stores"
              | "dance_hall_studios_schools"
              | "dating_escort_services"
              | "dentists_orthodontists"
              | "department_stores"
              | "detective_agencies"
              | "digital_goods_applications"
              | "digital_goods_games"
              | "digital_goods_large_volume"
              | "digital_goods_media"
              | "direct_marketing_catalog_merchant"
              | "direct_marketing_combination_catalog_and_retail_merchant"
              | "direct_marketing_inbound_telemarketing"
              | "direct_marketing_insurance_services"
              | "direct_marketing_other"
              | "direct_marketing_outbound_telemarketing"
              | "direct_marketing_subscription"
              | "direct_marketing_travel"
              | "discount_stores"
              | "doctors"
              | "door_to_door_sales"
              | "drapery_window_covering_and_upholstery_stores"
              | "drinking_places"
              | "drug_stores_and_pharmacies"
              | "drugs_drug_proprietaries_and_druggist_sundries"
              | "dry_cleaners"
              | "durable_goods"
              | "duty_free_stores"
              | "eating_places_restaurants"
              | "educational_services"
              | "electric_razor_stores"
              | "electrical_parts_and_equipment"
              | "electrical_services"
              | "electronics_repair_shops"
              | "electronics_stores"
              | "elementary_secondary_schools"
              | "employment_temp_agencies"
              | "equipment_rental"
              | "exterminating_services"
              | "family_clothing_stores"
              | "fast_food_restaurants"
              | "financial_institutions"
              | "fines_government_administrative_entities"
              | "fireplace_fireplace_screens_and_accessories_stores"
              | "floor_covering_stores"
              | "florists"
              | "florists_supplies_nursery_stock_and_flowers"
              | "freezer_and_locker_meat_provisioners"
              | "fuel_dealers_non_automotive"
              | "funeral_services_crematories"
              | "furniture_home_furnishings_and_equipment_stores_except_appliances"
              | "furniture_repair_refinishing"
              | "furriers_and_fur_shops"
              | "general_services"
              | "gift_card_novelty_and_souvenir_shops"
              | "glass_paint_and_wallpaper_stores"
              | "glassware_crystal_stores"
              | "golf_courses_public"
              | "government_services"
              | "grocery_stores_supermarkets"
              | "hardware_equipment_and_supplies"
              | "hardware_stores"
              | "health_and_beauty_spas"
              | "hearing_aids_sales_and_supplies"
              | "heating_plumbing_a_c"
              | "hobby_toy_and_game_shops"
              | "home_supply_warehouse_stores"
              | "hospitals"
              | "hotels_motels_and_resorts"
              | "household_appliance_stores"
              | "industrial_supplies"
              | "information_retrieval_services"
              | "insurance_default"
              | "insurance_underwriting_premiums"
              | "intra_company_purchases"
              | "jewelry_stores_watches_clocks_and_silverware_stores"
              | "landscaping_services"
              | "laundries"
              | "laundry_cleaning_services"
              | "legal_services_attorneys"
              | "luggage_and_leather_goods_stores"
              | "lumber_building_materials_stores"
              | "manual_cash_disburse"
              | "marinas_service_and_supplies"
              | "masonry_stonework_and_plaster"
              | "massage_parlors"
              | "medical_and_dental_labs"
              | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
              | "medical_services"
              | "membership_organizations"
              | "mens_and_boys_clothing_and_accessories_stores"
              | "mens_womens_clothing_stores"
              | "metal_service_centers"
              | "miscellaneous"
              | "miscellaneous_apparel_and_accessory_shops"
              | "miscellaneous_auto_dealers"
              | "miscellaneous_business_services"
              | "miscellaneous_food_stores"
              | "miscellaneous_general_merchandise"
              | "miscellaneous_general_services"
              | "miscellaneous_home_furnishing_specialty_stores"
              | "miscellaneous_publishing_and_printing"
              | "miscellaneous_recreation_services"
              | "miscellaneous_repair_shops"
              | "miscellaneous_specialty_retail"
              | "mobile_home_dealers"
              | "motion_picture_theaters"
              | "motor_freight_carriers_and_trucking"
              | "motor_homes_dealers"
              | "motor_vehicle_supplies_and_new_parts"
              | "motorcycle_shops_and_dealers"
              | "motorcycle_shops_dealers"
              | "music_stores_musical_instruments_pianos_and_sheet_music"
              | "news_dealers_and_newsstands"
              | "non_fi_money_orders"
              | "non_fi_stored_value_card_purchase_load"
              | "nondurable_goods"
              | "nurseries_lawn_and_garden_supply_stores"
              | "nursing_personal_care"
              | "office_and_commercial_furniture"
              | "opticians_eyeglasses"
              | "optometrists_ophthalmologist"
              | "orthopedic_goods_prosthetic_devices"
              | "osteopaths"
              | "package_stores_beer_wine_and_liquor"
              | "paints_varnishes_and_supplies"
              | "parking_lots_garages"
              | "passenger_railways"
              | "pawn_shops"
              | "pet_shops_pet_food_and_supplies"
              | "petroleum_and_petroleum_products"
              | "photo_developing"
              | "photographic_photocopy_microfilm_equipment_and_supplies"
              | "photographic_studios"
              | "picture_video_production"
              | "piece_goods_notions_and_other_dry_goods"
              | "plumbing_heating_equipment_and_supplies"
              | "political_organizations"
              | "postal_services_government_only"
              | "precious_stones_and_metals_watches_and_jewelry"
              | "professional_services"
              | "public_warehousing_and_storage"
              | "quick_copy_repro_and_blueprint"
              | "railroads"
              | "real_estate_agents_and_managers_rentals"
              | "record_stores"
              | "recreational_vehicle_rentals"
              | "religious_goods_stores"
              | "religious_organizations"
              | "roofing_siding_sheet_metal"
              | "secretarial_support_services"
              | "security_brokers_dealers"
              | "service_stations"
              | "sewing_needlework_fabric_and_piece_goods_stores"
              | "shoe_repair_hat_cleaning"
              | "shoe_stores"
              | "small_appliance_repair"
              | "snowmobile_dealers"
              | "special_trade_services"
              | "specialty_cleaning"
              | "sporting_goods_stores"
              | "sporting_recreation_camps"
              | "sports_and_riding_apparel_stores"
              | "sports_clubs_fields"
              | "stamp_and_coin_stores"
              | "stationary_office_supplies_printing_and_writing_paper"
              | "stationery_stores_office_and_school_supply_stores"
              | "swimming_pools_sales"
              | "t_ui_travel_germany"
              | "tailors_alterations"
              | "tax_payments_government_agencies"
              | "tax_preparation_services"
              | "taxicabs_limousines"
              | "telecommunication_equipment_and_telephone_sales"
              | "telecommunication_services"
              | "telegraph_services"
              | "tent_and_awning_shops"
              | "testing_laboratories"
              | "theatrical_ticket_agencies"
              | "timeshares"
              | "tire_retreading_and_repair"
              | "tolls_bridge_fees"
              | "tourist_attractions_and_exhibits"
              | "towing_services"
              | "trailer_parks_campgrounds"
              | "transportation_services"
              | "travel_agencies_tour_operators"
              | "truck_stop_iteration"
              | "truck_utility_trailer_rentals"
              | "typesetting_plate_making_and_related_services"
              | "typewriter_stores"
              | "u_s_federal_government_agencies_or_departments"
              | "uniforms_commercial_clothing"
              | "used_merchandise_and_secondhand_stores"
              | "utilities"
              | "variety_stores"
              | "veterinary_services"
              | "video_amusement_game_supplies"
              | "video_game_arcades"
              | "video_tape_rental_stores"
              | "vocational_trade_schools"
              | "watch_jewelry_repair"
              | "welding_repair"
              | "wholesale_clubs"
              | "wig_and_toupee_stores"
              | "wires_money_orders"
              | "womens_accessory_and_specialty_shops"
              | "womens_ready_to_wear_stores"
              | "wrecking_and_salvage_yards"
            )[];
            spending_limits?: {
              amount: number;
              categories?: (
                | "ac_refrigeration_repair"
                | "accounting_bookkeeping_services"
                | "advertising_services"
                | "agricultural_cooperative"
                | "airlines_air_carriers"
                | "airports_flying_fields"
                | "ambulance_services"
                | "amusement_parks_carnivals"
                | "antique_reproductions"
                | "antique_shops"
                | "aquariums"
                | "architectural_surveying_services"
                | "art_dealers_and_galleries"
                | "artists_supply_and_craft_shops"
                | "auto_and_home_supply_stores"
                | "auto_body_repair_shops"
                | "auto_paint_shops"
                | "auto_service_shops"
                | "automated_cash_disburse"
                | "automated_fuel_dispensers"
                | "automobile_associations"
                | "automotive_parts_and_accessories_stores"
                | "automotive_tire_stores"
                | "bail_and_bond_payments"
                | "bakeries"
                | "bands_orchestras"
                | "barber_and_beauty_shops"
                | "betting_casino_gambling"
                | "bicycle_shops"
                | "billiard_pool_establishments"
                | "boat_dealers"
                | "boat_rentals_and_leases"
                | "book_stores"
                | "books_periodicals_and_newspapers"
                | "bowling_alleys"
                | "bus_lines"
                | "business_secretarial_schools"
                | "buying_shopping_services"
                | "cable_satellite_and_other_pay_television_and_radio"
                | "camera_and_photographic_supply_stores"
                | "candy_nut_and_confectionery_stores"
                | "car_and_truck_dealers_new_used"
                | "car_and_truck_dealers_used_only"
                | "car_rental_agencies"
                | "car_washes"
                | "carpentry_services"
                | "carpet_upholstery_cleaning"
                | "caterers"
                | "charitable_and_social_service_organizations_fundraising"
                | "chemicals_and_allied_products"
                | "child_care_services"
                | "childrens_and_infants_wear_stores"
                | "chiropodists_podiatrists"
                | "chiropractors"
                | "cigar_stores_and_stands"
                | "civic_social_fraternal_associations"
                | "cleaning_and_maintenance"
                | "clothing_rental"
                | "colleges_universities"
                | "commercial_equipment"
                | "commercial_footwear"
                | "commercial_photography_art_and_graphics"
                | "commuter_transport_and_ferries"
                | "computer_network_services"
                | "computer_programming"
                | "computer_repair"
                | "computer_software_stores"
                | "computers_peripherals_and_software"
                | "concrete_work_services"
                | "construction_materials"
                | "consulting_public_relations"
                | "correspondence_schools"
                | "cosmetic_stores"
                | "counseling_services"
                | "country_clubs"
                | "courier_services"
                | "court_costs"
                | "credit_reporting_agencies"
                | "cruise_lines"
                | "dairy_products_stores"
                | "dance_hall_studios_schools"
                | "dating_escort_services"
                | "dentists_orthodontists"
                | "department_stores"
                | "detective_agencies"
                | "digital_goods_applications"
                | "digital_goods_games"
                | "digital_goods_large_volume"
                | "digital_goods_media"
                | "direct_marketing_catalog_merchant"
                | "direct_marketing_combination_catalog_and_retail_merchant"
                | "direct_marketing_inbound_telemarketing"
                | "direct_marketing_insurance_services"
                | "direct_marketing_other"
                | "direct_marketing_outbound_telemarketing"
                | "direct_marketing_subscription"
                | "direct_marketing_travel"
                | "discount_stores"
                | "doctors"
                | "door_to_door_sales"
                | "drapery_window_covering_and_upholstery_stores"
                | "drinking_places"
                | "drug_stores_and_pharmacies"
                | "drugs_drug_proprietaries_and_druggist_sundries"
                | "dry_cleaners"
                | "durable_goods"
                | "duty_free_stores"
                | "eating_places_restaurants"
                | "educational_services"
                | "electric_razor_stores"
                | "electrical_parts_and_equipment"
                | "electrical_services"
                | "electronics_repair_shops"
                | "electronics_stores"
                | "elementary_secondary_schools"
                | "employment_temp_agencies"
                | "equipment_rental"
                | "exterminating_services"
                | "family_clothing_stores"
                | "fast_food_restaurants"
                | "financial_institutions"
                | "fines_government_administrative_entities"
                | "fireplace_fireplace_screens_and_accessories_stores"
                | "floor_covering_stores"
                | "florists"
                | "florists_supplies_nursery_stock_and_flowers"
                | "freezer_and_locker_meat_provisioners"
                | "fuel_dealers_non_automotive"
                | "funeral_services_crematories"
                | "furniture_home_furnishings_and_equipment_stores_except_appliances"
                | "furniture_repair_refinishing"
                | "furriers_and_fur_shops"
                | "general_services"
                | "gift_card_novelty_and_souvenir_shops"
                | "glass_paint_and_wallpaper_stores"
                | "glassware_crystal_stores"
                | "golf_courses_public"
                | "government_services"
                | "grocery_stores_supermarkets"
                | "hardware_equipment_and_supplies"
                | "hardware_stores"
                | "health_and_beauty_spas"
                | "hearing_aids_sales_and_supplies"
                | "heating_plumbing_a_c"
                | "hobby_toy_and_game_shops"
                | "home_supply_warehouse_stores"
                | "hospitals"
                | "hotels_motels_and_resorts"
                | "household_appliance_stores"
                | "industrial_supplies"
                | "information_retrieval_services"
                | "insurance_default"
                | "insurance_underwriting_premiums"
                | "intra_company_purchases"
                | "jewelry_stores_watches_clocks_and_silverware_stores"
                | "landscaping_services"
                | "laundries"
                | "laundry_cleaning_services"
                | "legal_services_attorneys"
                | "luggage_and_leather_goods_stores"
                | "lumber_building_materials_stores"
                | "manual_cash_disburse"
                | "marinas_service_and_supplies"
                | "masonry_stonework_and_plaster"
                | "massage_parlors"
                | "medical_and_dental_labs"
                | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
                | "medical_services"
                | "membership_organizations"
                | "mens_and_boys_clothing_and_accessories_stores"
                | "mens_womens_clothing_stores"
                | "metal_service_centers"
                | "miscellaneous"
                | "miscellaneous_apparel_and_accessory_shops"
                | "miscellaneous_auto_dealers"
                | "miscellaneous_business_services"
                | "miscellaneous_food_stores"
                | "miscellaneous_general_merchandise"
                | "miscellaneous_general_services"
                | "miscellaneous_home_furnishing_specialty_stores"
                | "miscellaneous_publishing_and_printing"
                | "miscellaneous_recreation_services"
                | "miscellaneous_repair_shops"
                | "miscellaneous_specialty_retail"
                | "mobile_home_dealers"
                | "motion_picture_theaters"
                | "motor_freight_carriers_and_trucking"
                | "motor_homes_dealers"
                | "motor_vehicle_supplies_and_new_parts"
                | "motorcycle_shops_and_dealers"
                | "motorcycle_shops_dealers"
                | "music_stores_musical_instruments_pianos_and_sheet_music"
                | "news_dealers_and_newsstands"
                | "non_fi_money_orders"
                | "non_fi_stored_value_card_purchase_load"
                | "nondurable_goods"
                | "nurseries_lawn_and_garden_supply_stores"
                | "nursing_personal_care"
                | "office_and_commercial_furniture"
                | "opticians_eyeglasses"
                | "optometrists_ophthalmologist"
                | "orthopedic_goods_prosthetic_devices"
                | "osteopaths"
                | "package_stores_beer_wine_and_liquor"
                | "paints_varnishes_and_supplies"
                | "parking_lots_garages"
                | "passenger_railways"
                | "pawn_shops"
                | "pet_shops_pet_food_and_supplies"
                | "petroleum_and_petroleum_products"
                | "photo_developing"
                | "photographic_photocopy_microfilm_equipment_and_supplies"
                | "photographic_studios"
                | "picture_video_production"
                | "piece_goods_notions_and_other_dry_goods"
                | "plumbing_heating_equipment_and_supplies"
                | "political_organizations"
                | "postal_services_government_only"
                | "precious_stones_and_metals_watches_and_jewelry"
                | "professional_services"
                | "public_warehousing_and_storage"
                | "quick_copy_repro_and_blueprint"
                | "railroads"
                | "real_estate_agents_and_managers_rentals"
                | "record_stores"
                | "recreational_vehicle_rentals"
                | "religious_goods_stores"
                | "religious_organizations"
                | "roofing_siding_sheet_metal"
                | "secretarial_support_services"
                | "security_brokers_dealers"
                | "service_stations"
                | "sewing_needlework_fabric_and_piece_goods_stores"
                | "shoe_repair_hat_cleaning"
                | "shoe_stores"
                | "small_appliance_repair"
                | "snowmobile_dealers"
                | "special_trade_services"
                | "specialty_cleaning"
                | "sporting_goods_stores"
                | "sporting_recreation_camps"
                | "sports_and_riding_apparel_stores"
                | "sports_clubs_fields"
                | "stamp_and_coin_stores"
                | "stationary_office_supplies_printing_and_writing_paper"
                | "stationery_stores_office_and_school_supply_stores"
                | "swimming_pools_sales"
                | "t_ui_travel_germany"
                | "tailors_alterations"
                | "tax_payments_government_agencies"
                | "tax_preparation_services"
                | "taxicabs_limousines"
                | "telecommunication_equipment_and_telephone_sales"
                | "telecommunication_services"
                | "telegraph_services"
                | "tent_and_awning_shops"
                | "testing_laboratories"
                | "theatrical_ticket_agencies"
                | "timeshares"
                | "tire_retreading_and_repair"
                | "tolls_bridge_fees"
                | "tourist_attractions_and_exhibits"
                | "towing_services"
                | "trailer_parks_campgrounds"
                | "transportation_services"
                | "travel_agencies_tour_operators"
                | "truck_stop_iteration"
                | "truck_utility_trailer_rentals"
                | "typesetting_plate_making_and_related_services"
                | "typewriter_stores"
                | "u_s_federal_government_agencies_or_departments"
                | "uniforms_commercial_clothing"
                | "used_merchandise_and_secondhand_stores"
                | "utilities"
                | "variety_stores"
                | "veterinary_services"
                | "video_amusement_game_supplies"
                | "video_game_arcades"
                | "video_tape_rental_stores"
                | "vocational_trade_schools"
                | "watch_jewelry_repair"
                | "welding_repair"
                | "wholesale_clubs"
                | "wig_and_toupee_stores"
                | "wires_money_orders"
                | "womens_accessory_and_specialty_shops"
                | "womens_ready_to_wear_stores"
                | "wrecking_and_salvage_yards"
              )[];
              interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
            }[];
          };
          /** Whether authorizations can be approved on this card. Defaults to `inactive`. */
          status?: "active" | "inactive";
          /** The type of card to issue. Possible values are `physical` or `virtual`. */
          type: "physical" | "virtual";
        };
      };
    };
  };
  /** <p>Retrieves an Issuing <code>Card</code> object.</p> */
  GetIssuingCardsCard: {
    parameters: {
      path: {
        card: string;
      };
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["issuing.card"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Updates the specified Issuing <code>Card</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
  PostIssuingCardsCard: {
    parameters: {
      path: {
        card: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["issuing.card"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Reason why the `status` of this card is `canceled`. */
          cancellation_reason?: "lost" | "stolen";
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** Spending rules that give you some control over how your cards can be used. Refer to our [authorizations](https://stripe.com/docs/issuing/purchases/authorizations) documentation for more details. */
          spending_controls?: {
            allowed_categories?: (
              | "ac_refrigeration_repair"
              | "accounting_bookkeeping_services"
              | "advertising_services"
              | "agricultural_cooperative"
              | "airlines_air_carriers"
              | "airports_flying_fields"
              | "ambulance_services"
              | "amusement_parks_carnivals"
              | "antique_reproductions"
              | "antique_shops"
              | "aquariums"
              | "architectural_surveying_services"
              | "art_dealers_and_galleries"
              | "artists_supply_and_craft_shops"
              | "auto_and_home_supply_stores"
              | "auto_body_repair_shops"
              | "auto_paint_shops"
              | "auto_service_shops"
              | "automated_cash_disburse"
              | "automated_fuel_dispensers"
              | "automobile_associations"
              | "automotive_parts_and_accessories_stores"
              | "automotive_tire_stores"
              | "bail_and_bond_payments"
              | "bakeries"
              | "bands_orchestras"
              | "barber_and_beauty_shops"
              | "betting_casino_gambling"
              | "bicycle_shops"
              | "billiard_pool_establishments"
              | "boat_dealers"
              | "boat_rentals_and_leases"
              | "book_stores"
              | "books_periodicals_and_newspapers"
              | "bowling_alleys"
              | "bus_lines"
              | "business_secretarial_schools"
              | "buying_shopping_services"
              | "cable_satellite_and_other_pay_television_and_radio"
              | "camera_and_photographic_supply_stores"
              | "candy_nut_and_confectionery_stores"
              | "car_and_truck_dealers_new_used"
              | "car_and_truck_dealers_used_only"
              | "car_rental_agencies"
              | "car_washes"
              | "carpentry_services"
              | "carpet_upholstery_cleaning"
              | "caterers"
              | "charitable_and_social_service_organizations_fundraising"
              | "chemicals_and_allied_products"
              | "child_care_services"
              | "childrens_and_infants_wear_stores"
              | "chiropodists_podiatrists"
              | "chiropractors"
              | "cigar_stores_and_stands"
              | "civic_social_fraternal_associations"
              | "cleaning_and_maintenance"
              | "clothing_rental"
              | "colleges_universities"
              | "commercial_equipment"
              | "commercial_footwear"
              | "commercial_photography_art_and_graphics"
              | "commuter_transport_and_ferries"
              | "computer_network_services"
              | "computer_programming"
              | "computer_repair"
              | "computer_software_stores"
              | "computers_peripherals_and_software"
              | "concrete_work_services"
              | "construction_materials"
              | "consulting_public_relations"
              | "correspondence_schools"
              | "cosmetic_stores"
              | "counseling_services"
              | "country_clubs"
              | "courier_services"
              | "court_costs"
              | "credit_reporting_agencies"
              | "cruise_lines"
              | "dairy_products_stores"
              | "dance_hall_studios_schools"
              | "dating_escort_services"
              | "dentists_orthodontists"
              | "department_stores"
              | "detective_agencies"
              | "digital_goods_applications"
              | "digital_goods_games"
              | "digital_goods_large_volume"
              | "digital_goods_media"
              | "direct_marketing_catalog_merchant"
              | "direct_marketing_combination_catalog_and_retail_merchant"
              | "direct_marketing_inbound_telemarketing"
              | "direct_marketing_insurance_services"
              | "direct_marketing_other"
              | "direct_marketing_outbound_telemarketing"
              | "direct_marketing_subscription"
              | "direct_marketing_travel"
              | "discount_stores"
              | "doctors"
              | "door_to_door_sales"
              | "drapery_window_covering_and_upholstery_stores"
              | "drinking_places"
              | "drug_stores_and_pharmacies"
              | "drugs_drug_proprietaries_and_druggist_sundries"
              | "dry_cleaners"
              | "durable_goods"
              | "duty_free_stores"
              | "eating_places_restaurants"
              | "educational_services"
              | "electric_razor_stores"
              | "electrical_parts_and_equipment"
              | "electrical_services"
              | "electronics_repair_shops"
              | "electronics_stores"
              | "elementary_secondary_schools"
              | "employment_temp_agencies"
              | "equipment_rental"
              | "exterminating_services"
              | "family_clothing_stores"
              | "fast_food_restaurants"
              | "financial_institutions"
              | "fines_government_administrative_entities"
              | "fireplace_fireplace_screens_and_accessories_stores"
              | "floor_covering_stores"
              | "florists"
              | "florists_supplies_nursery_stock_and_flowers"
              | "freezer_and_locker_meat_provisioners"
              | "fuel_dealers_non_automotive"
              | "funeral_services_crematories"
              | "furniture_home_furnishings_and_equipment_stores_except_appliances"
              | "furniture_repair_refinishing"
              | "furriers_and_fur_shops"
              | "general_services"
              | "gift_card_novelty_and_souvenir_shops"
              | "glass_paint_and_wallpaper_stores"
              | "glassware_crystal_stores"
              | "golf_courses_public"
              | "government_services"
              | "grocery_stores_supermarkets"
              | "hardware_equipment_and_supplies"
              | "hardware_stores"
              | "health_and_beauty_spas"
              | "hearing_aids_sales_and_supplies"
              | "heating_plumbing_a_c"
              | "hobby_toy_and_game_shops"
              | "home_supply_warehouse_stores"
              | "hospitals"
              | "hotels_motels_and_resorts"
              | "household_appliance_stores"
              | "industrial_supplies"
              | "information_retrieval_services"
              | "insurance_default"
              | "insurance_underwriting_premiums"
              | "intra_company_purchases"
              | "jewelry_stores_watches_clocks_and_silverware_stores"
              | "landscaping_services"
              | "laundries"
              | "laundry_cleaning_services"
              | "legal_services_attorneys"
              | "luggage_and_leather_goods_stores"
              | "lumber_building_materials_stores"
              | "manual_cash_disburse"
              | "marinas_service_and_supplies"
              | "masonry_stonework_and_plaster"
              | "massage_parlors"
              | "medical_and_dental_labs"
              | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
              | "medical_services"
              | "membership_organizations"
              | "mens_and_boys_clothing_and_accessories_stores"
              | "mens_womens_clothing_stores"
              | "metal_service_centers"
              | "miscellaneous"
              | "miscellaneous_apparel_and_accessory_shops"
              | "miscellaneous_auto_dealers"
              | "miscellaneous_business_services"
              | "miscellaneous_food_stores"
              | "miscellaneous_general_merchandise"
              | "miscellaneous_general_services"
              | "miscellaneous_home_furnishing_specialty_stores"
              | "miscellaneous_publishing_and_printing"
              | "miscellaneous_recreation_services"
              | "miscellaneous_repair_shops"
              | "miscellaneous_specialty_retail"
              | "mobile_home_dealers"
              | "motion_picture_theaters"
              | "motor_freight_carriers_and_trucking"
              | "motor_homes_dealers"
              | "motor_vehicle_supplies_and_new_parts"
              | "motorcycle_shops_and_dealers"
              | "motorcycle_shops_dealers"
              | "music_stores_musical_instruments_pianos_and_sheet_music"
              | "news_dealers_and_newsstands"
              | "non_fi_money_orders"
              | "non_fi_stored_value_card_purchase_load"
              | "nondurable_goods"
              | "nurseries_lawn_and_garden_supply_stores"
              | "nursing_personal_care"
              | "office_and_commercial_furniture"
              | "opticians_eyeglasses"
              | "optometrists_ophthalmologist"
              | "orthopedic_goods_prosthetic_devices"
              | "osteopaths"
              | "package_stores_beer_wine_and_liquor"
              | "paints_varnishes_and_supplies"
              | "parking_lots_garages"
              | "passenger_railways"
              | "pawn_shops"
              | "pet_shops_pet_food_and_supplies"
              | "petroleum_and_petroleum_products"
              | "photo_developing"
              | "photographic_photocopy_microfilm_equipment_and_supplies"
              | "photographic_studios"
              | "picture_video_production"
              | "piece_goods_notions_and_other_dry_goods"
              | "plumbing_heating_equipment_and_supplies"
              | "political_organizations"
              | "postal_services_government_only"
              | "precious_stones_and_metals_watches_and_jewelry"
              | "professional_services"
              | "public_warehousing_and_storage"
              | "quick_copy_repro_and_blueprint"
              | "railroads"
              | "real_estate_agents_and_managers_rentals"
              | "record_stores"
              | "recreational_vehicle_rentals"
              | "religious_goods_stores"
              | "religious_organizations"
              | "roofing_siding_sheet_metal"
              | "secretarial_support_services"
              | "security_brokers_dealers"
              | "service_stations"
              | "sewing_needlework_fabric_and_piece_goods_stores"
              | "shoe_repair_hat_cleaning"
              | "shoe_stores"
              | "small_appliance_repair"
              | "snowmobile_dealers"
              | "special_trade_services"
              | "specialty_cleaning"
              | "sporting_goods_stores"
              | "sporting_recreation_camps"
              | "sports_and_riding_apparel_stores"
              | "sports_clubs_fields"
              | "stamp_and_coin_stores"
              | "stationary_office_supplies_printing_and_writing_paper"
              | "stationery_stores_office_and_school_supply_stores"
              | "swimming_pools_sales"
              | "t_ui_travel_germany"
              | "tailors_alterations"
              | "tax_payments_government_agencies"
              | "tax_preparation_services"
              | "taxicabs_limousines"
              | "telecommunication_equipment_and_telephone_sales"
              | "telecommunication_services"
              | "telegraph_services"
              | "tent_and_awning_shops"
              | "testing_laboratories"
              | "theatrical_ticket_agencies"
              | "timeshares"
              | "tire_retreading_and_repair"
              | "tolls_bridge_fees"
              | "tourist_attractions_and_exhibits"
              | "towing_services"
              | "trailer_parks_campgrounds"
              | "transportation_services"
              | "travel_agencies_tour_operators"
              | "truck_stop_iteration"
              | "truck_utility_trailer_rentals"
              | "typesetting_plate_making_and_related_services"
              | "typewriter_stores"
              | "u_s_federal_government_agencies_or_departments"
              | "uniforms_commercial_clothing"
              | "used_merchandise_and_secondhand_stores"
              | "utilities"
              | "variety_stores"
              | "veterinary_services"
              | "video_amusement_game_supplies"
              | "video_game_arcades"
              | "video_tape_rental_stores"
              | "vocational_trade_schools"
              | "watch_jewelry_repair"
              | "welding_repair"
              | "wholesale_clubs"
              | "wig_and_toupee_stores"
              | "wires_money_orders"
              | "womens_accessory_and_specialty_shops"
              | "womens_ready_to_wear_stores"
              | "wrecking_and_salvage_yards"
            )[];
            blocked_categories?: (
              | "ac_refrigeration_repair"
              | "accounting_bookkeeping_services"
              | "advertising_services"
              | "agricultural_cooperative"
              | "airlines_air_carriers"
              | "airports_flying_fields"
              | "ambulance_services"
              | "amusement_parks_carnivals"
              | "antique_reproductions"
              | "antique_shops"
              | "aquariums"
              | "architectural_surveying_services"
              | "art_dealers_and_galleries"
              | "artists_supply_and_craft_shops"
              | "auto_and_home_supply_stores"
              | "auto_body_repair_shops"
              | "auto_paint_shops"
              | "auto_service_shops"
              | "automated_cash_disburse"
              | "automated_fuel_dispensers"
              | "automobile_associations"
              | "automotive_parts_and_accessories_stores"
              | "automotive_tire_stores"
              | "bail_and_bond_payments"
              | "bakeries"
              | "bands_orchestras"
              | "barber_and_beauty_shops"
              | "betting_casino_gambling"
              | "bicycle_shops"
              | "billiard_pool_establishments"
              | "boat_dealers"
              | "boat_rentals_and_leases"
              | "book_stores"
              | "books_periodicals_and_newspapers"
              | "bowling_alleys"
              | "bus_lines"
              | "business_secretarial_schools"
              | "buying_shopping_services"
              | "cable_satellite_and_other_pay_television_and_radio"
              | "camera_and_photographic_supply_stores"
              | "candy_nut_and_confectionery_stores"
              | "car_and_truck_dealers_new_used"
              | "car_and_truck_dealers_used_only"
              | "car_rental_agencies"
              | "car_washes"
              | "carpentry_services"
              | "carpet_upholstery_cleaning"
              | "caterers"
              | "charitable_and_social_service_organizations_fundraising"
              | "chemicals_and_allied_products"
              | "child_care_services"
              | "childrens_and_infants_wear_stores"
              | "chiropodists_podiatrists"
              | "chiropractors"
              | "cigar_stores_and_stands"
              | "civic_social_fraternal_associations"
              | "cleaning_and_maintenance"
              | "clothing_rental"
              | "colleges_universities"
              | "commercial_equipment"
              | "commercial_footwear"
              | "commercial_photography_art_and_graphics"
              | "commuter_transport_and_ferries"
              | "computer_network_services"
              | "computer_programming"
              | "computer_repair"
              | "computer_software_stores"
              | "computers_peripherals_and_software"
              | "concrete_work_services"
              | "construction_materials"
              | "consulting_public_relations"
              | "correspondence_schools"
              | "cosmetic_stores"
              | "counseling_services"
              | "country_clubs"
              | "courier_services"
              | "court_costs"
              | "credit_reporting_agencies"
              | "cruise_lines"
              | "dairy_products_stores"
              | "dance_hall_studios_schools"
              | "dating_escort_services"
              | "dentists_orthodontists"
              | "department_stores"
              | "detective_agencies"
              | "digital_goods_applications"
              | "digital_goods_games"
              | "digital_goods_large_volume"
              | "digital_goods_media"
              | "direct_marketing_catalog_merchant"
              | "direct_marketing_combination_catalog_and_retail_merchant"
              | "direct_marketing_inbound_telemarketing"
              | "direct_marketing_insurance_services"
              | "direct_marketing_other"
              | "direct_marketing_outbound_telemarketing"
              | "direct_marketing_subscription"
              | "direct_marketing_travel"
              | "discount_stores"
              | "doctors"
              | "door_to_door_sales"
              | "drapery_window_covering_and_upholstery_stores"
              | "drinking_places"
              | "drug_stores_and_pharmacies"
              | "drugs_drug_proprietaries_and_druggist_sundries"
              | "dry_cleaners"
              | "durable_goods"
              | "duty_free_stores"
              | "eating_places_restaurants"
              | "educational_services"
              | "electric_razor_stores"
              | "electrical_parts_and_equipment"
              | "electrical_services"
              | "electronics_repair_shops"
              | "electronics_stores"
              | "elementary_secondary_schools"
              | "employment_temp_agencies"
              | "equipment_rental"
              | "exterminating_services"
              | "family_clothing_stores"
              | "fast_food_restaurants"
              | "financial_institutions"
              | "fines_government_administrative_entities"
              | "fireplace_fireplace_screens_and_accessories_stores"
              | "floor_covering_stores"
              | "florists"
              | "florists_supplies_nursery_stock_and_flowers"
              | "freezer_and_locker_meat_provisioners"
              | "fuel_dealers_non_automotive"
              | "funeral_services_crematories"
              | "furniture_home_furnishings_and_equipment_stores_except_appliances"
              | "furniture_repair_refinishing"
              | "furriers_and_fur_shops"
              | "general_services"
              | "gift_card_novelty_and_souvenir_shops"
              | "glass_paint_and_wallpaper_stores"
              | "glassware_crystal_stores"
              | "golf_courses_public"
              | "government_services"
              | "grocery_stores_supermarkets"
              | "hardware_equipment_and_supplies"
              | "hardware_stores"
              | "health_and_beauty_spas"
              | "hearing_aids_sales_and_supplies"
              | "heating_plumbing_a_c"
              | "hobby_toy_and_game_shops"
              | "home_supply_warehouse_stores"
              | "hospitals"
              | "hotels_motels_and_resorts"
              | "household_appliance_stores"
              | "industrial_supplies"
              | "information_retrieval_services"
              | "insurance_default"
              | "insurance_underwriting_premiums"
              | "intra_company_purchases"
              | "jewelry_stores_watches_clocks_and_silverware_stores"
              | "landscaping_services"
              | "laundries"
              | "laundry_cleaning_services"
              | "legal_services_attorneys"
              | "luggage_and_leather_goods_stores"
              | "lumber_building_materials_stores"
              | "manual_cash_disburse"
              | "marinas_service_and_supplies"
              | "masonry_stonework_and_plaster"
              | "massage_parlors"
              | "medical_and_dental_labs"
              | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
              | "medical_services"
              | "membership_organizations"
              | "mens_and_boys_clothing_and_accessories_stores"
              | "mens_womens_clothing_stores"
              | "metal_service_centers"
              | "miscellaneous"
              | "miscellaneous_apparel_and_accessory_shops"
              | "miscellaneous_auto_dealers"
              | "miscellaneous_business_services"
              | "miscellaneous_food_stores"
              | "miscellaneous_general_merchandise"
              | "miscellaneous_general_services"
              | "miscellaneous_home_furnishing_specialty_stores"
              | "miscellaneous_publishing_and_printing"
              | "miscellaneous_recreation_services"
              | "miscellaneous_repair_shops"
              | "miscellaneous_specialty_retail"
              | "mobile_home_dealers"
              | "motion_picture_theaters"
              | "motor_freight_carriers_and_trucking"
              | "motor_homes_dealers"
              | "motor_vehicle_supplies_and_new_parts"
              | "motorcycle_shops_and_dealers"
              | "motorcycle_shops_dealers"
              | "music_stores_musical_instruments_pianos_and_sheet_music"
              | "news_dealers_and_newsstands"
              | "non_fi_money_orders"
              | "non_fi_stored_value_card_purchase_load"
              | "nondurable_goods"
              | "nurseries_lawn_and_garden_supply_stores"
              | "nursing_personal_care"
              | "office_and_commercial_furniture"
              | "opticians_eyeglasses"
              | "optometrists_ophthalmologist"
              | "orthopedic_goods_prosthetic_devices"
              | "osteopaths"
              | "package_stores_beer_wine_and_liquor"
              | "paints_varnishes_and_supplies"
              | "parking_lots_garages"
              | "passenger_railways"
              | "pawn_shops"
              | "pet_shops_pet_food_and_supplies"
              | "petroleum_and_petroleum_products"
              | "photo_developing"
              | "photographic_photocopy_microfilm_equipment_and_supplies"
              | "photographic_studios"
              | "picture_video_production"
              | "piece_goods_notions_and_other_dry_goods"
              | "plumbing_heating_equipment_and_supplies"
              | "political_organizations"
              | "postal_services_government_only"
              | "precious_stones_and_metals_watches_and_jewelry"
              | "professional_services"
              | "public_warehousing_and_storage"
              | "quick_copy_repro_and_blueprint"
              | "railroads"
              | "real_estate_agents_and_managers_rentals"
              | "record_stores"
              | "recreational_vehicle_rentals"
              | "religious_goods_stores"
              | "religious_organizations"
              | "roofing_siding_sheet_metal"
              | "secretarial_support_services"
              | "security_brokers_dealers"
              | "service_stations"
              | "sewing_needlework_fabric_and_piece_goods_stores"
              | "shoe_repair_hat_cleaning"
              | "shoe_stores"
              | "small_appliance_repair"
              | "snowmobile_dealers"
              | "special_trade_services"
              | "specialty_cleaning"
              | "sporting_goods_stores"
              | "sporting_recreation_camps"
              | "sports_and_riding_apparel_stores"
              | "sports_clubs_fields"
              | "stamp_and_coin_stores"
              | "stationary_office_supplies_printing_and_writing_paper"
              | "stationery_stores_office_and_school_supply_stores"
              | "swimming_pools_sales"
              | "t_ui_travel_germany"
              | "tailors_alterations"
              | "tax_payments_government_agencies"
              | "tax_preparation_services"
              | "taxicabs_limousines"
              | "telecommunication_equipment_and_telephone_sales"
              | "telecommunication_services"
              | "telegraph_services"
              | "tent_and_awning_shops"
              | "testing_laboratories"
              | "theatrical_ticket_agencies"
              | "timeshares"
              | "tire_retreading_and_repair"
              | "tolls_bridge_fees"
              | "tourist_attractions_and_exhibits"
              | "towing_services"
              | "trailer_parks_campgrounds"
              | "transportation_services"
              | "travel_agencies_tour_operators"
              | "truck_stop_iteration"
              | "truck_utility_trailer_rentals"
              | "typesetting_plate_making_and_related_services"
              | "typewriter_stores"
              | "u_s_federal_government_agencies_or_departments"
              | "uniforms_commercial_clothing"
              | "used_merchandise_and_secondhand_stores"
              | "utilities"
              | "variety_stores"
              | "veterinary_services"
              | "video_amusement_game_supplies"
              | "video_game_arcades"
              | "video_tape_rental_stores"
              | "vocational_trade_schools"
              | "watch_jewelry_repair"
              | "welding_repair"
              | "wholesale_clubs"
              | "wig_and_toupee_stores"
              | "wires_money_orders"
              | "womens_accessory_and_specialty_shops"
              | "womens_ready_to_wear_stores"
              | "wrecking_and_salvage_yards"
            )[];
            spending_limits?: {
              amount: number;
              categories?: (
                | "ac_refrigeration_repair"
                | "accounting_bookkeeping_services"
                | "advertising_services"
                | "agricultural_cooperative"
                | "airlines_air_carriers"
                | "airports_flying_fields"
                | "ambulance_services"
                | "amusement_parks_carnivals"
                | "antique_reproductions"
                | "antique_shops"
                | "aquariums"
                | "architectural_surveying_services"
                | "art_dealers_and_galleries"
                | "artists_supply_and_craft_shops"
                | "auto_and_home_supply_stores"
                | "auto_body_repair_shops"
                | "auto_paint_shops"
                | "auto_service_shops"
                | "automated_cash_disburse"
                | "automated_fuel_dispensers"
                | "automobile_associations"
                | "automotive_parts_and_accessories_stores"
                | "automotive_tire_stores"
                | "bail_and_bond_payments"
                | "bakeries"
                | "bands_orchestras"
                | "barber_and_beauty_shops"
                | "betting_casino_gambling"
                | "bicycle_shops"
                | "billiard_pool_establishments"
                | "boat_dealers"
                | "boat_rentals_and_leases"
                | "book_stores"
                | "books_periodicals_and_newspapers"
                | "bowling_alleys"
                | "bus_lines"
                | "business_secretarial_schools"
                | "buying_shopping_services"
                | "cable_satellite_and_other_pay_television_and_radio"
                | "camera_and_photographic_supply_stores"
                | "candy_nut_and_confectionery_stores"
                | "car_and_truck_dealers_new_used"
                | "car_and_truck_dealers_used_only"
                | "car_rental_agencies"
                | "car_washes"
                | "carpentry_services"
                | "carpet_upholstery_cleaning"
                | "caterers"
                | "charitable_and_social_service_organizations_fundraising"
                | "chemicals_and_allied_products"
                | "child_care_services"
                | "childrens_and_infants_wear_stores"
                | "chiropodists_podiatrists"
                | "chiropractors"
                | "cigar_stores_and_stands"
                | "civic_social_fraternal_associations"
                | "cleaning_and_maintenance"
                | "clothing_rental"
                | "colleges_universities"
                | "commercial_equipment"
                | "commercial_footwear"
                | "commercial_photography_art_and_graphics"
                | "commuter_transport_and_ferries"
                | "computer_network_services"
                | "computer_programming"
                | "computer_repair"
                | "computer_software_stores"
                | "computers_peripherals_and_software"
                | "concrete_work_services"
                | "construction_materials"
                | "consulting_public_relations"
                | "correspondence_schools"
                | "cosmetic_stores"
                | "counseling_services"
                | "country_clubs"
                | "courier_services"
                | "court_costs"
                | "credit_reporting_agencies"
                | "cruise_lines"
                | "dairy_products_stores"
                | "dance_hall_studios_schools"
                | "dating_escort_services"
                | "dentists_orthodontists"
                | "department_stores"
                | "detective_agencies"
                | "digital_goods_applications"
                | "digital_goods_games"
                | "digital_goods_large_volume"
                | "digital_goods_media"
                | "direct_marketing_catalog_merchant"
                | "direct_marketing_combination_catalog_and_retail_merchant"
                | "direct_marketing_inbound_telemarketing"
                | "direct_marketing_insurance_services"
                | "direct_marketing_other"
                | "direct_marketing_outbound_telemarketing"
                | "direct_marketing_subscription"
                | "direct_marketing_travel"
                | "discount_stores"
                | "doctors"
                | "door_to_door_sales"
                | "drapery_window_covering_and_upholstery_stores"
                | "drinking_places"
                | "drug_stores_and_pharmacies"
                | "drugs_drug_proprietaries_and_druggist_sundries"
                | "dry_cleaners"
                | "durable_goods"
                | "duty_free_stores"
                | "eating_places_restaurants"
                | "educational_services"
                | "electric_razor_stores"
                | "electrical_parts_and_equipment"
                | "electrical_services"
                | "electronics_repair_shops"
                | "electronics_stores"
                | "elementary_secondary_schools"
                | "employment_temp_agencies"
                | "equipment_rental"
                | "exterminating_services"
                | "family_clothing_stores"
                | "fast_food_restaurants"
                | "financial_institutions"
                | "fines_government_administrative_entities"
                | "fireplace_fireplace_screens_and_accessories_stores"
                | "floor_covering_stores"
                | "florists"
                | "florists_supplies_nursery_stock_and_flowers"
                | "freezer_and_locker_meat_provisioners"
                | "fuel_dealers_non_automotive"
                | "funeral_services_crematories"
                | "furniture_home_furnishings_and_equipment_stores_except_appliances"
                | "furniture_repair_refinishing"
                | "furriers_and_fur_shops"
                | "general_services"
                | "gift_card_novelty_and_souvenir_shops"
                | "glass_paint_and_wallpaper_stores"
                | "glassware_crystal_stores"
                | "golf_courses_public"
                | "government_services"
                | "grocery_stores_supermarkets"
                | "hardware_equipment_and_supplies"
                | "hardware_stores"
                | "health_and_beauty_spas"
                | "hearing_aids_sales_and_supplies"
                | "heating_plumbing_a_c"
                | "hobby_toy_and_game_shops"
                | "home_supply_warehouse_stores"
                | "hospitals"
                | "hotels_motels_and_resorts"
                | "household_appliance_stores"
                | "industrial_supplies"
                | "information_retrieval_services"
                | "insurance_default"
                | "insurance_underwriting_premiums"
                | "intra_company_purchases"
                | "jewelry_stores_watches_clocks_and_silverware_stores"
                | "landscaping_services"
                | "laundries"
                | "laundry_cleaning_services"
                | "legal_services_attorneys"
                | "luggage_and_leather_goods_stores"
                | "lumber_building_materials_stores"
                | "manual_cash_disburse"
                | "marinas_service_and_supplies"
                | "masonry_stonework_and_plaster"
                | "massage_parlors"
                | "medical_and_dental_labs"
                | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
                | "medical_services"
                | "membership_organizations"
                | "mens_and_boys_clothing_and_accessories_stores"
                | "mens_womens_clothing_stores"
                | "metal_service_centers"
                | "miscellaneous"
                | "miscellaneous_apparel_and_accessory_shops"
                | "miscellaneous_auto_dealers"
                | "miscellaneous_business_services"
                | "miscellaneous_food_stores"
                | "miscellaneous_general_merchandise"
                | "miscellaneous_general_services"
                | "miscellaneous_home_furnishing_specialty_stores"
                | "miscellaneous_publishing_and_printing"
                | "miscellaneous_recreation_services"
                | "miscellaneous_repair_shops"
                | "miscellaneous_specialty_retail"
                | "mobile_home_dealers"
                | "motion_picture_theaters"
                | "motor_freight_carriers_and_trucking"
                | "motor_homes_dealers"
                | "motor_vehicle_supplies_and_new_parts"
                | "motorcycle_shops_and_dealers"
                | "motorcycle_shops_dealers"
                | "music_stores_musical_instruments_pianos_and_sheet_music"
                | "news_dealers_and_newsstands"
                | "non_fi_money_orders"
                | "non_fi_stored_value_card_purchase_load"
                | "nondurable_goods"
                | "nurseries_lawn_and_garden_supply_stores"
                | "nursing_personal_care"
                | "office_and_commercial_furniture"
                | "opticians_eyeglasses"
                | "optometrists_ophthalmologist"
                | "orthopedic_goods_prosthetic_devices"
                | "osteopaths"
                | "package_stores_beer_wine_and_liquor"
                | "paints_varnishes_and_supplies"
                | "parking_lots_garages"
                | "passenger_railways"
                | "pawn_shops"
                | "pet_shops_pet_food_and_supplies"
                | "petroleum_and_petroleum_products"
                | "photo_developing"
                | "photographic_photocopy_microfilm_equipment_and_supplies"
                | "photographic_studios"
                | "picture_video_production"
                | "piece_goods_notions_and_other_dry_goods"
                | "plumbing_heating_equipment_and_supplies"
                | "political_organizations"
                | "postal_services_government_only"
                | "precious_stones_and_metals_watches_and_jewelry"
                | "professional_services"
                | "public_warehousing_and_storage"
                | "quick_copy_repro_and_blueprint"
                | "railroads"
                | "real_estate_agents_and_managers_rentals"
                | "record_stores"
                | "recreational_vehicle_rentals"
                | "religious_goods_stores"
                | "religious_organizations"
                | "roofing_siding_sheet_metal"
                | "secretarial_support_services"
                | "security_brokers_dealers"
                | "service_stations"
                | "sewing_needlework_fabric_and_piece_goods_stores"
                | "shoe_repair_hat_cleaning"
                | "shoe_stores"
                | "small_appliance_repair"
                | "snowmobile_dealers"
                | "special_trade_services"
                | "specialty_cleaning"
                | "sporting_goods_stores"
                | "sporting_recreation_camps"
                | "sports_and_riding_apparel_stores"
                | "sports_clubs_fields"
                | "stamp_and_coin_stores"
                | "stationary_office_supplies_printing_and_writing_paper"
                | "stationery_stores_office_and_school_supply_stores"
                | "swimming_pools_sales"
                | "t_ui_travel_germany"
                | "tailors_alterations"
                | "tax_payments_government_agencies"
                | "tax_preparation_services"
                | "taxicabs_limousines"
                | "telecommunication_equipment_and_telephone_sales"
                | "telecommunication_services"
                | "telegraph_services"
                | "tent_and_awning_shops"
                | "testing_laboratories"
                | "theatrical_ticket_agencies"
                | "timeshares"
                | "tire_retreading_and_repair"
                | "tolls_bridge_fees"
                | "tourist_attractions_and_exhibits"
                | "towing_services"
                | "trailer_parks_campgrounds"
                | "transportation_services"
                | "travel_agencies_tour_operators"
                | "truck_stop_iteration"
                | "truck_utility_trailer_rentals"
                | "typesetting_plate_making_and_related_services"
                | "typewriter_stores"
                | "u_s_federal_government_agencies_or_departments"
                | "uniforms_commercial_clothing"
                | "used_merchandise_and_secondhand_stores"
                | "utilities"
                | "variety_stores"
                | "veterinary_services"
                | "video_amusement_game_supplies"
                | "video_game_arcades"
                | "video_tape_rental_stores"
                | "vocational_trade_schools"
                | "watch_jewelry_repair"
                | "welding_repair"
                | "wholesale_clubs"
                | "wig_and_toupee_stores"
                | "wires_money_orders"
                | "womens_accessory_and_specialty_shops"
                | "womens_ready_to_wear_stores"
                | "wrecking_and_salvage_yards"
              )[];
              interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
            }[];
          };
          /** Dictates whether authorizations can be approved on this card. If this card is being canceled because it was lost or stolen, this information should be provided as `cancellation_reason`. */
          status?: "active" | "canceled" | "inactive";
        };
      };
    };
  };
  /** <p>Returns a list of Issuing <code>Dispute</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
  GetIssuingDisputes: {
    parameters: {
      query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["issuing.dispute"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Creates an Issuing <code>Dispute</code> object.</p> */
  PostIssuingDisputes: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["issuing.dispute"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: { [key: string]: string };
        };
      };
    };
  };
  /** <p>Retrieves an Issuing <code>Dispute</code> object.</p> */
  GetIssuingDisputesDispute: {
    parameters: {
      path: {
        dispute: string;
      };
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["issuing.dispute"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Updates the specified Issuing <code>Dispute</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
  PostIssuingDisputesDispute: {
    parameters: {
      path: {
        dispute: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["issuing.dispute"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: { [key: string]: string };
        };
      };
    };
  };
  /** <p>Returns a list of Issuing <code>Settlement</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
  GetIssuingSettlements: {
    parameters: {
      query: {
        /** Only return issuing settlements that were created during the given date interval. */
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["issuing.settlement"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Retrieves an Issuing <code>Settlement</code> object.</p> */
  GetIssuingSettlementsSettlement: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        settlement: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["issuing.settlement"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Updates the specified Issuing <code>Settlement</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
  PostIssuingSettlementsSettlement: {
    parameters: {
      path: {
        settlement: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["issuing.settlement"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: { [key: string]: string };
        };
      };
    };
  };
  /** <p>Returns a list of Issuing <code>Transaction</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
  GetIssuingTransactions: {
    parameters: {
      query: {
        /** Only return transactions that belong to the given card. */
        card?: string;
        /** Only return transactions that belong to the given cardholder. */
        cardholder?: string;
        /** Only return transactions that were created during the given date interval. */
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["issuing.transaction"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Retrieves an Issuing <code>Transaction</code> object.</p> */
  GetIssuingTransactionsTransaction: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        transaction: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["issuing.transaction"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Updates the specified Issuing <code>Transaction</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
  PostIssuingTransactionsTransaction: {
    parameters: {
      path: {
        transaction: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["issuing.transaction"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
        };
      };
    };
  };
  /** <p>Retrieves a Mandate object.</p> */
  GetMandatesMandate: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        mandate: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["mandate"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Returns a list of your order returns. The returns are returned sorted by creation date, with the most recently created return appearing first.</p> */
  GetOrderReturns: {
    parameters: {
      query: {
        /** Date this return was created. */
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** The order to retrieve returns for. */
        order?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["order_return"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Retrieves the details of an existing order return. Supply the unique order ID from either an order return creation request or the order return list, and Stripe will return the corresponding order information.</p> */
  GetOrderReturnsId: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["order_return"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Returns a list of your orders. The orders are returned sorted by creation date, with the most recently created orders appearing first.</p> */
  GetOrders: {
    parameters: {
      query: {
        /** Date this order was created. */
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** Only return orders for the given customer. */
        customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** Only return orders with the given IDs. */
        ids?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
        /** Only return orders that have the given status. One of `created`, `paid`, `fulfilled`, or `refunded`. */
        status?: string;
        /** Filter orders based on when they were paid, fulfilled, canceled, or returned. */
        status_transitions?: {
          canceled?: Partial<{
            gt?: number;
            gte?: number;
            lt?: number;
            lte?: number;
          }> &
            Partial<number>;
          fulfilled?: Partial<{
            gt?: number;
            gte?: number;
            lt?: number;
            lte?: number;
          }> &
            Partial<number>;
          paid?: Partial<{
            gt?: number;
            gte?: number;
            lt?: number;
            lte?: number;
          }> &
            Partial<number>;
          returned?: Partial<{
            gt?: number;
            gte?: number;
            lt?: number;
            lte?: number;
          }> &
            Partial<number>;
        };
        /** Only return orders with the given upstream order IDs. */
        upstream_ids?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["order"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Creates a new order object.</p> */
  PostOrders: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["order"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** A coupon code that represents a discount to be applied to this order. Must be one-time duration and in same currency as the order. An order can have multiple coupons. */
          coupon?: string;
          /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          currency: string;
          /** The ID of an existing customer to use for this order. If provided, the customer email and shipping address will be used to create the order. Subsequently, the customer will also be charged to pay the order. If `email` or `shipping` are also provided, they will override the values retrieved from the customer object. */
          customer?: string;
          /** The email address of the customer placing the order. */
          email?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** List of items constituting the order. An order can have up to 25 items. */
          items?: {
            amount?: number;
            currency?: string;
            description?: string;
            parent?: string;
            quantity?: number;
            type?: "discount" | "shipping" | "sku" | "tax";
          }[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: { [key: string]: string };
          /** Shipping address for the order. Required if any of the SKUs are for products that have `shippable` set to true. */
          shipping?: {
            address: {
              city?: string;
              country?: string;
              line1: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            name: string;
            phone?: string;
          };
        };
      };
    };
  };
  /** <p>Retrieves the details of an existing order. Supply the unique order ID from either an order creation request or the order list, and Stripe will return the corresponding order information.</p> */
  GetOrdersId: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["order"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Updates the specific order by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
  PostOrdersId: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["order"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** A coupon code that represents a discount to be applied to this order. Must be one-time duration and in same currency as the order. An order can have multiple coupons. */
          coupon?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** The shipping method to select for fulfilling this order. If specified, must be one of the `id`s of a shipping method in the `shipping_methods` array. If specified, will overwrite the existing selected shipping method, updating `items` as necessary. */
          selected_shipping_method?: string;
          /** Tracking information once the order has been fulfilled. */
          shipping?: {
            carrier: string;
            tracking_number: string;
          };
          /** Current order status. One of `created`, `paid`, `canceled`, `fulfilled`, or `returned`. More detail in the [Orders Guide](https://stripe.com/docs/orders/guide#understanding-order-statuses). */
          status?: "canceled" | "created" | "fulfilled" | "paid" | "returned";
        };
      };
    };
  };
  /** <p>Pay an order by providing a <code>source</code> to create a payment.</p> */
  PostOrdersIdPay: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["order"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** A fee in %s that will be applied to the order and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the `Stripe-Account` header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees). */
          application_fee?: number;
          /** The ID of an existing customer that will be charged for this order. If no customer was attached to the order at creation, either `source` or `customer` is required. Otherwise, the specified customer will be charged instead of the one attached to the order. */
          customer?: string;
          /** The email address of the customer placing the order. Required if not previously specified for the order. */
          email?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: { [key: string]: string };
          /** A [Token](https://stripe.com/docs/api#tokens)'s or a [Source](https://stripe.com/docs/api#sources)'s ID, as returned by [Elements](https://stripe.com/docs/elements). If no customer was attached to the order at creation, either `source` or `customer` is required. Otherwise, the specified source will be charged intead of the customer attached to the order. */
          source?: string;
        };
      };
    };
  };
  /** <p>Return all or part of an order. The order must have a status of <code>paid</code> or <code>fulfilled</code> before it can be returned. Once all items have been returned, the order will become <code>canceled</code> or <code>returned</code> depending on which status the order started in.</p> */
  PostOrdersIdReturns: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["order_return"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** List of items to return. */
          items?: Partial<
            {
              amount?: number;
              description?: string;
              parent?: string;
              quantity?: number;
              type?: "discount" | "shipping" | "sku" | "tax";
            }[]
          > &
            Partial<"">;
        };
      };
    };
  };
  /** <p>Returns a list of PaymentIntents.</p> */
  GetPaymentIntents: {
    parameters: {
      query: {
        /** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** Only return PaymentIntents for the customer specified by this customer ID. */
        customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["payment_intent"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>Creates a PaymentIntent object.</p>
   *
   * <p>After the PaymentIntent is created, attach a payment method and <a href="/docs/api/payment_intents/confirm">confirm</a>
   * to continue the payment. You can read more about the different payment flows
   * available via the Payment Intents API <a href="/docs/payments/payment-intents">here</a>.</p>
   *
   * <p>When <code>confirm=true</code> is used during creation, it is equivalent to creating
   * and confirming the PaymentIntent in the same call. You may use any parameters
   * available in the <a href="/docs/api/payment_intents/confirm">confirm API</a> when <code>confirm=true</code>
   * is supplied.</p>
   */
  PostPaymentIntents: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["payment_intent"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
          amount: number;
          /**
           * The amount of the application fee (if any) that will be applied to the
           * payment and transferred to the application owner's Stripe account. For
           * more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
           */
          application_fee_amount?: number;
          /** Controls when the funds will be captured from the customer's account. */
          capture_method?: "automatic" | "manual";
          /** Set to `true` to attempt to [confirm](https://stripe.com/docs/api/payment_intents/confirm) this PaymentIntent immediately. This parameter defaults to `false`. When creating and confirming a PaymentIntent at the same time, parameters available in the [confirm](https://stripe.com/docs/api/payment_intents/confirm) API may also be provided. */
          confirm?: boolean;
          confirmation_method?: "automatic" | "manual";
          /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          currency: string;
          /**
           * ID of the Customer this PaymentIntent belongs to, if one exists.
           *
           * Payment methods attached to other Customers cannot be used with this PaymentIntent.
           *
           * If present in combination with [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage), this PaymentIntent's payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.
           */
          customer?: string;
          /** An arbitrary string attached to the object. Often useful for displaying to users. */
          description?: string;
          /** Set to `true` to fail the payment attempt if the PaymentIntent transitions into `requires_action`. This parameter is intended for simpler integrations that do not handle customer actions, like [saving cards without authentication](https://stripe.com/docs/payments/save-card-without-authentication). This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm). */
          error_on_requires_action?: boolean;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** ID of the mandate to be used for this payment. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm). */
          mandate?: string;
          /** This hash contains details about the Mandate to create. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm). */
          mandate_data?: {
            customer_acceptance: {
              accepted_at?: number;
              offline?: { [key: string]: any };
              online?: {
                ip_address: string;
                user_agent: string;
              };
              type: "offline" | "online";
            };
          };
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: { [key: string]: string };
          /** Set to `true` to indicate that the customer is not in your checkout flow during this payment attempt, and therefore is unable to authenticate. This parameter is intended for scenarios where you collect card details and [charge them later](https://stripe.com/docs/payments/cards/charging-saved-cards). This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm). */
          off_session?: Partial<boolean> & Partial<"one_off" | "recurring">;
          /** The Stripe account ID for which these funds are intended. For details, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts). */
          on_behalf_of?: string;
          /**
           * ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods#compatibility) object) to attach to this PaymentIntent.
           *
           * If this parameter is omitted with `confirm=true`, `customer.default_source` will be attached as this PaymentIntent's payment instrument to improve the migration experience for users of the Charges API. We recommend that you explicitly provide the `payment_method` going forward.
           */
          payment_method?: string;
          /** Payment-method-specific configuration for this PaymentIntent. */
          payment_method_options?: {
            card?: Partial<{
              installments?: {
                enabled?: boolean;
                plan?: Partial<{
                  count: number;
                  interval: "month";
                  type: "fixed_count";
                }> &
                  Partial<"">;
              };
              request_three_d_secure?: "any" | "automatic";
            }> &
              Partial<"">;
          };
          /** The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. If this is not provided, defaults to ["card"]. */
          payment_method_types?: string[];
          /** Email address that the receipt for the resulting payment will be sent to. */
          receipt_email?: string;
          /** The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site. If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm). */
          return_url?: string;
          /**
           * Indicates that you intend to make future payments with this PaymentIntent's payment method.
           *
           * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
           *
           * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
           */
          setup_future_usage?: "off_session" | "on_session";
          /** Shipping information for this PaymentIntent. */
          shipping?: {
            address: {
              city?: string;
              country?: string;
              line1: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            carrier?: string;
            name: string;
            phone?: string;
            tracking_number?: string;
          };
          /** For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters. */
          statement_descriptor?: string;
          /** Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
          statement_descriptor_suffix?: string;
          /**
           * The parameters used to automatically create a Transfer when the payment succeeds.
           * For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
           */
          transfer_data?: {
            amount?: number;
            destination: string;
          };
          /** A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details. */
          transfer_group?: string;
          /** Set to `true` only when using manual confirmation and the iOS or Android SDKs to handle additional authentication steps. */
          use_stripe_sdk?: boolean;
        };
      };
    };
  };
  /**
   * <p>Retrieves the details of a PaymentIntent that has previously been created. </p>
   *
   * <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>
   *
   * <p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href="#payment_intent_object">payment intent</a> object reference for more details.</p>
   */
  GetPaymentIntentsIntent: {
    parameters: {
      query: {
        /** The client secret of the PaymentIntent. Required if a publishable key is used to retrieve the source. */
        client_secret?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        intent: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["payment_intent"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>Updates properties on a PaymentIntent object without confirming.</p>
   *
   * <p>Depending on which properties you update, you may need to confirm the
   * PaymentIntent again. For example, updating the <code>payment_method</code> will
   * always require you to confirm the PaymentIntent again. If you prefer to
   * update and confirm at the same time, we recommend updating properties via
   * the <a href="/docs/api/payment_intents/confirm">confirm API</a> instead.</p>
   */
  PostPaymentIntentsIntent: {
    parameters: {
      path: {
        intent: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["payment_intent"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
          amount?: number;
          /** The amount of the application fee (if any) for the resulting payment. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details. */
          application_fee_amount?: Partial<number> & Partial<"">;
          /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          currency?: string;
          /**
           * ID of the Customer this PaymentIntent belongs to, if one exists.
           *
           * Payment methods attached to other Customers cannot be used with this PaymentIntent.
           *
           * If present in combination with [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage), this PaymentIntent's payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.
           */
          customer?: string;
          /** An arbitrary string attached to the object. Often useful for displaying to users. */
          description?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods#compatibility) object) to attach to this PaymentIntent. */
          payment_method?: string;
          /** Payment-method-specific configuration for this PaymentIntent. */
          payment_method_options?: {
            card?: Partial<{
              installments?: {
                enabled?: boolean;
                plan?: Partial<{
                  count: number;
                  interval: "month";
                  type: "fixed_count";
                }> &
                  Partial<"">;
              };
              request_three_d_secure?: "any" | "automatic";
            }> &
              Partial<"">;
          };
          /** The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. */
          payment_method_types?: string[];
          /** Email address that the receipt for the resulting payment will be sent to. */
          receipt_email?: Partial<string> & Partial<"">;
          /**
           * Indicates that you intend to make future payments with this PaymentIntent's payment method.
           *
           * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
           *
           * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
           *
           * If `setup_future_usage` is already set and you are performing a request using a publishable key, you may only update the value from `on_session` to `off_session`.
           */
          setup_future_usage?: "" | "off_session" | "on_session";
          /** Shipping information for this PaymentIntent. */
          shipping?: Partial<{
            address: {
              city?: string;
              country?: string;
              line1: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            carrier?: string;
            name: string;
            phone?: string;
            tracking_number?: string;
          }> &
            Partial<"">;
          /** For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters. */
          statement_descriptor?: string;
          /** Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
          statement_descriptor_suffix?: string;
          /** The parameters used to automatically create a Transfer when the payment succeeds. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts). */
          transfer_data?: {
            amount?: number;
          };
          /** A string that identifies the resulting payment as part of a group. `transfer_group` may only be provided if it has not been set. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details. */
          transfer_group?: string;
        };
      };
    };
  };
  /**
   * <p>A PaymentIntent object can be canceled when it is in one of these statuses: <code>requires_payment_method</code>, <code>requires_capture</code>, <code>requires_confirmation</code>, <code>requires_action</code>. </p>
   *
   * <p>Once canceled, no additional charges will be made by the PaymentIntent and any operations on the PaymentIntent will fail with an error. For PaymentIntents with <code>status='requires_capture'</code>, the remaining <code>amount_capturable</code> will automatically be refunded.</p>
   */
  PostPaymentIntentsIntentCancel: {
    parameters: {
      path: {
        intent: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["payment_intent"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Reason for canceling this PaymentIntent. Possible values are `duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned` */
          cancellation_reason?: "abandoned" | "duplicate" | "fraudulent" | "requested_by_customer";
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
        };
      };
    };
  };
  /**
   * <p>Capture the funds of an existing uncaptured PaymentIntent when its status is <code>requires_capture</code>.</p>
   *
   * <p>Uncaptured PaymentIntents will be canceled exactly seven days after they are created.</p>
   *
   * <p>Learn more about <a href="/docs/payments/capture-later">separate authorization and capture</a>.</p>
   */
  PostPaymentIntentsIntentCapture: {
    parameters: {
      path: {
        intent: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["payment_intent"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The amount to capture from the PaymentIntent, which must be less than or equal to the original amount. Any additional amount will be automatically refunded. Defaults to the full `amount_capturable` if not provided. */
          amount_to_capture?: number;
          /**
           * The amount of the application fee (if any) that will be applied to the
           * payment and transferred to the application owner's Stripe account. For
           * more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
           */
          application_fee_amount?: number;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters. */
          statement_descriptor?: string;
          /** Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
          statement_descriptor_suffix?: string;
          /**
           * The parameters used to automatically create a Transfer when the payment
           * is captured. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
           */
          transfer_data?: {
            amount?: number;
          };
        };
      };
    };
  };
  /**
   * <p>Confirm that your customer intends to pay with current or provided
   * payment method. Upon confirmation, the PaymentIntent will attempt to initiate
   * a payment.</p>
   *
   * <p>If the selected payment method requires additional authentication steps, the
   * PaymentIntent will transition to the <code>requires_action</code> status and
   * suggest additional actions via <code>next_action</code>. If payment fails,
   * the PaymentIntent will transition to the <code>requires_payment_method</code> status. If
   * payment succeeds, the PaymentIntent will transition to the <code>succeeded</code>
   * status (or <code>requires_capture</code>, if <code>capture_method</code> is set to <code>manual</code>).</p>
   *
   * <p>If the <code>confirmation_method</code> is <code>automatic</code>, payment may be attempted
   * using our <a href="/docs/stripe-js/reference#stripe-handle-card-payment">client SDKs</a>
   * and the PaymentIntent’s <a href="#payment_intent_object-client_secret">client_secret</a>.
   * After <code>next_action</code>s are handled by the client, no additional
   * confirmation is required to complete the payment.</p>
   *
   * <p>If the <code>confirmation_method</code> is <code>manual</code>, all payment attempts must be
   * initiated using a secret key.
   * If any actions are required for the payment, the PaymentIntent will
   * return to the <code>requires_confirmation</code> state
   * after those actions are completed. Your server needs to then
   * explicitly re-confirm the PaymentIntent to initiate the next payment
   * attempt. Read the <a href="/docs/payments/payment-intents/web-manual">expanded documentation</a>
   * to learn more about manual confirmation.</p>
   */
  PostPaymentIntentsIntentConfirm: {
    parameters: {
      path: {
        intent: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["payment_intent"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The client secret of the PaymentIntent. */
          client_secret?: string;
          /** Set to `true` to fail the payment attempt if the PaymentIntent transitions into `requires_action`. This parameter is intended for simpler integrations that do not handle customer actions, like [saving cards without authentication](https://stripe.com/docs/payments/save-card-without-authentication). */
          error_on_requires_action?: boolean;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** ID of the mandate to be used for this payment. */
          mandate?: string;
          /** This hash contains details about the Mandate to create */
          mandate_data?: Partial<{
            customer_acceptance: {
              accepted_at?: number;
              offline?: { [key: string]: any };
              online?: {
                ip_address: string;
                user_agent: string;
              };
              type: "offline" | "online";
            };
          }> &
            Partial<{
              customer_acceptance: {
                online: {
                  ip_address?: string;
                  user_agent?: string;
                };
                type: "online";
              };
            }>;
          /** Set to `true` to indicate that the customer is not in your checkout flow during this payment attempt, and therefore is unable to authenticate. This parameter is intended for scenarios where you collect card details and [charge them later](https://stripe.com/docs/payments/cards/charging-saved-cards). */
          off_session?: Partial<boolean> & Partial<"one_off" | "recurring">;
          /** ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods#compatibility) object) to attach to this PaymentIntent. */
          payment_method?: string;
          /** Payment-method-specific configuration for this PaymentIntent. */
          payment_method_options?: {
            card?: Partial<{
              installments?: {
                enabled?: boolean;
                plan?: Partial<{
                  count: number;
                  interval: "month";
                  type: "fixed_count";
                }> &
                  Partial<"">;
              };
              request_three_d_secure?: "any" | "automatic";
            }> &
              Partial<"">;
          };
          /** The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. */
          payment_method_types?: string[];
          /** Email address that the receipt for the resulting payment will be sent to. */
          receipt_email?: Partial<string> & Partial<"">;
          /**
           * The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site.
           * If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme.
           * This parameter is only used for cards and other redirect-based payment methods.
           */
          return_url?: string;
          /**
           * Indicates that you intend to make future payments with this PaymentIntent's payment method.
           *
           * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
           *
           * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
           *
           * If `setup_future_usage` is already set and you are performing a request using a publishable key, you may only update the value from `on_session` to `off_session`.
           */
          setup_future_usage?: "" | "off_session" | "on_session";
          /** Shipping information for this PaymentIntent. */
          shipping?: Partial<{
            address: {
              city?: string;
              country?: string;
              line1: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            carrier?: string;
            name: string;
            phone?: string;
            tracking_number?: string;
          }> &
            Partial<"">;
          /** Set to `true` only when using manual confirmation and the iOS or Android SDKs to handle additional authentication steps. */
          use_stripe_sdk?: boolean;
        };
      };
    };
  };
  /** <p>Returns a list of PaymentMethods for a given Customer</p> */
  GetPaymentMethods: {
    parameters: {
      query: {
        /** The ID of the customer whose PaymentMethods will be retrieved. */
        customer: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
        /** A required filter on the list, based on the object `type` field. */
        type: "au_becs_debit" | "card" | "card_present" | "fpx" | "ideal" | "sepa_debit";
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["payment_method"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Creates a PaymentMethod object. Read the <a href="/docs/stripe-js/reference#stripe-create-payment-method">Stripe.js reference</a> to learn how to create PaymentMethods via Stripe.js.</p> */
  PostPaymentMethods: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["payment_method"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** If this is an `au_becs_debit` PaymentMethod, this hash contains details about the bank account. */
          au_becs_debit?: {
            account_number: string;
            bsb_number: string;
          };
          /** Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods. */
          billing_details?: {
            address?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            email?: string;
            name?: string;
            phone?: string;
          };
          /** If this is a `card` PaymentMethod, this hash contains the user's card details. For backwards compatibility, you can alternatively provide a Stripe token (e.g., for Apple Pay, Amex Express Checkout, or legacy Checkout) into the card hash with format `card: {token: "tok_visa"}`. When creating with a card number, you must meet the requirements for [PCI compliance](https://stripe.com/docs/security#validating-pci-compliance). We strongly recommend using Stripe.js instead of interacting with this API directly. */
          card?: Partial<{
            cvc?: string;
            exp_month: number;
            exp_year: number;
            number: string;
          }> &
            Partial<{
              token: string;
            }>;
          /** The `Customer` to whom the original PaymentMethod is attached. */
          customer?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** If this is an `fpx` PaymentMethod, this hash contains details about the FPX payment method. */
          fpx?: {
            bank:
              | "affin_bank"
              | "alliance_bank"
              | "ambank"
              | "bank_islam"
              | "bank_muamalat"
              | "bank_rakyat"
              | "bsn"
              | "cimb"
              | "deutsche_bank"
              | "hong_leong_bank"
              | "hsbc"
              | "kfh"
              | "maybank2e"
              | "maybank2u"
              | "ocbc"
              | "pb_enterprise"
              | "public_bank"
              | "rhb"
              | "standard_chartered"
              | "uob";
          };
          /** If this is an `ideal` PaymentMethod, this hash contains details about the iDEAL payment method. */
          ideal?: {
            bank?:
              | "abn_amro"
              | "asn_bank"
              | "bunq"
              | "handelsbanken"
              | "ing"
              | "knab"
              | "moneyou"
              | "rabobank"
              | "regiobank"
              | "sns_bank"
              | "triodos_bank"
              | "van_lanschot";
          };
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: { [key: string]: string };
          /** The PaymentMethod to share. */
          payment_method?: string;
          /** If this is a `sepa_debit` PaymentMethod, this hash contains details about the SEPA debit bank account. */
          sepa_debit?: {
            iban: string;
          };
          /** The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type. Required unless `payment_method` is specified (see the [Cloning PaymentMethods](https://stripe.com/docs/payments/payment-methods/connect#cloning-payment-methods) guide) */
          type?: "au_becs_debit" | "card" | "fpx" | "ideal" | "sepa_debit";
        };
      };
    };
  };
  /** <p>Retrieves a PaymentMethod object.</p> */
  GetPaymentMethodsPaymentMethod: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        payment_method: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["payment_method"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.</p> */
  PostPaymentMethodsPaymentMethod: {
    parameters: {
      path: {
        payment_method: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["payment_method"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods. */
          billing_details?: {
            address?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            email?: string;
            name?: string;
            phone?: string;
          };
          /** If this is a `card` PaymentMethod, this hash contains the user's card details. */
          card?: {
            exp_month?: number;
            exp_year?: number;
          };
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** If this is a `sepa_debit` PaymentMethod, this hash contains details about the SEPA debit bank account. */
          sepa_debit?: { [key: string]: any };
        };
      };
    };
  };
  /**
   * <p>Attaches a PaymentMethod object to a Customer.</p>
   *
   * <p>To attach a new PaymentMethod to a customer for future payments, we recommend you use a <a href="/docs/api/setup_intents">SetupIntent</a>
   * or a PaymentIntent with <a href="/docs/api/payment_intents/create#create_payment_intent-setup_future_usage">setup_future_usage</a>.
   * These approaches will perform any necessary steps to ensure that the PaymentMethod can be used in a future payment. Using the
   * <code>/v1/payment_methods/:id/attach</code> endpoint does not ensure that future payments can be made with the attached PaymentMethod.
   * See <a href="/docs/payments/payment-intents#future-usage">Optimizing cards for future payments</a> for more information about setting up future payments.</p>
   *
   * <p>To use this PaymentMethod as the default for invoice or subscription payments,
   * set <a href="/docs/api/customers/update#update_customer-invoice_settings-default_payment_method"><code>invoice_settings.default_payment_method</code></a>,
   * on the Customer to the PaymentMethod’s ID.</p>
   */
  PostPaymentMethodsPaymentMethodAttach: {
    parameters: {
      path: {
        payment_method: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["payment_method"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The ID of the customer to which to attach the PaymentMethod. */
          customer: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
        };
      };
    };
  };
  /** <p>Detaches a PaymentMethod object from a Customer.</p> */
  PostPaymentMethodsPaymentMethodDetach: {
    parameters: {
      path: {
        payment_method: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["payment_method"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
        };
      };
    };
  };
  /** <p>Returns a list of existing payouts sent to third-party bank accounts or that Stripe has sent you. The payouts are returned in sorted order, with the most recently created payouts appearing first.</p> */
  GetPayouts: {
    parameters: {
      query: {
        arrival_date?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** The ID of an external account - only return payouts sent to this external account. */
        destination?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
        /** Only return payouts that have the given status: `pending`, `paid`, `failed`, or `canceled`. */
        status?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["payout"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>To send funds to your own bank account, you create a new payout object. Your <a href="#balance">Stripe balance</a> must be able to cover the payout amount, or you’ll receive an “Insufficient Funds” error.</p>
   *
   * <p>If your API key is in test mode, money won’t actually be sent, though everything else will occur as if in live mode.</p>
   *
   * <p>If you are creating a manual payout on a Stripe account that uses multiple payment source types, you’ll need to specify the source type balance that the payout should draw from. The <a href="#balance_object">balance object</a> details available and pending amounts by source type.</p>
   */
  PostPayouts: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["payout"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** A positive integer in cents representing how much to payout. */
          amount: number;
          /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          currency: string;
          /** An arbitrary string attached to the object. Often useful for displaying to users. */
          description?: string;
          /** The ID of a bank account or a card to send the payout to. If no destination is supplied, the default external account for the specified currency will be used. */
          destination?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: { [key: string]: string };
          /** The method used to send this payout, which can be `standard` or `instant`. `instant` is only supported for payouts to debit cards. (See [Instant payouts for marketplaces for more information](https://stripe.com/blog/instant-payouts-for-marketplaces).) */
          method?: "instant" | "standard";
          /** The balance type of your Stripe balance to draw this payout from. Balances for different payment sources are kept separately. You can find the amounts with the balances API. One of `bank_account`, `card`, or `fpx`. */
          source_type?: "bank_account" | "card" | "fpx";
          /** A string to be displayed on the recipient's bank or card statement. This may be at most 22 characters. Attempting to use a `statement_descriptor` longer than 22 characters will return an error. Note: Most banks will truncate this information and/or display it inconsistently. Some may not display it at all. */
          statement_descriptor?: string;
        };
      };
    };
  };
  /** <p>Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list, and Stripe will return the corresponding payout information.</p> */
  GetPayoutsPayout: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        payout: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["payout"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Updates the specified payout by setting the values of the parameters passed. Any parameters not provided will be left unchanged. This request accepts only the metadata as arguments.</p> */
  PostPayoutsPayout: {
    parameters: {
      path: {
        payout: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["payout"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
        };
      };
    };
  };
  /** <p>A previously created payout can be canceled if it has not yet been paid out. Funds will be refunded to your available balance. You may not cancel automatic Stripe payouts.</p> */
  PostPayoutsPayoutCancel: {
    parameters: {
      path: {
        payout: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["payout"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
        };
      };
    };
  };
  /** <p>Returns a list of your plans.</p> */
  GetPlans: {
    parameters: {
      query: {
        /** Only return plans that are active or inactive (e.g., pass `false` to list all inactive plans). */
        active?: boolean;
        /** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** Only return plans for the given product. */
        product?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["plan"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>You can create plans using the API, or in the Stripe <a href="https://dashboard.stripe.com/subscriptions/products">Dashboard</a>.</p> */
  PostPlans: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["plan"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Whether the plan is currently available for new subscriptions. Defaults to `true`. */
          active?: boolean;
          /** Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`. */
          aggregate_usage?: "last_during_period" | "last_ever" | "max" | "sum";
          /** A positive integer in %s (or 0 for a free plan) representing how much to charge on a recurring basis. */
          amount?: number;
          /** Same as `amount`, but accepts a decimal value with at most 12 decimal places. Only one of `amount` and `amount_decimal` can be set. */
          amount_decimal?: string;
          /** Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes. */
          billing_scheme?: "per_unit" | "tiered";
          /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          currency: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** An identifier randomly generated by Stripe. Used to identify this plan when subscribing a customer. You can optionally override this ID, but the ID must be unique across all plans in your Stripe account. You can, however, use the same plan ID in both live and test modes. */
          id?: string;
          /** Specifies billing frequency. Either `day`, `week`, `month` or `year`. */
          interval: "day" | "month" | "week" | "year";
          /** The number of intervals between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). */
          interval_count?: number;
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** A brief description of the plan, hidden from customers. */
          nickname?: string;
          product?: Partial<{
            active?: boolean;
            id?: string;
            metadata?: { [key: string]: string };
            name: string;
            statement_descriptor?: string;
            unit_label?: string;
          }> &
            Partial<string>;
          /** Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
          tiers?: {
            flat_amount?: number;
            flat_amount_decimal?: string;
            unit_amount?: number;
            unit_amount_decimal?: string;
            up_to: Partial<"inf"> & Partial<number>;
          }[];
          /** Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price, in `graduated` tiering pricing can successively change as the quantity grows. */
          tiers_mode?: "graduated" | "volume";
          /** Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with `tiers`. */
          transform_usage?: {
            divide_by: number;
            round: "down" | "up";
          };
          /** Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan). */
          trial_period_days?: number;
          /** Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`. */
          usage_type?: "licensed" | "metered";
        };
      };
    };
  };
  /** <p>Retrieves the plan with the given ID.</p> */
  GetPlansPlan: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        plan: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["plan"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Updates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a plan’s ID, amount, currency, or billing cycle.</p> */
  PostPlansPlan: {
    parameters: {
      path: {
        plan: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["plan"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Whether the plan is currently available for new subscriptions. */
          active?: boolean;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** A brief description of the plan, hidden from customers. */
          nickname?: string;
          /** The product the plan belongs to. Note that after updating, statement descriptors and line items of the plan in active subscriptions will be affected. */
          product?: string;
          /** Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan). */
          trial_period_days?: number;
        };
      };
    };
  };
  /** <p>Deleting plans means new subscribers can’t be added. Existing subscribers aren’t affected.</p> */
  DeletePlansPlan: {
    parameters: {
      path: {
        plan: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["deleted_plan"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.</p> */
  GetProducts: {
    parameters: {
      query: {
        /** Only return products that are active or inactive (e.g., pass `false` to list all inactive products). */
        active?: boolean;
        /** Only return products that were created during the given date interval. */
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** Only return products with the given IDs. */
        ids?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** Only return products that can be shipped (i.e., physical, not digital products). */
        shippable?: boolean;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
        /** Only return products of this type. */
        type?: "good" | "service";
        /** Only return products with the given url. */
        url?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["product"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Creates a new product object. To create a product for use with orders, see <a href="#create_product">Products</a>.</p> */
  PostProducts: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["product"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Whether the product is currently available for purchase. Defaults to `true`. */
          active?: boolean;
          /** A list of up to 5 alphanumeric attributes. */
          attributes?: string[];
          /** A short one-line description of the product, meant to be displayable to the customer. May only be set if type=`good`. */
          caption?: string;
          /** An array of Connect application names or identifiers that should not be able to order the SKUs for this product. May only be set if type=`good`. */
          deactivate_on?: string[];
          /** The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes. */
          description?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** An identifier will be randomly generated by Stripe. You can optionally override this ID, but the ID must be unique across all products in your Stripe account. */
          id?: string;
          /** A list of up to 8 URLs of images for this product, meant to be displayable to the customer. */
          images?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: { [key: string]: string };
          /** The product's name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions. */
          name: string;
          /** The dimensions of this product for shipping purposes. A SKU associated with this product can override this value by having its own `package_dimensions`. May only be set if type=`good`. */
          package_dimensions?: {
            height: number;
            length: number;
            weight: number;
            width: number;
          };
          /** Whether this product is shipped (i.e., physical goods). Defaults to `true`. May only be set if type=`good`. */
          shippable?: boolean;
          /**
           * An arbitrary string to be displayed on your customer's credit card or bank statement. While most banks display this information consistently, some may display it incorrectly or not at all.
           *
           * This may be up to 22 characters. The statement description may not include `<`, `>`, `\`, `"`, `'` characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped.
           *  It must contain at least one letter.
           */
          statement_descriptor?: string;
          /** The type of the product. Defaults to `service` if not explicitly specified, enabling use of this product with Subscriptions and Plans. Set this parameter to `good` to use this product with Orders and SKUs. On API versions before `2018-02-05`, this field defaults to `good` for compatibility reasons. */
          type?: "good" | "service";
          /** A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions. */
          unit_label?: string;
          /** A URL of a publicly-accessible webpage for this product. May only be set if type=`good`. */
          url?: string;
        };
      };
    };
  };
  /** <p>Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.</p> */
  GetProductsId: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["product"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
  PostProductsId: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["product"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Whether the product is available for purchase. */
          active?: boolean;
          /** A list of up to 5 alphanumeric attributes that each SKU can provide values for (e.g., `["color", "size"]`). If a value for `attributes` is specified, the list specified will replace the existing attributes list on this product. Any attributes not present after the update will be deleted from the SKUs for this product. */
          attributes?: Partial<string[]> & Partial<"">;
          /** A short one-line description of the product, meant to be displayable to the customer. May only be set if `type=good`. */
          caption?: string;
          /** An array of Connect application names or identifiers that should not be able to order the SKUs for this product. May only be set if `type=good`. */
          deactivate_on?: string[];
          /** The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes. */
          description?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** A list of up to 8 URLs of images for this product, meant to be displayable to the customer. */
          images?: Partial<string[]> & Partial<"">;
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** The product's name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions. */
          name?: string;
          /** The dimensions of this product for shipping purposes. A SKU associated with this product can override this value by having its own `package_dimensions`. May only be set if `type=good`. */
          package_dimensions?: Partial<{
            height: number;
            length: number;
            weight: number;
            width: number;
          }> &
            Partial<"">;
          /** Whether this product is shipped (i.e., physical goods). Defaults to `true`. May only be set if `type=good`. */
          shippable?: boolean;
          /**
           * An arbitrary string to be displayed on your customer's credit card or bank statement. While most banks display this information consistently, some may display it incorrectly or not at all.
           *
           * This may be up to 22 characters. The statement description may not include `<`, `>`, `\`, `"`, `'` characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped.
           *  It must contain at least one letter. May only be set if `type=service`.
           */
          statement_descriptor?: string;
          /** A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions. May only be set if `type=service`. */
          unit_label?: string;
          /** A URL of a publicly-accessible webpage for this product. May only be set if `type=good`. */
          url?: string;
        };
      };
    };
  };
  /** <p>Delete a product. Deleting a product with type=<code>good</code> is only possible if it has no SKUs associated with it. Deleting a product with type=<code>service</code> is only possible if it has no plans associated with it.</p> */
  DeleteProductsId: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["deleted_product"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Returns a list of early fraud warnings.</p> */
  GetRadarEarlyFraudWarnings: {
    parameters: {
      query: {
        /** Only return early fraud warnings for the charge specified by this charge ID. */
        charge?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["radar.early_fraud_warning"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>Retrieves the details of an early fraud warning that has previously been created. </p>
   *
   * <p>Please refer to the <a href="#early_fraud_warning_object">early fraud warning</a> object reference for more details.</p>
   */
  GetRadarEarlyFraudWarningsEarlyFraudWarning: {
    parameters: {
      path: {
        early_fraud_warning: string;
      };
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["radar.early_fraud_warning"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Returns a list of <code>ValueListItem</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
  GetRadarValueListItems: {
    parameters: {
      query: {
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
        /** Return items belonging to the parent list whose value matches the specified value (using an "is like" match). */
        value?: string;
        /** Identifier for the parent value list this item belongs to. */
        value_list: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["radar.value_list_item"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Creates a new <code>ValueListItem</code> object, which is added to the specified parent value list.</p> */
  PostRadarValueListItems: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["radar.value_list_item"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** The value of the item (whose type must match the type of the parent value list). */
          value: string;
          /** The identifier of the value list which the created item will be added to. */
          value_list: string;
        };
      };
    };
  };
  /** <p>Retrieves a <code>ValueListItem</code> object.</p> */
  GetRadarValueListItemsItem: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        item: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["radar.value_list_item"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Deletes a <code>ValueListItem</code> object, removing it from its parent value list.</p> */
  DeleteRadarValueListItemsItem: {
    parameters: {
      path: {
        item: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["deleted_radar.value_list_item"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Returns a list of <code>ValueList</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
  GetRadarValueLists: {
    parameters: {
      query: {
        /** The alias used to reference the value list when writing rules. */
        alias?: string;
        /** A value contained within a value list - returns all value lists containing this value. */
        contains?: string;
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["radar.value_list"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Creates a new <code>ValueList</code> object, which can then be referenced in rules.</p> */
  PostRadarValueLists: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["radar.value_list"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The name of the value list for use in rules. */
          alias: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Type of the items in the value list. One of `card_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, or `case_sensitive_string`. Use `string` if the item type is unknown or mixed. */
          item_type?:
            | "card_bin"
            | "card_fingerprint"
            | "case_sensitive_string"
            | "country"
            | "email"
            | "ip_address"
            | "string";
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: { [key: string]: string };
          /** The human-readable name of the value list. */
          name: string;
        };
      };
    };
  };
  /** <p>Retrieves a <code>ValueList</code> object.</p> */
  GetRadarValueListsValueList: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        value_list: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["radar.value_list"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Updates a <code>ValueList</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that <code>item_type</code> is immutable.</p> */
  PostRadarValueListsValueList: {
    parameters: {
      path: {
        value_list: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["radar.value_list"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The name of the value list for use in rules. */
          alias?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: { [key: string]: string };
          /** The human-readable name of the value list. */
          name?: string;
        };
      };
    };
  };
  /** <p>Deletes a <code>ValueList</code> object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.</p> */
  DeleteRadarValueListsValueList: {
    parameters: {
      path: {
        value_list: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["deleted_radar.value_list"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Returns a list of your recipients. The recipients are returned sorted by creation date, with the most recently created recipients appearing first.</p> */
  GetRecipients: {
    parameters: {
      query: {
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
        type?: "corporation" | "individual";
        /** Only return recipients that are verified or unverified. */
        verified?: boolean;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["recipient"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>Creates a new <code>Recipient</code> object and verifies the recipient’s identity.
   * Also verifies the recipient’s bank account information or debit card, if either is provided.</p>
   */
  PostRecipients: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["recipient"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** A bank account to attach to the recipient. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe-js), or a dictionary containing a user's bank account details, with the options described below. */
          bank_account?: string;
          /** A U.S. Visa or MasterCard debit card (_not_ prepaid) to attach to the recipient. If the debit card is not valid, recipient creation will fail. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe-js), or a dictionary containing a user's debit card details, with the options described below. Although not all information is required, the extra info helps prevent fraud. */
          card?: string;
          /** An arbitrary string which you can attach to a `Recipient` object. It is displayed alongside the recipient in the web interface. */
          description?: string;
          /** The recipient's email address. It is displayed alongside the recipient in the web interface, and can be useful for searching and tracking. */
          email?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** The recipient's full, legal name. For type `individual`, should be in the format `First Last`, `First Middle Last`, or `First M Last` (no prefixes or suffixes). For `corporation`, the full, incorporated name. */
          name: string;
          /** The recipient's tax ID, as a string. For type `individual`, the full SSN; for type `corporation`, the full EIN. */
          tax_id?: string;
          /** Type of the recipient: either `individual` or `corporation`. */
          type: string;
        };
      };
    };
  };
  /** <p>Retrieves the details of an existing recipient. You need only supply the unique recipient identifier that was returned upon recipient creation.</p> */
  GetRecipientsId: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": Partial<components["schemas"]["recipient"]> &
            Partial<components["schemas"]["deleted_recipient"]>;
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>Updates the specified recipient by setting the values of the parameters passed.
   * Any parameters not provided will be left unchanged.</p>
   *
   * <p>If you update the name or tax ID, the identity verification will automatically be rerun.
   * If you update the bank account, the bank account validation will automatically be rerun.</p>
   */
  PostRecipientsId: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["recipient"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** A bank account to attach to the recipient. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe-js), or a dictionary containing a user's bank account details, with the options described below. */
          bank_account?: string;
          /** A U.S. Visa or MasterCard debit card (not prepaid) to attach to the recipient. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe-js), or a dictionary containing a user's debit card details, with the options described below. Passing `card` will create a new card, make it the new recipient default card, and delete the old recipient default (if one exists). If you want to add additional debit cards instead of replacing the existing default, use the [card creation API](https://stripe.com/docs/api#create_card). Whenever you attach a card to a recipient, Stripe will automatically validate the debit card. */
          card?: string;
          /** ID of the card to set as the recipient's new default for payouts. */
          default_card?: string;
          /** An arbitrary string which you can attach to a `Recipient` object. It is displayed alongside the recipient in the web interface. */
          description?: string;
          /** The recipient's email address. It is displayed alongside the recipient in the web interface, and can be useful for searching and tracking. */
          email?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** The recipient's full, legal name. For type `individual`, should be in the format `First Last`, `First Middle Last`, or `First M Last` (no prefixes or suffixes). For `corporation`, the full, incorporated name. */
          name?: string;
          /** The recipient's tax ID, as a string. For type `individual`, the full SSN; for type `corporation`, the full EIN. */
          tax_id?: string;
        };
      };
    };
  };
  /** <p>Permanently deletes a recipient. It cannot be undone.</p> */
  DeleteRecipientsId: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["deleted_recipient"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Returns a list of all refunds you’ve previously created. The refunds are returned in sorted order, with the most recent refunds appearing first. For convenience, the 10 most recent refunds are always available by default on the charge object.</p> */
  GetRefunds: {
    parameters: {
      query: {
        /** Only return refunds for the charge specified by this charge ID. */
        charge?: string;
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** Only return refunds for the PaymentIntent specified by this ID. */
        payment_intent?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["refund"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Create a refund.</p> */
  PostRefunds: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["refund"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          amount?: number;
          charge?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          payment_intent?: string;
          reason?: "duplicate" | "fraudulent" | "requested_by_customer";
          refund_application_fee?: boolean;
          reverse_transfer?: boolean;
        };
      };
    };
  };
  /** <p>Retrieves the details of an existing refund.</p> */
  GetRefundsRefund: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        refund: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["refund"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>Updates the specified refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * <p>This request only accepts <code>metadata</code> as an argument.</p>
   */
  PostRefundsRefund: {
    parameters: {
      path: {
        refund: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["refund"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
        };
      };
    };
  };
  /** <p>Returns a list of Report Runs, with the most recent appearing first. (Requires a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p> */
  GetReportingReportRuns: {
    parameters: {
      query: {
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["reporting.report_run"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Creates a new object and begin running the report. (Requires a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p> */
  PostReportingReportRuns: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["reporting.report_run"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Parameters specifying how the report should be run. Different Report Types have different required and optional parameters, listed in the [API Access to Reports](https://stripe.com/docs/reporting/statements/api) documentation. */
          parameters?: {
            columns?: string[];
            connected_account?: string;
            currency?: string;
            interval_end?: number;
            interval_start?: number;
            payout?: string;
            reporting_category?:
              | "advance"
              | "advance_funding"
              | "charge"
              | "charge_failure"
              | "connect_collection_transfer"
              | "connect_reserved_funds"
              | "dispute"
              | "dispute_reversal"
              | "fee"
              | "financing_paydown"
              | "financing_paydown_reversal"
              | "financing_payout"
              | "financing_payout_reversal"
              | "issuing_authorization_hold"
              | "issuing_authorization_release"
              | "issuing_transaction"
              | "network_cost"
              | "other_adjustment"
              | "partial_capture_reversal"
              | "payout"
              | "payout_reversal"
              | "platform_earning"
              | "platform_earning_refund"
              | "refund"
              | "refund_failure"
              | "risk_reserved_funds"
              | "tax"
              | "topup"
              | "topup_reversal"
              | "transfer"
              | "transfer_reversal";
            timezone?:
              | "Africa/Abidjan"
              | "Africa/Accra"
              | "Africa/Addis_Ababa"
              | "Africa/Algiers"
              | "Africa/Asmara"
              | "Africa/Asmera"
              | "Africa/Bamako"
              | "Africa/Bangui"
              | "Africa/Banjul"
              | "Africa/Bissau"
              | "Africa/Blantyre"
              | "Africa/Brazzaville"
              | "Africa/Bujumbura"
              | "Africa/Cairo"
              | "Africa/Casablanca"
              | "Africa/Ceuta"
              | "Africa/Conakry"
              | "Africa/Dakar"
              | "Africa/Dar_es_Salaam"
              | "Africa/Djibouti"
              | "Africa/Douala"
              | "Africa/El_Aaiun"
              | "Africa/Freetown"
              | "Africa/Gaborone"
              | "Africa/Harare"
              | "Africa/Johannesburg"
              | "Africa/Juba"
              | "Africa/Kampala"
              | "Africa/Khartoum"
              | "Africa/Kigali"
              | "Africa/Kinshasa"
              | "Africa/Lagos"
              | "Africa/Libreville"
              | "Africa/Lome"
              | "Africa/Luanda"
              | "Africa/Lubumbashi"
              | "Africa/Lusaka"
              | "Africa/Malabo"
              | "Africa/Maputo"
              | "Africa/Maseru"
              | "Africa/Mbabane"
              | "Africa/Mogadishu"
              | "Africa/Monrovia"
              | "Africa/Nairobi"
              | "Africa/Ndjamena"
              | "Africa/Niamey"
              | "Africa/Nouakchott"
              | "Africa/Ouagadougou"
              | "Africa/Porto-Novo"
              | "Africa/Sao_Tome"
              | "Africa/Timbuktu"
              | "Africa/Tripoli"
              | "Africa/Tunis"
              | "Africa/Windhoek"
              | "America/Adak"
              | "America/Anchorage"
              | "America/Anguilla"
              | "America/Antigua"
              | "America/Araguaina"
              | "America/Argentina/Buenos_Aires"
              | "America/Argentina/Catamarca"
              | "America/Argentina/ComodRivadavia"
              | "America/Argentina/Cordoba"
              | "America/Argentina/Jujuy"
              | "America/Argentina/La_Rioja"
              | "America/Argentina/Mendoza"
              | "America/Argentina/Rio_Gallegos"
              | "America/Argentina/Salta"
              | "America/Argentina/San_Juan"
              | "America/Argentina/San_Luis"
              | "America/Argentina/Tucuman"
              | "America/Argentina/Ushuaia"
              | "America/Aruba"
              | "America/Asuncion"
              | "America/Atikokan"
              | "America/Atka"
              | "America/Bahia"
              | "America/Bahia_Banderas"
              | "America/Barbados"
              | "America/Belem"
              | "America/Belize"
              | "America/Blanc-Sablon"
              | "America/Boa_Vista"
              | "America/Bogota"
              | "America/Boise"
              | "America/Buenos_Aires"
              | "America/Cambridge_Bay"
              | "America/Campo_Grande"
              | "America/Cancun"
              | "America/Caracas"
              | "America/Catamarca"
              | "America/Cayenne"
              | "America/Cayman"
              | "America/Chicago"
              | "America/Chihuahua"
              | "America/Coral_Harbour"
              | "America/Cordoba"
              | "America/Costa_Rica"
              | "America/Creston"
              | "America/Cuiaba"
              | "America/Curacao"
              | "America/Danmarkshavn"
              | "America/Dawson"
              | "America/Dawson_Creek"
              | "America/Denver"
              | "America/Detroit"
              | "America/Dominica"
              | "America/Edmonton"
              | "America/Eirunepe"
              | "America/El_Salvador"
              | "America/Ensenada"
              | "America/Fort_Nelson"
              | "America/Fort_Wayne"
              | "America/Fortaleza"
              | "America/Glace_Bay"
              | "America/Godthab"
              | "America/Goose_Bay"
              | "America/Grand_Turk"
              | "America/Grenada"
              | "America/Guadeloupe"
              | "America/Guatemala"
              | "America/Guayaquil"
              | "America/Guyana"
              | "America/Halifax"
              | "America/Havana"
              | "America/Hermosillo"
              | "America/Indiana/Indianapolis"
              | "America/Indiana/Knox"
              | "America/Indiana/Marengo"
              | "America/Indiana/Petersburg"
              | "America/Indiana/Tell_City"
              | "America/Indiana/Vevay"
              | "America/Indiana/Vincennes"
              | "America/Indiana/Winamac"
              | "America/Indianapolis"
              | "America/Inuvik"
              | "America/Iqaluit"
              | "America/Jamaica"
              | "America/Jujuy"
              | "America/Juneau"
              | "America/Kentucky/Louisville"
              | "America/Kentucky/Monticello"
              | "America/Knox_IN"
              | "America/Kralendijk"
              | "America/La_Paz"
              | "America/Lima"
              | "America/Los_Angeles"
              | "America/Louisville"
              | "America/Lower_Princes"
              | "America/Maceio"
              | "America/Managua"
              | "America/Manaus"
              | "America/Marigot"
              | "America/Martinique"
              | "America/Matamoros"
              | "America/Mazatlan"
              | "America/Mendoza"
              | "America/Menominee"
              | "America/Merida"
              | "America/Metlakatla"
              | "America/Mexico_City"
              | "America/Miquelon"
              | "America/Moncton"
              | "America/Monterrey"
              | "America/Montevideo"
              | "America/Montreal"
              | "America/Montserrat"
              | "America/Nassau"
              | "America/New_York"
              | "America/Nipigon"
              | "America/Nome"
              | "America/Noronha"
              | "America/North_Dakota/Beulah"
              | "America/North_Dakota/Center"
              | "America/North_Dakota/New_Salem"
              | "America/Ojinaga"
              | "America/Panama"
              | "America/Pangnirtung"
              | "America/Paramaribo"
              | "America/Phoenix"
              | "America/Port-au-Prince"
              | "America/Port_of_Spain"
              | "America/Porto_Acre"
              | "America/Porto_Velho"
              | "America/Puerto_Rico"
              | "America/Punta_Arenas"
              | "America/Rainy_River"
              | "America/Rankin_Inlet"
              | "America/Recife"
              | "America/Regina"
              | "America/Resolute"
              | "America/Rio_Branco"
              | "America/Rosario"
              | "America/Santa_Isabel"
              | "America/Santarem"
              | "America/Santiago"
              | "America/Santo_Domingo"
              | "America/Sao_Paulo"
              | "America/Scoresbysund"
              | "America/Shiprock"
              | "America/Sitka"
              | "America/St_Barthelemy"
              | "America/St_Johns"
              | "America/St_Kitts"
              | "America/St_Lucia"
              | "America/St_Thomas"
              | "America/St_Vincent"
              | "America/Swift_Current"
              | "America/Tegucigalpa"
              | "America/Thule"
              | "America/Thunder_Bay"
              | "America/Tijuana"
              | "America/Toronto"
              | "America/Tortola"
              | "America/Vancouver"
              | "America/Virgin"
              | "America/Whitehorse"
              | "America/Winnipeg"
              | "America/Yakutat"
              | "America/Yellowknife"
              | "Antarctica/Casey"
              | "Antarctica/Davis"
              | "Antarctica/DumontDUrville"
              | "Antarctica/Macquarie"
              | "Antarctica/Mawson"
              | "Antarctica/McMurdo"
              | "Antarctica/Palmer"
              | "Antarctica/Rothera"
              | "Antarctica/South_Pole"
              | "Antarctica/Syowa"
              | "Antarctica/Troll"
              | "Antarctica/Vostok"
              | "Arctic/Longyearbyen"
              | "Asia/Aden"
              | "Asia/Almaty"
              | "Asia/Amman"
              | "Asia/Anadyr"
              | "Asia/Aqtau"
              | "Asia/Aqtobe"
              | "Asia/Ashgabat"
              | "Asia/Ashkhabad"
              | "Asia/Atyrau"
              | "Asia/Baghdad"
              | "Asia/Bahrain"
              | "Asia/Baku"
              | "Asia/Bangkok"
              | "Asia/Barnaul"
              | "Asia/Beirut"
              | "Asia/Bishkek"
              | "Asia/Brunei"
              | "Asia/Calcutta"
              | "Asia/Chita"
              | "Asia/Choibalsan"
              | "Asia/Chongqing"
              | "Asia/Chungking"
              | "Asia/Colombo"
              | "Asia/Dacca"
              | "Asia/Damascus"
              | "Asia/Dhaka"
              | "Asia/Dili"
              | "Asia/Dubai"
              | "Asia/Dushanbe"
              | "Asia/Famagusta"
              | "Asia/Gaza"
              | "Asia/Harbin"
              | "Asia/Hebron"
              | "Asia/Ho_Chi_Minh"
              | "Asia/Hong_Kong"
              | "Asia/Hovd"
              | "Asia/Irkutsk"
              | "Asia/Istanbul"
              | "Asia/Jakarta"
              | "Asia/Jayapura"
              | "Asia/Jerusalem"
              | "Asia/Kabul"
              | "Asia/Kamchatka"
              | "Asia/Karachi"
              | "Asia/Kashgar"
              | "Asia/Kathmandu"
              | "Asia/Katmandu"
              | "Asia/Khandyga"
              | "Asia/Kolkata"
              | "Asia/Krasnoyarsk"
              | "Asia/Kuala_Lumpur"
              | "Asia/Kuching"
              | "Asia/Kuwait"
              | "Asia/Macao"
              | "Asia/Macau"
              | "Asia/Magadan"
              | "Asia/Makassar"
              | "Asia/Manila"
              | "Asia/Muscat"
              | "Asia/Nicosia"
              | "Asia/Novokuznetsk"
              | "Asia/Novosibirsk"
              | "Asia/Omsk"
              | "Asia/Oral"
              | "Asia/Phnom_Penh"
              | "Asia/Pontianak"
              | "Asia/Pyongyang"
              | "Asia/Qatar"
              | "Asia/Qostanay"
              | "Asia/Qyzylorda"
              | "Asia/Rangoon"
              | "Asia/Riyadh"
              | "Asia/Saigon"
              | "Asia/Sakhalin"
              | "Asia/Samarkand"
              | "Asia/Seoul"
              | "Asia/Shanghai"
              | "Asia/Singapore"
              | "Asia/Srednekolymsk"
              | "Asia/Taipei"
              | "Asia/Tashkent"
              | "Asia/Tbilisi"
              | "Asia/Tehran"
              | "Asia/Tel_Aviv"
              | "Asia/Thimbu"
              | "Asia/Thimphu"
              | "Asia/Tokyo"
              | "Asia/Tomsk"
              | "Asia/Ujung_Pandang"
              | "Asia/Ulaanbaatar"
              | "Asia/Ulan_Bator"
              | "Asia/Urumqi"
              | "Asia/Ust-Nera"
              | "Asia/Vientiane"
              | "Asia/Vladivostok"
              | "Asia/Yakutsk"
              | "Asia/Yangon"
              | "Asia/Yekaterinburg"
              | "Asia/Yerevan"
              | "Atlantic/Azores"
              | "Atlantic/Bermuda"
              | "Atlantic/Canary"
              | "Atlantic/Cape_Verde"
              | "Atlantic/Faeroe"
              | "Atlantic/Faroe"
              | "Atlantic/Jan_Mayen"
              | "Atlantic/Madeira"
              | "Atlantic/Reykjavik"
              | "Atlantic/South_Georgia"
              | "Atlantic/St_Helena"
              | "Atlantic/Stanley"
              | "Australia/ACT"
              | "Australia/Adelaide"
              | "Australia/Brisbane"
              | "Australia/Broken_Hill"
              | "Australia/Canberra"
              | "Australia/Currie"
              | "Australia/Darwin"
              | "Australia/Eucla"
              | "Australia/Hobart"
              | "Australia/LHI"
              | "Australia/Lindeman"
              | "Australia/Lord_Howe"
              | "Australia/Melbourne"
              | "Australia/NSW"
              | "Australia/North"
              | "Australia/Perth"
              | "Australia/Queensland"
              | "Australia/South"
              | "Australia/Sydney"
              | "Australia/Tasmania"
              | "Australia/Victoria"
              | "Australia/West"
              | "Australia/Yancowinna"
              | "Brazil/Acre"
              | "Brazil/DeNoronha"
              | "Brazil/East"
              | "Brazil/West"
              | "CET"
              | "CST6CDT"
              | "Canada/Atlantic"
              | "Canada/Central"
              | "Canada/Eastern"
              | "Canada/Mountain"
              | "Canada/Newfoundland"
              | "Canada/Pacific"
              | "Canada/Saskatchewan"
              | "Canada/Yukon"
              | "Chile/Continental"
              | "Chile/EasterIsland"
              | "Cuba"
              | "EET"
              | "EST"
              | "EST5EDT"
              | "Egypt"
              | "Eire"
              | "Etc/GMT"
              | "Etc/GMT+0"
              | "Etc/GMT+1"
              | "Etc/GMT+10"
              | "Etc/GMT+11"
              | "Etc/GMT+12"
              | "Etc/GMT+2"
              | "Etc/GMT+3"
              | "Etc/GMT+4"
              | "Etc/GMT+5"
              | "Etc/GMT+6"
              | "Etc/GMT+7"
              | "Etc/GMT+8"
              | "Etc/GMT+9"
              | "Etc/GMT-0"
              | "Etc/GMT-1"
              | "Etc/GMT-10"
              | "Etc/GMT-11"
              | "Etc/GMT-12"
              | "Etc/GMT-13"
              | "Etc/GMT-14"
              | "Etc/GMT-2"
              | "Etc/GMT-3"
              | "Etc/GMT-4"
              | "Etc/GMT-5"
              | "Etc/GMT-6"
              | "Etc/GMT-7"
              | "Etc/GMT-8"
              | "Etc/GMT-9"
              | "Etc/GMT0"
              | "Etc/Greenwich"
              | "Etc/UCT"
              | "Etc/UTC"
              | "Etc/Universal"
              | "Etc/Zulu"
              | "Europe/Amsterdam"
              | "Europe/Andorra"
              | "Europe/Astrakhan"
              | "Europe/Athens"
              | "Europe/Belfast"
              | "Europe/Belgrade"
              | "Europe/Berlin"
              | "Europe/Bratislava"
              | "Europe/Brussels"
              | "Europe/Bucharest"
              | "Europe/Budapest"
              | "Europe/Busingen"
              | "Europe/Chisinau"
              | "Europe/Copenhagen"
              | "Europe/Dublin"
              | "Europe/Gibraltar"
              | "Europe/Guernsey"
              | "Europe/Helsinki"
              | "Europe/Isle_of_Man"
              | "Europe/Istanbul"
              | "Europe/Jersey"
              | "Europe/Kaliningrad"
              | "Europe/Kiev"
              | "Europe/Kirov"
              | "Europe/Lisbon"
              | "Europe/Ljubljana"
              | "Europe/London"
              | "Europe/Luxembourg"
              | "Europe/Madrid"
              | "Europe/Malta"
              | "Europe/Mariehamn"
              | "Europe/Minsk"
              | "Europe/Monaco"
              | "Europe/Moscow"
              | "Europe/Nicosia"
              | "Europe/Oslo"
              | "Europe/Paris"
              | "Europe/Podgorica"
              | "Europe/Prague"
              | "Europe/Riga"
              | "Europe/Rome"
              | "Europe/Samara"
              | "Europe/San_Marino"
              | "Europe/Sarajevo"
              | "Europe/Saratov"
              | "Europe/Simferopol"
              | "Europe/Skopje"
              | "Europe/Sofia"
              | "Europe/Stockholm"
              | "Europe/Tallinn"
              | "Europe/Tirane"
              | "Europe/Tiraspol"
              | "Europe/Ulyanovsk"
              | "Europe/Uzhgorod"
              | "Europe/Vaduz"
              | "Europe/Vatican"
              | "Europe/Vienna"
              | "Europe/Vilnius"
              | "Europe/Volgograd"
              | "Europe/Warsaw"
              | "Europe/Zagreb"
              | "Europe/Zaporozhye"
              | "Europe/Zurich"
              | "Factory"
              | "GB"
              | "GB-Eire"
              | "GMT"
              | "GMT+0"
              | "GMT-0"
              | "GMT0"
              | "Greenwich"
              | "HST"
              | "Hongkong"
              | "Iceland"
              | "Indian/Antananarivo"
              | "Indian/Chagos"
              | "Indian/Christmas"
              | "Indian/Cocos"
              | "Indian/Comoro"
              | "Indian/Kerguelen"
              | "Indian/Mahe"
              | "Indian/Maldives"
              | "Indian/Mauritius"
              | "Indian/Mayotte"
              | "Indian/Reunion"
              | "Iran"
              | "Israel"
              | "Jamaica"
              | "Japan"
              | "Kwajalein"
              | "Libya"
              | "MET"
              | "MST"
              | "MST7MDT"
              | "Mexico/BajaNorte"
              | "Mexico/BajaSur"
              | "Mexico/General"
              | "NZ"
              | "NZ-CHAT"
              | "Navajo"
              | "PRC"
              | "PST8PDT"
              | "Pacific/Apia"
              | "Pacific/Auckland"
              | "Pacific/Bougainville"
              | "Pacific/Chatham"
              | "Pacific/Chuuk"
              | "Pacific/Easter"
              | "Pacific/Efate"
              | "Pacific/Enderbury"
              | "Pacific/Fakaofo"
              | "Pacific/Fiji"
              | "Pacific/Funafuti"
              | "Pacific/Galapagos"
              | "Pacific/Gambier"
              | "Pacific/Guadalcanal"
              | "Pacific/Guam"
              | "Pacific/Honolulu"
              | "Pacific/Johnston"
              | "Pacific/Kiritimati"
              | "Pacific/Kosrae"
              | "Pacific/Kwajalein"
              | "Pacific/Majuro"
              | "Pacific/Marquesas"
              | "Pacific/Midway"
              | "Pacific/Nauru"
              | "Pacific/Niue"
              | "Pacific/Norfolk"
              | "Pacific/Noumea"
              | "Pacific/Pago_Pago"
              | "Pacific/Palau"
              | "Pacific/Pitcairn"
              | "Pacific/Pohnpei"
              | "Pacific/Ponape"
              | "Pacific/Port_Moresby"
              | "Pacific/Rarotonga"
              | "Pacific/Saipan"
              | "Pacific/Samoa"
              | "Pacific/Tahiti"
              | "Pacific/Tarawa"
              | "Pacific/Tongatapu"
              | "Pacific/Truk"
              | "Pacific/Wake"
              | "Pacific/Wallis"
              | "Pacific/Yap"
              | "Poland"
              | "Portugal"
              | "ROC"
              | "ROK"
              | "Singapore"
              | "Turkey"
              | "UCT"
              | "US/Alaska"
              | "US/Aleutian"
              | "US/Arizona"
              | "US/Central"
              | "US/East-Indiana"
              | "US/Eastern"
              | "US/Hawaii"
              | "US/Indiana-Starke"
              | "US/Michigan"
              | "US/Mountain"
              | "US/Pacific"
              | "US/Pacific-New"
              | "US/Samoa"
              | "UTC"
              | "Universal"
              | "W-SU"
              | "WET"
              | "Zulu";
          };
          /** The ID of the [report type](https://stripe.com/docs/reporting/statements/api#report-types) to run, such as `"balance.summary.1"`. */
          report_type: string;
        };
      };
    };
  };
  /** <p>Retrieves the details of an existing Report Run. (Requires a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p> */
  GetReportingReportRunsReportRun: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        report_run: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["reporting.report_run"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Returns a full list of Report Types. (Requires a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p> */
  GetReportingReportTypes: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["reporting.report_type"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Retrieves the details of a Report Type. (Requires a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p> */
  GetReportingReportTypesReportType: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        report_type: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["reporting.report_type"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Returns a list of <code>Review</code> objects that have <code>open</code> set to <code>true</code>. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
  GetReviews: {
    parameters: {
      query: {
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["review"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Retrieves a <code>Review</code> object.</p> */
  GetReviewsReview: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        review: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["review"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Approves a <code>Review</code> object, closing it and removing it from the list of reviews.</p> */
  PostReviewsReviewApprove: {
    parameters: {
      path: {
        review: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["review"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
        };
      };
    };
  };
  /** <p>Returns a list of SetupIntents.</p> */
  GetSetupIntents: {
    parameters: {
      query: {
        /** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** Only return SetupIntents for the customer specified by this customer ID. */
        customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** Only return SetupIntents associated with the specified payment method. */
        payment_method?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["setup_intent"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>Creates a SetupIntent object.</p>
   *
   * <p>After the SetupIntent is created, attach a payment method and <a href="/docs/api/setup_intents/confirm">confirm</a>
   * to collect any required permissions to charge the payment method later.</p>
   */
  PostSetupIntents: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["setup_intent"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Set to `true` to attempt to confirm this SetupIntent immediately. This parameter defaults to `false`. If the payment method attached is a card, a return_url may be provided in case additional authentication is required. */
          confirm?: boolean;
          /**
           * ID of the Customer this SetupIntent belongs to, if one exists.
           *
           * If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
           */
          customer?: string;
          /** An arbitrary string attached to the object. Often useful for displaying to users. */
          description?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** This hash contains details about the Mandate to create. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/setup_intents/create#create_setup_intent-confirm). */
          mandate_data?: {
            customer_acceptance: {
              accepted_at?: number;
              offline?: { [key: string]: any };
              online?: {
                ip_address: string;
                user_agent: string;
              };
              type: "offline" | "online";
            };
          };
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: { [key: string]: string };
          /** The Stripe account ID for which this SetupIntent is created. */
          on_behalf_of?: string;
          /** ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent. */
          payment_method?: string;
          /** Payment-method-specific configuration for this SetupIntent. */
          payment_method_options?: {
            card?: {
              request_three_d_secure?: "any" | "automatic";
            };
          };
          /** The list of payment method types (e.g. card) that this SetupIntent is allowed to use. If this is not provided, defaults to ["card"]. */
          payment_method_types?: string[];
          /** The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site. If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/setup_intents/create#create_setup_intent-confirm). */
          return_url?: string;
          /** If this hash is populated, this SetupIntent will generate a single_use Mandate on success. */
          single_use?: {
            amount: number;
            currency: string;
          };
          /** Indicates how the payment method is intended to be used in the future. If not provided, this value defaults to `off_session`. */
          usage?: "off_session" | "on_session";
        };
      };
    };
  };
  /**
   * <p>Retrieves the details of a SetupIntent that has previously been created. </p>
   *
   * <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>
   *
   * <p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href="#setup_intent_object">SetupIntent</a> object reference for more details.</p>
   */
  GetSetupIntentsIntent: {
    parameters: {
      query: {
        /** The client secret of the SetupIntent. Required if a publishable key is used to retrieve the SetupIntent. */
        client_secret?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        intent: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["setup_intent"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Updates a SetupIntent object.</p> */
  PostSetupIntentsIntent: {
    parameters: {
      path: {
        intent: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["setup_intent"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /**
           * ID of the Customer this SetupIntent belongs to, if one exists.
           *
           * If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
           */
          customer?: string;
          /** An arbitrary string attached to the object. Often useful for displaying to users. */
          description?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent. */
          payment_method?: string;
          /** Payment-method-specific configuration for this SetupIntent. */
          payment_method_options?: {
            card?: {
              request_three_d_secure?: "any" | "automatic";
            };
          };
          /** The list of payment method types (e.g. card) that this SetupIntent is allowed to set up. If this is not provided, defaults to ["card"]. */
          payment_method_types?: string[];
        };
      };
    };
  };
  /**
   * <p>A SetupIntent object can be canceled when it is in one of these statuses: <code>requires_payment_method</code>, <code>requires_capture</code>, <code>requires_confirmation</code>, <code>requires_action</code>. </p>
   *
   * <p>Once canceled, setup is abandoned and any operations on the SetupIntent will fail with an error.</p>
   */
  PostSetupIntentsIntentCancel: {
    parameters: {
      path: {
        intent: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["setup_intent"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Reason for canceling this SetupIntent. Possible values are `abandoned`, `requested_by_customer`, or `duplicate` */
          cancellation_reason?: "abandoned" | "duplicate" | "requested_by_customer";
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
        };
      };
    };
  };
  /**
   * <p>Confirm that your customer intends to set up the current or
   * provided payment method. For example, you would confirm a SetupIntent
   * when a customer hits the “Save” button on a payment method management
   * page on your website.</p>
   *
   * <p>If the selected payment method does not require any additional
   * steps from the customer, the SetupIntent will transition to the
   * <code>succeeded</code> status.</p>
   *
   * <p>Otherwise, it will transition to the <code>requires_action</code> status and
   * suggest additional actions via <code>next_action</code>. If setup fails,
   * the SetupIntent will transition to the
   * <code>requires_payment_method</code> status.</p>
   */
  PostSetupIntentsIntentConfirm: {
    parameters: {
      path: {
        intent: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["setup_intent"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The client secret of the SetupIntent. */
          client_secret?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** This hash contains details about the Mandate to create */
          mandate_data?: Partial<{
            customer_acceptance: {
              accepted_at?: number;
              offline?: { [key: string]: any };
              online?: {
                ip_address: string;
                user_agent: string;
              };
              type: "offline" | "online";
            };
          }> &
            Partial<{
              customer_acceptance: {
                online: {
                  ip_address?: string;
                  user_agent?: string;
                };
                type: "online";
              };
            }>;
          /** ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent. */
          payment_method?: string;
          /** Payment-method-specific configuration for this SetupIntent. */
          payment_method_options?: {
            card?: {
              request_three_d_secure?: "any" | "automatic";
            };
          };
          /**
           * The URL to redirect your customer back to after they authenticate on the payment method's app or site.
           * If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme.
           * This parameter is only used for cards and other redirect-based payment methods.
           */
          return_url?: string;
        };
      };
    };
  };
  /** <p>Returns a list of scheduled query runs.</p> */
  GetSigmaScheduledQueryRuns: {
    parameters: {
      query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["scheduled_query_run"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Retrieves the details of an scheduled query run.</p> */
  GetSigmaScheduledQueryRunsScheduledQueryRun: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        scheduled_query_run: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["scheduled_query_run"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Returns a list of your SKUs. The SKUs are returned sorted by creation date, with the most recently created SKUs appearing first.</p> */
  GetSkus: {
    parameters: {
      query: {
        /** Only return SKUs that are active or inactive (e.g., pass `false` to list all inactive products). */
        active?: boolean;
        /** Only return SKUs that have the specified key-value pairs in this partially constructed dictionary. Can be specified only if `product` is also supplied. For instance, if the associated product has attributes `["color", "size"]`, passing in `attributes[color]=red` returns all the SKUs for this product that have `color` set to `red`. */
        attributes?: { [key: string]: string };
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** Only return SKUs with the given IDs. */
        ids?: string[];
        /** Only return SKUs that are either in stock or out of stock (e.g., pass `false` to list all SKUs that are out of stock). If no value is provided, all SKUs are returned. */
        in_stock?: boolean;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** The ID of the product whose SKUs will be retrieved. Must be a product with type `good`. */
        product?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["sku"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Creates a new SKU associated with a product.</p> */
  PostSkus: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["sku"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Whether the SKU is available for purchase. Default to `true`. */
          active?: boolean;
          /** A dictionary of attributes and values for the attributes defined by the product. If, for example, a product's attributes are `["size", "gender"]`, a valid SKU has the following dictionary of attributes: `{"size": "Medium", "gender": "Unisex"}`. */
          attributes?: { [key: string]: string };
          /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          currency: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** The identifier for the SKU. Must be unique. If not provided, an identifier will be randomly generated. */
          id?: string;
          /** The URL of an image for this SKU, meant to be displayable to the customer. */
          image?: string;
          /** Description of the SKU's inventory. */
          inventory: {
            quantity?: number;
            type?: "bucket" | "finite" | "infinite";
            value?: "" | "in_stock" | "limited" | "out_of_stock";
          };
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: { [key: string]: string };
          /** The dimensions of this SKU for shipping purposes. */
          package_dimensions?: {
            height: number;
            length: number;
            weight: number;
            width: number;
          };
          /** The cost of the item as a nonnegative integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency). */
          price: number;
          /** The ID of the product this SKU is associated with. Must be a product with type `good`. */
          product: string;
        };
      };
    };
  };
  /** <p>Retrieves the details of an existing SKU. Supply the unique SKU identifier from either a SKU creation request or from the product, and Stripe will return the corresponding SKU information.</p> */
  GetSkusId: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": Partial<components["schemas"]["sku"]> & Partial<components["schemas"]["deleted_sku"]>;
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>Updates the specific SKU by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * <p>Note that a SKU’s <code>attributes</code> are not editable. Instead, you would need to deactivate the existing SKU and create a new one with the new attribute values.</p>
   */
  PostSkusId: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["sku"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Whether this SKU is available for purchase. */
          active?: boolean;
          /** A dictionary of attributes and values for the attributes defined by the product. When specified, `attributes` will partially update the existing attributes dictionary on the product, with the postcondition that a value must be present for each attribute key on the product. */
          attributes?: { [key: string]: string };
          /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          currency?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** The URL of an image for this SKU, meant to be displayable to the customer. */
          image?: string;
          /** Description of the SKU's inventory. */
          inventory?: {
            quantity?: number;
            type?: "bucket" | "finite" | "infinite";
            value?: "" | "in_stock" | "limited" | "out_of_stock";
          };
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** The dimensions of this SKU for shipping purposes. */
          package_dimensions?: Partial<{
            height: number;
            length: number;
            weight: number;
            width: number;
          }> &
            Partial<"">;
          /** The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency). */
          price?: number;
          /** The ID of the product that this SKU should belong to. The product must exist, have the same set of attribute names as the SKU's current product, and be of type `good`. */
          product?: string;
        };
      };
    };
  };
  /** <p>Delete a SKU. Deleting a SKU is only possible until it has been used in an order.</p> */
  DeleteSkusId: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["deleted_sku"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Creates a new source object.</p> */
  PostSources: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["source"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources. Not supported for `receiver` type sources, where charge amount may not be specified until funds land. */
          amount?: number;
          /** Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. */
          currency?: string;
          /** The `Customer` to whom the original source is attached to. Must be set when the original source is not a `Source` (e.g., `Card`). */
          customer?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** The authentication `flow` of the source to create. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. It is generally inferred unless a type supports multiple flows. */
          flow?: "code_verification" | "none" | "receiver" | "redirect";
          /** Information about a mandate possibility attached to a source object (generally for bank debits) as well as its acceptance status. */
          mandate?: {
            acceptance?: {
              date?: number;
              ip?: string;
              offline?: {
                contact_email: string;
              };
              online?: {
                date?: number;
                ip?: string;
                user_agent?: string;
              };
              status: "accepted" | "pending" | "refused" | "revoked";
              type?: "offline" | "online";
              user_agent?: string;
            };
            amount?: Partial<number> & Partial<"">;
            currency?: string;
            interval?: "one_time" | "scheduled" | "variable";
            notification_method?: "deprecated_none" | "email" | "manual" | "none" | "stripe_email";
          };
          metadata?: { [key: string]: string };
          /** The source to share. */
          original_source?: string;
          /** Information about the owner of the payment instrument that may be used or required by particular source types. */
          owner?: {
            address?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            email?: string;
            name?: string;
            phone?: string;
          };
          /** Optional parameters for the receiver flow. Can be set only if the source is a receiver (`flow` is `receiver`). */
          receiver?: {
            refund_attributes_method?: "email" | "manual" | "none";
          };
          /** Parameters required for the redirect flow. Required if the source is authenticated by a redirect (`flow` is `redirect`). */
          redirect?: {
            return_url: string;
          };
          /** Information about the items and shipping associated with the source. Required for transactional credit (for example Klarna) sources before you can charge it. */
          source_order?: {
            items?: {
              amount?: number;
              currency?: string;
              description?: string;
              parent?: string;
              quantity?: number;
              type?: "discount" | "shipping" | "sku" | "tax";
            }[];
            shipping?: {
              address: {
                city?: string;
                country?: string;
                line1: string;
                line2?: string;
                postal_code?: string;
                state?: string;
              };
              carrier?: string;
              name?: string;
              phone?: string;
              tracking_number?: string;
            };
          };
          /** An arbitrary string to be displayed on your customer's statement. As an example, if your website is `RunClub` and the item you're charging for is a race ticket, you may want to specify a `statement_descriptor` of `RunClub 5K race ticket.` While many payment types will display this information, some may not display it at all. */
          statement_descriptor?: string;
          /** An optional token used to create the source. When passed, token properties will override source parameters. */
          token?: string;
          /** The `type` of the source to create. Required unless `customer` and `original_source` are specified (see the [Cloning card Sources](https://stripe.com/docs/sources/connect#cloning-card-sources) guide) */
          type?: string;
          usage?: "reusable" | "single_use";
        };
      };
    };
  };
  /** <p>Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.</p> */
  GetSourcesSource: {
    parameters: {
      query: {
        /** The client secret of the source. Required if a publishable key is used to retrieve the source. */
        client_secret?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        source: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["source"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * <p>This request accepts the <code>metadata</code> and <code>owner</code> as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our <a href="/docs/sources">payment method guides</a> for more detail.</p>
   */
  PostSourcesSource: {
    parameters: {
      path: {
        source: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["source"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Amount associated with the source. */
          amount?: number;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Information about a mandate possibility attached to a source object (generally for bank debits) as well as its acceptance status. */
          mandate?: {
            acceptance?: {
              date?: number;
              ip?: string;
              offline?: {
                contact_email: string;
              };
              online?: {
                date?: number;
                ip?: string;
                user_agent?: string;
              };
              status: "accepted" | "pending" | "refused" | "revoked";
              type?: "offline" | "online";
              user_agent?: string;
            };
            amount?: Partial<number> & Partial<"">;
            currency?: string;
            interval?: "one_time" | "scheduled" | "variable";
            notification_method?: "deprecated_none" | "email" | "manual" | "none" | "stripe_email";
          };
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** Information about the owner of the payment instrument that may be used or required by particular source types. */
          owner?: {
            address?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            email?: string;
            name?: string;
            phone?: string;
          };
          /** Information about the items and shipping associated with the source. Required for transactional credit (for example Klarna) sources before you can charge it. */
          source_order?: {
            items?: {
              amount?: number;
              currency?: string;
              description?: string;
              parent?: string;
              quantity?: number;
              type?: "discount" | "shipping" | "sku" | "tax";
            }[];
            shipping?: {
              address: {
                city?: string;
                country?: string;
                line1: string;
                line2?: string;
                postal_code?: string;
                state?: string;
              };
              carrier?: string;
              name?: string;
              phone?: string;
              tracking_number?: string;
            };
          };
        };
      };
    };
  };
  /** <p>Retrieves a new Source MandateNotification.</p> */
  GetSourcesSourceMandateNotificationsMandateNotification: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        mandate_notification: string;
        source: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["source_mandate_notification"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>List source transactions for a given source.</p> */
  GetSourcesSourceSourceTransactions: {
    parameters: {
      query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
      path: {
        source: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["source_transaction"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Retrieve an existing source transaction object. Supply the unique source ID from a source creation request and the source transaction ID and Stripe will return the corresponding up-to-date source object information.</p> */
  GetSourcesSourceSourceTransactionsSourceTransaction: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        source: string;
        source_transaction: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["source_transaction"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Verify a given source.</p> */
  PostSourcesSourceVerify: {
    parameters: {
      path: {
        source: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["source"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** The values needed to verify the source. */
          values: string[];
        };
      };
    };
  };
  /** <p>Returns a list of your subscription items for a given subscription.</p> */
  GetSubscriptionItems: {
    parameters: {
      query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
        /** The ID of the subscription whose items will be retrieved. */
        subscription: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["subscription_item"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Adds a new item to an existing subscription. No existing items will be changed or replaced.</p> */
  PostSubscriptionItems: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["subscription_item"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. When updating, pass an empty string to remove previously-defined thresholds. */
          billing_thresholds?: Partial<{
            usage_gte: number;
          }> &
            Partial<"">;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: { [key: string]: string };
          /**
           * Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
           *
           * Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).
           *
           * Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's first invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not create a subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
           */
          payment_behavior?: "allow_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
          /** The identifier of the plan to add to the subscription. */
          plan?: string;
          /** This field has been renamed to `proration_behavior`. `prorate=true` can be replaced with `proration_behavior=create_prorations` and `prorate=false` can be replaced with `proration_behavior=none`. */
          prorate?: boolean;
          /**
           * Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. Valid values are `create_prorations`, `none`, or `always_invoice`.
           *
           * Passing `create_prorations` will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://stripe.com/docs/subscriptions/upgrading-downgrading#immediate-payment). In order to always invoice immediately for prorations, pass `always_invoice`.
           *
           * Prorations can be disabled by passing `none`.
           */
          proration_behavior?: "always_invoice" | "create_prorations" | "none";
          /** If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply the same proration that was previewed with the [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint. */
          proration_date?: number;
          /** The quantity you'd like to apply to the subscription item you're creating. */
          quantity?: number;
          /** The identifier of the subscription to modify. */
          subscription: string;
          /** A list of [Tax Rate](https://stripe.com/docs/api/tax_rates) ids. These Tax Rates will override the [`default_tax_rates`](https://stripe.com/docs/api/subscriptions/create#create_subscription-default_tax_rates) on the Subscription. When updating, pass an empty string to remove previously-defined tax rates. */
          tax_rates?: Partial<string[]> & Partial<"">;
        };
      };
    };
  };
  /** <p>Retrieves the invoice item with the given ID.</p> */
  GetSubscriptionItemsItem: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        item: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["subscription_item"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Updates the plan or quantity of an item on a current subscription.</p> */
  PostSubscriptionItemsItem: {
    parameters: {
      path: {
        item: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["subscription_item"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. When updating, pass an empty string to remove previously-defined thresholds. */
          billing_thresholds?: Partial<{
            usage_gte: number;
          }> &
            Partial<"">;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** Indicates if a customer is on or off-session while an invoice payment is attempted. */
          off_session?: boolean;
          /**
           * Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
           *
           * Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).
           *
           * Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's first invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not create a subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
           */
          payment_behavior?: "allow_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
          /** The identifier of the new plan for this subscription item. */
          plan?: string;
          /** This field has been renamed to `proration_behavior`. `prorate=true` can be replaced with `proration_behavior=create_prorations` and `prorate=false` can be replaced with `proration_behavior=none`. */
          prorate?: boolean;
          /**
           * Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. Valid values are `create_prorations`, `none`, or `always_invoice`.
           *
           * Passing `create_prorations` will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://stripe.com/docs/subscriptions/upgrading-downgrading#immediate-payment). In order to always invoice immediately for prorations, pass `always_invoice`.
           *
           * Prorations can be disabled by passing `none`.
           */
          proration_behavior?: "always_invoice" | "create_prorations" | "none";
          /** If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply the same proration that was previewed with the [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint. */
          proration_date?: number;
          /** The quantity you'd like to apply to the subscription item you're creating. */
          quantity?: number;
          /** A list of [Tax Rate](https://stripe.com/docs/api/tax_rates) ids. These Tax Rates will override the [`default_tax_rates`](https://stripe.com/docs/api/subscriptions/create#create_subscription-default_tax_rates) on the Subscription. When updating, pass an empty string to remove previously-defined tax rates. */
          tax_rates?: Partial<string[]> & Partial<"">;
        };
      };
    };
  };
  /** <p>Deletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.</p> */
  DeleteSubscriptionItemsItem: {
    parameters: {
      path: {
        item: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["deleted_subscription_item"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Delete all usage for the given subscription item. Allowed only when the current plan's `usage_type` is `metered`. */
          clear_usage?: boolean;
          /** This field has been renamed to `proration_behavior`. `prorate=true` can be replaced with `proration_behavior=create_prorations` and `prorate=false` can be replaced with `proration_behavior=none`. */
          prorate?: boolean;
          /**
           * Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. Valid values are `create_prorations`, `none`, or `always_invoice`.
           *
           * Passing `create_prorations` will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://stripe.com/docs/subscriptions/upgrading-downgrading#immediate-payment). In order to always invoice immediately for prorations, pass `always_invoice`.
           *
           * Prorations can be disabled by passing `none`.
           */
          proration_behavior?: "always_invoice" | "create_prorations" | "none";
          /** If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply the same proration that was previewed with the [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint. */
          proration_date?: number;
        };
      };
    };
  };
  /**
   * <p>For the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that’s been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the billing plan’s month of September).</p>
   *
   * <p>The list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn’t ended yet. Since new usage records can still be added, the returned summary information for the subscription item’s ID should be seen as unstable until the subscription billing period ends.</p>
   */
  GetSubscriptionItemsSubscriptionItemUsageRecordSummaries: {
    parameters: {
      query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
      path: {
        subscription_item: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["usage_record_summary"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>Creates a usage record for a specified subscription item and date, and fills it with a quantity.</p>
   *
   * <p>Usage records provide <code>quantity</code> information that Stripe uses to track how much a customer is using your service. With usage information and the pricing model set up by the <a href="https://stripe.com/docs/billing/subscriptions/metered-billing">metered billing</a> plan, Stripe helps you send accurate invoices to your customers.</p>
   *
   * <p>The default calculation for usage is to add up all the <code>quantity</code> values of the usage records within a billing period. You can change this default behavior with the billing plan’s <code>aggregate_usage</code> <a href="/docs/api/plans/create#create_plan-aggregate_usage">parameter</a>. When there is more than one usage record with the same timestamp, Stripe adds the <code>quantity</code> values together. In most cases, this is the desired resolution, however, you can change this behavior with the <code>action</code> parameter.</p>
   *
   * <p>The default pricing model for metered billing is <a href="/docs/api/plans/object#plan_object-billing_scheme">per-unit pricing</a>. For finer granularity, you can configure metered billing to have a <a href="https://stripe.com/docs/billing/subscriptions/tiers">tiered pricing</a> model.</p>
   */
  PostSubscriptionItemsSubscriptionItemUsageRecords: {
    parameters: {
      path: {
        subscription_item: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["usage_record"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Valid values are `increment` (default) or `set`. When using `increment` the specified `quantity` will be added to the usage at the specified timestamp. The `set` action will overwrite the usage quantity at that timestamp. If the subscription has [billing thresholds](https://stripe.com/docs/api/subscriptions/object#subscription_object-billing_thresholds), `increment` is the only allowed value. */
          action?: "increment" | "set";
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** The usage quantity for the specified timestamp. */
          quantity: number;
          /** The timestamp for the usage event. This timestamp must be within the current billing period of the subscription of the provided `subscription_item`. */
          timestamp: number;
        };
      };
    };
  };
  /** <p>Retrieves the list of your subscription schedules.</p> */
  GetSubscriptionSchedules: {
    parameters: {
      query: {
        /** Only return subscription schedules that were created canceled the given date interval. */
        canceled_at?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** Only return subscription schedules that completed during the given date interval. */
        completed_at?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** Only return subscription schedules that were created during the given date interval. */
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** Only return subscription schedules for the given customer. */
        customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** Only return subscription schedules that were released during the given date interval. */
        released_at?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** Only return subscription schedules that have not started yet. */
        scheduled?: boolean;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["subscription_schedule"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Creates a new subscription schedule object. Each customer can have up to 25 active or scheduled subscriptions.</p> */
  PostSubscriptionSchedules: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["subscription_schedule"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The identifier of the customer to create the subscription schedule for. */
          customer?: string;
          /** Object representing the subscription schedule's default settings. */
          default_settings?: {
            billing_thresholds?: Partial<{
              amount_gte?: number;
              reset_billing_cycle_anchor?: boolean;
            }> &
              Partial<"">;
            collection_method?: "charge_automatically" | "send_invoice";
            default_payment_method?: string;
            invoice_settings?: {
              days_until_due?: number;
            };
          };
          /** Configures how the subscription schedule behaves when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running.`cancel` will end the subscription schedule and cancel the underlying subscription. */
          end_behavior?: "cancel" | "none" | "release" | "renew";
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Migrate an existing subscription to be managed by a subscription schedule. If this parameter is set, a subscription schedule will be created using the subscription's plan(s), set to auto-renew using the subscription's interval. When using this parameter, other parameters (such as phase values) cannot be set. To create a subscription schedule with other modifications, we recommend making two separate API calls. */
          from_subscription?: string;
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase. */
          phases?: {
            application_fee_percent?: number;
            billing_thresholds?: Partial<{
              amount_gte?: number;
              reset_billing_cycle_anchor?: boolean;
            }> &
              Partial<"">;
            collection_method?: "charge_automatically" | "send_invoice";
            coupon?: string;
            default_payment_method?: string;
            default_tax_rates?: Partial<string[]> & Partial<"">;
            end_date?: number;
            invoice_settings?: {
              days_until_due?: number;
            };
            iterations?: number;
            plans: {
              billing_thresholds?: Partial<{
                usage_gte: number;
              }> &
                Partial<"">;
              plan?: string;
              quantity?: number;
              tax_rates?: Partial<string[]> & Partial<"">;
            }[];
            proration_behavior?: "always_invoice" | "create_prorations" | "none";
            tax_percent?: number;
            trial?: boolean;
            trial_end?: number;
          }[];
          /** When the subscription schedule starts. We recommend using `now` so that it starts the subscription immediately. You can also use a Unix timestamp to backdate the subscription so that it starts on a past date, or set a future date for the subscription to start on. */
          start_date?: Partial<number> & Partial<"now">;
        };
      };
    };
  };
  /** <p>Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.</p> */
  GetSubscriptionSchedulesSchedule: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        schedule: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["subscription_schedule"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Updates an existing subscription schedule.</p> */
  PostSubscriptionSchedulesSchedule: {
    parameters: {
      path: {
        schedule: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["subscription_schedule"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Object representing the subscription schedule's default settings. */
          default_settings?: {
            billing_thresholds?: Partial<{
              amount_gte?: number;
              reset_billing_cycle_anchor?: boolean;
            }> &
              Partial<"">;
            collection_method?: "charge_automatically" | "send_invoice";
            default_payment_method?: string;
            invoice_settings?: {
              days_until_due?: number;
            };
          };
          /** Configures how the subscription schedule behaves when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running.`cancel` will end the subscription schedule and cancel the underlying subscription. */
          end_behavior?: "cancel" | "none" | "release" | "renew";
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase. Note that past phases can be omitted. */
          phases?: {
            application_fee_percent?: number;
            billing_thresholds?: Partial<{
              amount_gte?: number;
              reset_billing_cycle_anchor?: boolean;
            }> &
              Partial<"">;
            collection_method?: "charge_automatically" | "send_invoice";
            coupon?: string;
            default_payment_method?: string;
            default_tax_rates?: Partial<string[]> & Partial<"">;
            end_date?: Partial<number> & Partial<"now">;
            invoice_settings?: {
              days_until_due?: number;
            };
            iterations?: number;
            plans: {
              billing_thresholds?: Partial<{
                usage_gte: number;
              }> &
                Partial<"">;
              plan?: string;
              quantity?: number;
              tax_rates?: Partial<string[]> & Partial<"">;
            }[];
            proration_behavior?: "always_invoice" | "create_prorations" | "none";
            start_date?: Partial<number> & Partial<"now">;
            tax_percent?: number;
            trial?: boolean;
            trial_end?: Partial<number> & Partial<"now">;
          }[];
          /** This field has been renamed to `proration_behavior`. `prorate=true` can be replaced with `proration_behavior=create_prorations` and `prorate=false` can be replaced with `proration_behavior=none`. */
          prorate?: boolean;
          /** If the update changes the current phase, indicates if the changes should be prorated. Valid values are `create_prorations` or `none`, and the default value is `create_prorations`. */
          proration_behavior?: "always_invoice" | "create_prorations" | "none";
        };
      };
    };
  };
  /** <p>Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is <code>not_started</code> or <code>active</code>.</p> */
  PostSubscriptionSchedulesScheduleCancel: {
    parameters: {
      path: {
        schedule: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["subscription_schedule"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** If the subscription schedule is `active`, indicates whether or not to generate a final invoice that contains any un-invoiced metered usage and new/pending proration invoice items. Defaults to `true`. */
          invoice_now?: boolean;
          /** If the subscription schedule is `active`, indicates if the cancellation should be prorated. Defaults to `true`. */
          prorate?: boolean;
        };
      };
    };
  };
  /** <p>Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is <code>not_started</code> or <code>active</code>. If the subscription schedule is currently associated with a subscription, releasing it will remove its <code>subscription</code> property and set the subscription’s ID to the <code>released_subscription</code> property.</p> */
  PostSubscriptionSchedulesScheduleRelease: {
    parameters: {
      path: {
        schedule: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["subscription_schedule"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Keep any cancellation on the subscription that the schedule has set */
          preserve_cancel_date?: boolean;
        };
      };
    };
  };
  /** <p>By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify <code>status=canceled</code>.</p> */
  GetSubscriptions: {
    parameters: {
      query: {
        /** The collection method of the subscriptions to retrieve. Either `charge_automatically` or `send_invoice`. */
        collection_method?: "charge_automatically" | "send_invoice";
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        current_period_end?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        current_period_start?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** The ID of the customer whose subscriptions will be retrieved. */
        customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** The ID of the plan whose subscriptions will be retrieved. */
        plan?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
        /** The status of the subscriptions to retrieve. One of: `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `unpaid`, `canceled`, or `all`. Passing in a value of `canceled` will return all canceled subscriptions, including those belonging to deleted customers. Passing in a value of `all` will return subscriptions of all statuses. */
        status?:
          | "active"
          | "all"
          | "canceled"
          | "ended"
          | "incomplete"
          | "incomplete_expired"
          | "past_due"
          | "trialing"
          | "unpaid";
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["subscription"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Creates a new subscription on an existing customer. Each customer can have up to 25 active or scheduled subscriptions.</p> */
  PostSubscriptions: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["subscription"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions). */
          application_fee_percent?: number;
          /** For new subscriptions, a past timestamp to backdate the subscription's start date to. If set, the first invoice will contain a proration for the timespan between the start date and the current time. Can be combined with trials and the billing cycle anchor. */
          backdate_start_date?: number;
          /** A future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. */
          billing_cycle_anchor?: number;
          /** Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds. */
          billing_thresholds?: Partial<{
            amount_gte?: number;
            reset_billing_cycle_anchor?: boolean;
          }> &
            Partial<"">;
          /** A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period. */
          cancel_at?: number;
          /** Boolean indicating whether this subscription should cancel at the end of the current period. */
          cancel_at_period_end?: boolean;
          /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`. */
          collection_method?: "charge_automatically" | "send_invoice";
          /** The code of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription. */
          coupon?: string;
          /** The identifier of the customer to subscribe. */
          customer: string;
          /** Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`. */
          days_until_due?: number;
          /** ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. If not set, invoices will use the default payment method in the customer's invoice settings. */
          default_payment_method?: string;
          /** ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If not set, defaults to the customer's default source. */
          default_source?: string;
          /** The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. */
          default_tax_rates?: Partial<string[]> & Partial<"">;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** A list of up to 20 subscription items, each with an attached plan. */
          items?: {
            billing_thresholds?: Partial<{
              usage_gte: number;
            }> &
              Partial<"">;
            metadata?: { [key: string]: string };
            plan?: string;
            quantity?: number;
            tax_rates?: Partial<string[]> & Partial<"">;
          }[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** Indicates if a customer is on or off-session while an invoice payment is attempted. */
          off_session?: boolean;
          /**
           * Use `allow_incomplete` to create subscriptions with `status=incomplete` if the first invoice cannot be paid. Creating subscriptions with this status allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
           *
           * Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's first invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not create a subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
           *
           * `pending_if_incomplete` is only used with updates and cannot be passed when creating a subscription.
           */
          payment_behavior?: "allow_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
          /** Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval. */
          pending_invoice_item_interval?: Partial<{
            interval: "day" | "month" | "week" | "year";
            interval_count?: number;
          }> &
            Partial<"">;
          /** This field has been renamed to `proration_behavior`. `prorate=true` can be replaced with `proration_behavior=create_prorations` and `prorate=false` can be replaced with `proration_behavior=none`. */
          prorate?: boolean;
          /**
           * Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) resulting from the `billing_cycle_anchor`. Valid values are `create_prorations` or `none`.
           *
           * Passing `create_prorations` will cause proration invoice items to be created when applicable. Prorations can be disabled by passing `none`. If no value is passed, the default is `create_prorations`.
           */
          proration_behavior?: "always_invoice" | "create_prorations" | "none";
          /** A non-negative decimal (with at most four decimal places) between 0 and 100. This represents the percentage of the subscription invoice subtotal that will be calculated and added as tax to the final amount in each billing period. For example, a plan which charges $10/month with a `tax_percent` of `20.0` will charge $12 per invoice. To unset a previously-set value, pass an empty string. This field has been deprecated and will be removed in a future API version, for further information view the [migration docs](https://stripe.com/docs/billing/migration/taxes) for `tax_rates`. */
          tax_percent?: Partial<number> & Partial<"">;
          /** Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`. */
          trial_end?: Partial<"now"> & Partial<number>;
          /** Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. */
          trial_from_plan?: boolean;
          /** Integer representing the number of trial period days before the customer is charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. */
          trial_period_days?: number;
        };
      };
    };
  };
  /** <p>Retrieves the subscription with the given ID.</p> */
  GetSubscriptionsSubscriptionExposedId: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        subscription_exposed_id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["subscription"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href="#upcoming_invoice">upcoming invoice</a> endpoint.</p> */
  PostSubscriptionsSubscriptionExposedId: {
    parameters: {
      path: {
        subscription_exposed_id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["subscription"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions). */
          application_fee_percent?: number;
          /** Either `now` or `unchanged`. Setting the value to `now` resets the subscription's billing cycle anchor to the current time. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle). */
          billing_cycle_anchor?: "now" | "unchanged";
          /** Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds. */
          billing_thresholds?: Partial<{
            amount_gte?: number;
            reset_billing_cycle_anchor?: boolean;
          }> &
            Partial<"">;
          /** A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period. */
          cancel_at?: Partial<number> & Partial<"">;
          /** Boolean indicating whether this subscription should cancel at the end of the current period. */
          cancel_at_period_end?: boolean;
          /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`. */
          collection_method?: "charge_automatically" | "send_invoice";
          /** The code of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription. */
          coupon?: string;
          /** Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`. */
          days_until_due?: number;
          /** ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. If not set, invoices will use the default payment method in the customer's invoice settings. */
          default_payment_method?: string;
          /** ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If not set, defaults to the customer's default source. */
          default_source?: string;
          /** The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. Pass an empty string to remove previously-defined tax rates. */
          default_tax_rates?: Partial<string[]> & Partial<"">;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** List of subscription items, each with an attached plan. */
          items?: {
            billing_thresholds?: Partial<{
              usage_gte: number;
            }> &
              Partial<"">;
            clear_usage?: boolean;
            deleted?: boolean;
            id?: string;
            metadata?: Partial<{ [key: string]: string }> & Partial<"">;
            plan?: string;
            quantity?: number;
            tax_rates?: Partial<string[]> & Partial<"">;
          }[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** Indicates if a customer is on or off-session while an invoice payment is attempted. */
          off_session?: boolean;
          /** If specified, payment collection for this subscription will be paused. */
          pause_collection?: Partial<{
            behavior: "keep_as_draft" | "mark_uncollectible" | "void";
            resumes_at?: number;
          }> &
            Partial<"">;
          /**
           * Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
           *
           * Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).
           *
           * Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's first invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not create a subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
           */
          payment_behavior?: "allow_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
          /** Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval. */
          pending_invoice_item_interval?: Partial<{
            interval: "day" | "month" | "week" | "year";
            interval_count?: number;
          }> &
            Partial<"">;
          /** This field has been renamed to `proration_behavior`. `prorate=true` can be replaced with `proration_behavior=create_prorations` and `prorate=false` can be replaced with `proration_behavior=none`. */
          prorate?: boolean;
          /**
           * Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. Valid values are `create_prorations`, `none`, or `always_invoice`.
           *
           * Passing `create_prorations` will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://stripe.com/docs/subscriptions/upgrading-downgrading#immediate-payment). In order to always invoice immediately for prorations, pass `always_invoice`.
           *
           * Prorations can be disabled by passing `none`.
           */
          proration_behavior?: "always_invoice" | "create_prorations" | "none";
          /** If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply exactly the same proration that was previewed with [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint. It can also be used to implement custom proration logic, such as prorating by day instead of by second, by providing the time that you wish to use for proration calculations. */
          proration_date?: number;
          /** A non-negative decimal (with at most four decimal places) between 0 and 100. This represents the percentage of the subscription invoice subtotal that will be calculated and added as tax to the final amount in each billing period. For example, a plan which charges $10/month with a `tax_percent` of `20.0` will charge $12 per invoice. To unset a previously-set value, pass an empty string. This field has been deprecated and will be removed in a future API version, for further information view the [migration docs](https://stripe.com/docs/billing/migration/taxes) for `tax_rates`. */
          tax_percent?: Partial<number> & Partial<"">;
          /** Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`. */
          trial_end?: Partial<"now"> & Partial<number>;
          /** Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. */
          trial_from_plan?: boolean;
        };
      };
    };
  };
  /**
   * <p>Cancels a customer’s subscription immediately. The customer will not be charged again for the subscription.</p>
   *
   * <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>
   *
   * <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
   */
  DeleteSubscriptionsSubscriptionExposedId: {
    parameters: {
      path: {
        subscription_exposed_id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["subscription"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Will generate a final invoice that invoices for any un-invoiced metered usage and new/pending proration invoice items. */
          invoice_now?: boolean;
          /** Will generate a proration invoice item that credits remaining unused time until the subscription period end. */
          prorate?: boolean;
        };
      };
    };
  };
  /** <p>Removes the currently applied discount on a subscription.</p> */
  DeleteSubscriptionsSubscriptionExposedIdDiscount: {
    parameters: {
      path: {
        subscription_exposed_id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["deleted_discount"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.</p> */
  GetTaxRates: {
    parameters: {
      query: {
        /** Optional flag to filter by tax rates that are either active or not active (archived) */
        active?: boolean;
        /** Optional range for filtering created date */
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** Optional flag to filter by tax rates that are inclusive (or those that are not inclusive) */
        inclusive?: boolean;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["tax_rate"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Creates a new tax rate.</p> */
  PostTaxRates: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["tax_rate"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Flag determining whether the tax rate is active or inactive. Inactive tax rates continue to work where they are currently applied however they cannot be used for new applications. */
          active?: boolean;
          /** An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers. */
          description?: string;
          /** The display name of the tax rate, which will be shown to users. */
          display_name: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** This specifies if the tax rate is inclusive or exclusive. */
          inclusive: boolean;
          /** The jurisdiction for the tax rate. */
          jurisdiction?: string;
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: { [key: string]: string };
          /** This represents the tax rate percent out of 100. */
          percentage: number;
        };
      };
    };
  };
  /** <p>Retrieves a tax rate with the given ID</p> */
  GetTaxRatesTaxRate: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        tax_rate: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["tax_rate"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Updates an existing tax rate.</p> */
  PostTaxRatesTaxRate: {
    parameters: {
      path: {
        tax_rate: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["tax_rate"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Flag determining whether the tax rate is active or inactive. Inactive tax rates continue to work where they are currently applied however they cannot be used for new applications. */
          active?: boolean;
          /** An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers. */
          description?: string;
          /** The display name of the tax rate, which will be shown to users. */
          display_name?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** The jurisdiction for the tax rate. */
          jurisdiction?: string;
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
        };
      };
    };
  };
  /** <p>To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.</p> */
  PostTerminalConnectionTokens: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["terminal.connection_token"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** The id of the location that this connection token is scoped to. If specified the connection token will only be usable with readers assigned to that location, otherwise the connection token will be usable with all readers. */
          location?: string;
        };
      };
    };
  };
  /** <p>Returns a list of <code>Location</code> objects.</p> */
  GetTerminalLocations: {
    parameters: {
      query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["terminal.location"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Creates a new <code>Location</code> object.</p> */
  PostTerminalLocations: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["terminal.location"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The full address of the location. */
          address: {
            city?: string;
            country: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          /** A name for the location. */
          display_name: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
        };
      };
    };
  };
  /** <p>Retrieves a <code>Location</code> object.</p> */
  GetTerminalLocationsLocation: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        location: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["terminal.location"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Updates a <code>Location</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
  PostTerminalLocationsLocation: {
    parameters: {
      path: {
        location: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["terminal.location"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** The full address of the location. */
          address?: {
            city?: string;
            country: string;
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
          };
          /** A name for the location. */
          display_name?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
        };
      };
    };
  };
  /** <p>Deletes a <code>Location</code> object.</p> */
  DeleteTerminalLocationsLocation: {
    parameters: {
      path: {
        location: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["deleted_terminal.location"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Returns a list of <code>Reader</code> objects.</p> */
  GetTerminalReaders: {
    parameters: {
      query: {
        /** Filters readers by device type */
        device_type?: "bbpos_chipper2x" | "verifone_P400";
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A location ID to filter the response list to only readers at the specific location */
        location?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
        /** A status filter to filter readers to only offline or online readers */
        status?: "offline" | "online";
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            /** A list of readers */
            data: components["schemas"]["terminal.reader"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Creates a new <code>Reader</code> object.</p> */
  PostTerminalReaders: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["terminal.reader"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Custom label given to the reader for easier identification. If no label is specified, the registration code will be used. */
          label?: string;
          /** The location to assign the reader to. If no location is specified, the reader will be assigned to the account's default location. */
          location?: string;
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** A code generated by the reader used for registering to an account. */
          registration_code: string;
        };
      };
    };
  };
  /** <p>Retrieves a <code>Reader</code> object.</p> */
  GetTerminalReadersReader: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        reader: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["terminal.reader"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Updates a <code>Reader</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
  PostTerminalReadersReader: {
    parameters: {
      path: {
        reader: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["terminal.reader"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** The new label of the reader. */
          label?: string;
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
        };
      };
    };
  };
  /** <p>Deletes a <code>Reader</code> object.</p> */
  DeleteTerminalReadersReader: {
    parameters: {
      path: {
        reader: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["deleted_terminal.reader"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>Creates a single-use token that represents a bank account’s details.
   * This token can be used with any API method in place of a bank account dictionary. This token can be used only once, by attaching it to a <a href="#accounts">Custom account</a>.</p>
   */
  PostTokens: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["token"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Information for the account this token will represent. */
          account?: {
            business_type?: "company" | "government_entity" | "individual" | "non_profit";
            company?: {
              address?: {
                city?: string;
                country?: string;
                line1?: string;
                line2?: string;
                postal_code?: string;
                state?: string;
              };
              address_kana?: {
                city?: string;
                country?: string;
                line1?: string;
                line2?: string;
                postal_code?: string;
                state?: string;
                town?: string;
              };
              address_kanji?: {
                city?: string;
                country?: string;
                line1?: string;
                line2?: string;
                postal_code?: string;
                state?: string;
                town?: string;
              };
              directors_provided?: boolean;
              executives_provided?: boolean;
              name?: string;
              name_kana?: string;
              name_kanji?: string;
              owners_provided?: boolean;
              phone?: string;
              structure?:
                | ""
                | "government_instrumentality"
                | "governmental_unit"
                | "incorporated_non_profit"
                | "limited_liability_partnership"
                | "multi_member_llc"
                | "private_company"
                | "private_corporation"
                | "private_partnership"
                | "public_company"
                | "public_corporation"
                | "public_partnership"
                | "sole_proprietorship"
                | "tax_exempt_government_instrumentality"
                | "unincorporated_association"
                | "unincorporated_non_profit";
              tax_id?: string;
              tax_id_registrar?: string;
              vat_id?: string;
              verification?: {
                document?: {
                  back?: string;
                  front?: string;
                };
              };
            };
            individual?: {
              address?: {
                city?: string;
                country?: string;
                line1?: string;
                line2?: string;
                postal_code?: string;
                state?: string;
              };
              address_kana?: {
                city?: string;
                country?: string;
                line1?: string;
                line2?: string;
                postal_code?: string;
                state?: string;
                town?: string;
              };
              address_kanji?: {
                city?: string;
                country?: string;
                line1?: string;
                line2?: string;
                postal_code?: string;
                state?: string;
                town?: string;
              };
              dob?: Partial<{
                day: number;
                month: number;
                year: number;
              }> &
                Partial<"">;
              email?: string;
              first_name?: string;
              first_name_kana?: string;
              first_name_kanji?: string;
              gender?: string;
              id_number?: string;
              last_name?: string;
              last_name_kana?: string;
              last_name_kanji?: string;
              maiden_name?: string;
              metadata?: Partial<{ [key: string]: string }> & Partial<"">;
              phone?: string;
              ssn_last_4?: string;
              verification?: {
                additional_document?: {
                  back?: string;
                  front?: string;
                };
                document?: {
                  back?: string;
                  front?: string;
                };
              };
            };
            tos_shown_and_accepted?: boolean;
          };
          /** The bank account this token will represent. */
          bank_account?: {
            account_holder_name?: string;
            account_holder_type?: "company" | "individual";
            account_number: string;
            country: string;
            currency?: string;
            routing_number?: string;
          };
          card?: Partial<{
            address_city?: string;
            address_country?: string;
            address_line1?: string;
            address_line2?: string;
            address_state?: string;
            address_zip?: string;
            currency?: string;
            cvc?: string;
            exp_month: string;
            exp_year: string;
            name?: string;
            number: string;
          }> &
            Partial<string>;
          /** The customer (owned by the application's account) for which to create a token. This can be used only with an [OAuth access token](https://stripe.com/docs/connect/standard-accounts) or [Stripe-Account header](https://stripe.com/docs/connect/authentication). For more details, see [Cloning Saved Payment Methods](https://stripe.com/docs/connect/cloning-saved-payment-methods). */
          customer?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Information for the person this token will represent. */
          person?: {
            address?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
            };
            address_kana?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
              town?: string;
            };
            address_kanji?: {
              city?: string;
              country?: string;
              line1?: string;
              line2?: string;
              postal_code?: string;
              state?: string;
              town?: string;
            };
            dob?: Partial<{
              day: number;
              month: number;
              year: number;
            }> &
              Partial<"">;
            email?: string;
            first_name?: string;
            first_name_kana?: string;
            first_name_kanji?: string;
            gender?: string;
            id_number?: string;
            last_name?: string;
            last_name_kana?: string;
            last_name_kanji?: string;
            maiden_name?: string;
            metadata?: Partial<{ [key: string]: string }> & Partial<"">;
            phone?: string;
            relationship?: {
              director?: boolean;
              executive?: boolean;
              owner?: boolean;
              percent_ownership?: Partial<number> & Partial<"">;
              representative?: boolean;
              title?: string;
            };
            ssn_last_4?: string;
            verification?: {
              additional_document?: {
                back?: string;
                front?: string;
              };
              document?: {
                back?: string;
                front?: string;
              };
            };
          };
          /** The PII this token will represent. */
          pii?: {
            id_number?: string;
          };
        };
      };
    };
  };
  /** <p>Retrieves the token with the given ID.</p> */
  GetTokensToken: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        token: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["token"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Returns a list of top-ups.</p> */
  GetTopups: {
    parameters: {
      query: {
        /** A positive integer representing how much to transfer. */
        amount?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
        /** Only return top-ups that have the given status. One of `canceled`, `failed`, `pending` or `succeeded`. */
        status?: "canceled" | "failed" | "pending" | "succeeded";
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["topup"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Top up the balance of an account</p> */
  PostTopups: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["topup"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** A positive integer representing how much to transfer. */
          amount: number;
          /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          currency: string;
          /** An arbitrary string attached to the object. Often useful for displaying to users. */
          description?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** The ID of a source to transfer funds from. For most users, this should be left unspecified which will use the bank account that was set up in the dashboard for the specified currency. In test mode, this can be a test bank token (see [Testing Top-ups](https://stripe.com/docs/connect/testing#testing-top-ups)). */
          source?: string;
          /** Extra information about a top-up for the source's bank statement. Limited to 15 ASCII characters. */
          statement_descriptor?: string;
          /** A string that identifies this top-up as part of a group. */
          transfer_group?: string;
        };
      };
    };
  };
  /** <p>Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.</p> */
  GetTopupsTopup: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        topup: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["topup"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Updates the metadata of a top-up. Other top-up details are not editable by design.</p> */
  PostTopupsTopup: {
    parameters: {
      path: {
        topup: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["topup"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** An arbitrary string attached to the object. Often useful for displaying to users. */
          description?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
        };
      };
    };
  };
  /** <p>Cancels a top-up. Only pending top-ups can be canceled.</p> */
  PostTopupsTopupCancel: {
    parameters: {
      path: {
        topup: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["topup"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
        };
      };
    };
  };
  /** <p>Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.</p> */
  GetTransfers: {
    parameters: {
      query: {
        created?: Partial<{
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }> &
          Partial<number>;
        /** Only return transfers for the destination specified by this account ID. */
        destination?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
        /** Only return transfers with the specified transfer group. */
        transfer_group?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            /** Details about each object. */
            data: components["schemas"]["transfer"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>To send funds from your Stripe account to a connected account, you create a new transfer object. Your <a href="#balance">Stripe balance</a> must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds” error.</p> */
  PostTransfers: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["transfer"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** A positive integer in %s representing how much to transfer. */
          amount?: number;
          /** 3-letter [ISO code for currency](https://stripe.com/docs/payouts). */
          currency: string;
          /** An arbitrary string attached to the object. Often useful for displaying to users. */
          description?: string;
          /** The ID of a connected Stripe account. <a href="/docs/connect/charges-transfers">See the Connect documentation</a> for details. */
          destination: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: { [key: string]: string };
          /** You can use this parameter to transfer funds from a charge before they are added to your available balance. A pending balance will transfer immediately but the funds will not become available until the original charge becomes available. [See the Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-availability) for details. */
          source_transaction?: string;
          /** The source balance to use for this transfer. One of `bank_account`, `card`, or `fpx`. For most users, this will default to `card`. */
          source_type?: "bank_account" | "card" | "fpx";
          /** A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details. */
          transfer_group?: string;
        };
      };
    };
  };
  /** <p>You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional reversals.</p> */
  GetTransfersIdReversals: {
    parameters: {
      query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            /** Details about each object. */
            data: components["schemas"]["transfer_reversal"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>When you create a new reversal, you must specify a transfer to create it on.</p>
   *
   * <p>When reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.</p>
   *
   * <p>Once entirely reversed, a transfer can’t be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.</p>
   */
  PostTransfersIdReversals: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["transfer_reversal"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** A positive integer in %s representing how much of this transfer to reverse. Can only reverse up to the unreversed amount remaining of the transfer. Partial transfer reversals are only allowed for transfers to Stripe Accounts. Defaults to the entire transfer amount. */
          amount?: number;
          /** An arbitrary string which you can attach to a reversal object. It is displayed alongside the reversal in the Dashboard. This will be unset if you POST an empty value. */
          description?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** Boolean indicating whether the application fee should be refunded when reversing this transfer. If a full transfer reversal is given, the full application fee will be refunded. Otherwise, the application fee will be refunded with an amount proportional to the amount of the transfer reversed. */
          refund_application_fee?: boolean;
        };
      };
    };
  };
  /** <p>Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.</p> */
  GetTransfersTransfer: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        transfer: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["transfer"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * <p>This request accepts only metadata as an argument.</p>
   */
  PostTransfersTransfer: {
    parameters: {
      path: {
        transfer: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["transfer"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** An arbitrary string attached to the object. Often useful for displaying to users. */
          description?: string;
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
        };
      };
    };
  };
  /** <p>By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.</p> */
  GetTransfersTransferReversalsId: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        id: string;
        transfer: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["transfer_reversal"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /**
   * <p>Updates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * <p>This request only accepts metadata and description as arguments.</p>
   */
  PostTransfersTransferReversalsId: {
    parameters: {
      path: {
        id: string;
        transfer: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["transfer_reversal"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
        };
      };
    };
  };
  /** <p>Returns a list of your webhook endpoints.</p> */
  GetWebhookEndpoints: {
    parameters: {
      query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        starting_after?: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": {
            data: components["schemas"]["webhook_endpoint"][];
            /** True if this list has another page of items after this one that can be fetched. */
            has_more: boolean;
            /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
            object: "list";
            /** The URL where this list can be accessed. */
            url: string;
          };
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>A webhook endpoint must have a <code>url</code> and a list of <code>enabled_events</code>. You may optionally specify the Boolean <code>connect</code> parameter. If set to true, then a Connect webhook endpoint that notifies the specified <code>url</code> about events from all connected accounts is created; otherwise an account webhook endpoint that notifies the specified <code>url</code> only about events from your account is created. You can also create webhook endpoints in the <a href="https://dashboard.stripe.com/account/webhooks">webhooks settings</a> section of the Dashboard.</p> */
  PostWebhookEndpoints: {
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["webhook_endpoint"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** Events sent to this endpoint will be generated with this Stripe Version instead of your account's default Stripe Version. */
          api_version?:
            | "2011-01-01"
            | "2011-06-21"
            | "2011-06-28"
            | "2011-08-01"
            | "2011-09-15"
            | "2011-11-17"
            | "2012-02-23"
            | "2012-03-25"
            | "2012-06-18"
            | "2012-06-28"
            | "2012-07-09"
            | "2012-09-24"
            | "2012-10-26"
            | "2012-11-07"
            | "2013-02-11"
            | "2013-02-13"
            | "2013-07-05"
            | "2013-08-12"
            | "2013-08-13"
            | "2013-10-29"
            | "2013-12-03"
            | "2014-01-31"
            | "2014-03-13"
            | "2014-03-28"
            | "2014-05-19"
            | "2014-06-13"
            | "2014-06-17"
            | "2014-07-22"
            | "2014-07-26"
            | "2014-08-04"
            | "2014-08-20"
            | "2014-09-08"
            | "2014-10-07"
            | "2014-11-05"
            | "2014-11-20"
            | "2014-12-08"
            | "2014-12-17"
            | "2014-12-22"
            | "2015-01-11"
            | "2015-01-26"
            | "2015-02-10"
            | "2015-02-16"
            | "2015-02-18"
            | "2015-03-24"
            | "2015-04-07"
            | "2015-06-15"
            | "2015-07-07"
            | "2015-07-13"
            | "2015-07-28"
            | "2015-08-07"
            | "2015-08-19"
            | "2015-09-03"
            | "2015-09-08"
            | "2015-09-23"
            | "2015-10-01"
            | "2015-10-12"
            | "2015-10-16"
            | "2016-02-03"
            | "2016-02-19"
            | "2016-02-22"
            | "2016-02-23"
            | "2016-02-29"
            | "2016-03-07"
            | "2016-06-15"
            | "2016-07-06"
            | "2016-10-19"
            | "2017-01-27"
            | "2017-02-14"
            | "2017-04-06"
            | "2017-05-25"
            | "2017-06-05"
            | "2017-08-15"
            | "2017-12-14"
            | "2018-01-23"
            | "2018-02-05"
            | "2018-02-06"
            | "2018-02-28"
            | "2018-05-21"
            | "2018-07-27"
            | "2018-08-23"
            | "2018-09-06"
            | "2018-09-24"
            | "2018-10-31"
            | "2018-11-08"
            | "2019-02-11"
            | "2019-02-19"
            | "2019-03-14"
            | "2019-05-16"
            | "2019-08-14"
            | "2019-09-09"
            | "2019-10-08"
            | "2019-10-17"
            | "2019-11-05"
            | "2019-12-03"
            | "2020-03-02";
          /** Whether this endpoint should receive events from connected accounts (`true`), or from your account (`false`). Defaults to `false`. */
          connect?: boolean;
          /** An optional description of what the wehbook is used for. */
          description?: string;
          /** The list of events to enable for this endpoint. You may specify `['*']` to enable all events, except those that require explicit selection. */
          enabled_events: (
            | "*"
            | "account.application.authorized"
            | "account.application.deauthorized"
            | "account.external_account.created"
            | "account.external_account.deleted"
            | "account.external_account.updated"
            | "account.updated"
            | "application_fee.created"
            | "application_fee.refund.updated"
            | "application_fee.refunded"
            | "balance.available"
            | "capability.updated"
            | "charge.captured"
            | "charge.dispute.closed"
            | "charge.dispute.created"
            | "charge.dispute.funds_reinstated"
            | "charge.dispute.funds_withdrawn"
            | "charge.dispute.updated"
            | "charge.expired"
            | "charge.failed"
            | "charge.pending"
            | "charge.refund.updated"
            | "charge.refunded"
            | "charge.succeeded"
            | "charge.updated"
            | "checkout.session.completed"
            | "coupon.created"
            | "coupon.deleted"
            | "coupon.updated"
            | "credit_note.created"
            | "credit_note.updated"
            | "credit_note.voided"
            | "customer.created"
            | "customer.deleted"
            | "customer.discount.created"
            | "customer.discount.deleted"
            | "customer.discount.updated"
            | "customer.source.created"
            | "customer.source.deleted"
            | "customer.source.expiring"
            | "customer.source.updated"
            | "customer.subscription.created"
            | "customer.subscription.deleted"
            | "customer.subscription.pending_update_applied"
            | "customer.subscription.pending_update_expired"
            | "customer.subscription.trial_will_end"
            | "customer.subscription.updated"
            | "customer.tax_id.created"
            | "customer.tax_id.deleted"
            | "customer.tax_id.updated"
            | "customer.updated"
            | "file.created"
            | "invoice.created"
            | "invoice.deleted"
            | "invoice.finalized"
            | "invoice.marked_uncollectible"
            | "invoice.payment_action_required"
            | "invoice.payment_failed"
            | "invoice.payment_succeeded"
            | "invoice.sent"
            | "invoice.upcoming"
            | "invoice.updated"
            | "invoice.voided"
            | "invoiceitem.created"
            | "invoiceitem.deleted"
            | "invoiceitem.updated"
            | "issuing_authorization.created"
            | "issuing_authorization.request"
            | "issuing_authorization.updated"
            | "issuing_card.created"
            | "issuing_card.updated"
            | "issuing_cardholder.created"
            | "issuing_cardholder.updated"
            | "issuing_transaction.created"
            | "issuing_transaction.updated"
            | "mandate.updated"
            | "order.created"
            | "order.payment_failed"
            | "order.payment_succeeded"
            | "order.updated"
            | "order_return.created"
            | "payment_intent.amount_capturable_updated"
            | "payment_intent.canceled"
            | "payment_intent.created"
            | "payment_intent.payment_failed"
            | "payment_intent.processing"
            | "payment_intent.succeeded"
            | "payment_method.attached"
            | "payment_method.card_automatically_updated"
            | "payment_method.detached"
            | "payment_method.updated"
            | "payout.canceled"
            | "payout.created"
            | "payout.failed"
            | "payout.paid"
            | "payout.updated"
            | "person.created"
            | "person.deleted"
            | "person.updated"
            | "plan.created"
            | "plan.deleted"
            | "plan.updated"
            | "product.created"
            | "product.deleted"
            | "product.updated"
            | "radar.early_fraud_warning.created"
            | "radar.early_fraud_warning.updated"
            | "recipient.created"
            | "recipient.deleted"
            | "recipient.updated"
            | "reporting.report_run.failed"
            | "reporting.report_run.succeeded"
            | "reporting.report_type.updated"
            | "review.closed"
            | "review.opened"
            | "setup_intent.canceled"
            | "setup_intent.created"
            | "setup_intent.setup_failed"
            | "setup_intent.succeeded"
            | "sigma.scheduled_query_run.created"
            | "sku.created"
            | "sku.deleted"
            | "sku.updated"
            | "source.canceled"
            | "source.chargeable"
            | "source.failed"
            | "source.mandate_notification"
            | "source.refund_attributes_required"
            | "source.transaction.created"
            | "source.transaction.updated"
            | "subscription_schedule.aborted"
            | "subscription_schedule.canceled"
            | "subscription_schedule.completed"
            | "subscription_schedule.created"
            | "subscription_schedule.expiring"
            | "subscription_schedule.released"
            | "subscription_schedule.updated"
            | "tax_rate.created"
            | "tax_rate.updated"
            | "topup.canceled"
            | "topup.created"
            | "topup.failed"
            | "topup.reversed"
            | "topup.succeeded"
            | "transfer.created"
            | "transfer.failed"
            | "transfer.paid"
            | "transfer.reversed"
            | "transfer.updated"
          )[];
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** The URL of the webhook endpoint. */
          url: string;
        };
      };
    };
  };
  /** <p>Retrieves the webhook endpoint with the given ID.</p> */
  GetWebhookEndpointsWebhookEndpoint: {
    parameters: {
      query: {
        /** Specifies which fields in the response should be expanded. */
        expand?: string[];
      };
      path: {
        webhook_endpoint: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["webhook_endpoint"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
  /** <p>Updates the webhook endpoint. You may edit the <code>url</code>, the list of <code>enabled_events</code>, and the status of your endpoint.</p> */
  PostWebhookEndpointsWebhookEndpoint: {
    parameters: {
      path: {
        webhook_endpoint: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["webhook_endpoint"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** An optional description of what the wehbook is used for. */
          description?: string;
          /** Disable the webhook endpoint if set to true. */
          disabled?: boolean;
          /** The list of events to enable for this endpoint. You may specify `['*']` to enable all events, except those that require explicit selection. */
          enabled_events?: (
            | "*"
            | "account.application.authorized"
            | "account.application.deauthorized"
            | "account.external_account.created"
            | "account.external_account.deleted"
            | "account.external_account.updated"
            | "account.updated"
            | "application_fee.created"
            | "application_fee.refund.updated"
            | "application_fee.refunded"
            | "balance.available"
            | "capability.updated"
            | "charge.captured"
            | "charge.dispute.closed"
            | "charge.dispute.created"
            | "charge.dispute.funds_reinstated"
            | "charge.dispute.funds_withdrawn"
            | "charge.dispute.updated"
            | "charge.expired"
            | "charge.failed"
            | "charge.pending"
            | "charge.refund.updated"
            | "charge.refunded"
            | "charge.succeeded"
            | "charge.updated"
            | "checkout.session.completed"
            | "coupon.created"
            | "coupon.deleted"
            | "coupon.updated"
            | "credit_note.created"
            | "credit_note.updated"
            | "credit_note.voided"
            | "customer.created"
            | "customer.deleted"
            | "customer.discount.created"
            | "customer.discount.deleted"
            | "customer.discount.updated"
            | "customer.source.created"
            | "customer.source.deleted"
            | "customer.source.expiring"
            | "customer.source.updated"
            | "customer.subscription.created"
            | "customer.subscription.deleted"
            | "customer.subscription.pending_update_applied"
            | "customer.subscription.pending_update_expired"
            | "customer.subscription.trial_will_end"
            | "customer.subscription.updated"
            | "customer.tax_id.created"
            | "customer.tax_id.deleted"
            | "customer.tax_id.updated"
            | "customer.updated"
            | "file.created"
            | "invoice.created"
            | "invoice.deleted"
            | "invoice.finalized"
            | "invoice.marked_uncollectible"
            | "invoice.payment_action_required"
            | "invoice.payment_failed"
            | "invoice.payment_succeeded"
            | "invoice.sent"
            | "invoice.upcoming"
            | "invoice.updated"
            | "invoice.voided"
            | "invoiceitem.created"
            | "invoiceitem.deleted"
            | "invoiceitem.updated"
            | "issuing_authorization.created"
            | "issuing_authorization.request"
            | "issuing_authorization.updated"
            | "issuing_card.created"
            | "issuing_card.updated"
            | "issuing_cardholder.created"
            | "issuing_cardholder.updated"
            | "issuing_transaction.created"
            | "issuing_transaction.updated"
            | "mandate.updated"
            | "order.created"
            | "order.payment_failed"
            | "order.payment_succeeded"
            | "order.updated"
            | "order_return.created"
            | "payment_intent.amount_capturable_updated"
            | "payment_intent.canceled"
            | "payment_intent.created"
            | "payment_intent.payment_failed"
            | "payment_intent.processing"
            | "payment_intent.succeeded"
            | "payment_method.attached"
            | "payment_method.card_automatically_updated"
            | "payment_method.detached"
            | "payment_method.updated"
            | "payout.canceled"
            | "payout.created"
            | "payout.failed"
            | "payout.paid"
            | "payout.updated"
            | "person.created"
            | "person.deleted"
            | "person.updated"
            | "plan.created"
            | "plan.deleted"
            | "plan.updated"
            | "product.created"
            | "product.deleted"
            | "product.updated"
            | "radar.early_fraud_warning.created"
            | "radar.early_fraud_warning.updated"
            | "recipient.created"
            | "recipient.deleted"
            | "recipient.updated"
            | "reporting.report_run.failed"
            | "reporting.report_run.succeeded"
            | "reporting.report_type.updated"
            | "review.closed"
            | "review.opened"
            | "setup_intent.canceled"
            | "setup_intent.created"
            | "setup_intent.setup_failed"
            | "setup_intent.succeeded"
            | "sigma.scheduled_query_run.created"
            | "sku.created"
            | "sku.deleted"
            | "sku.updated"
            | "source.canceled"
            | "source.chargeable"
            | "source.failed"
            | "source.mandate_notification"
            | "source.refund_attributes_required"
            | "source.transaction.created"
            | "source.transaction.updated"
            | "subscription_schedule.aborted"
            | "subscription_schedule.canceled"
            | "subscription_schedule.completed"
            | "subscription_schedule.created"
            | "subscription_schedule.expiring"
            | "subscription_schedule.released"
            | "subscription_schedule.updated"
            | "tax_rate.created"
            | "tax_rate.updated"
            | "topup.canceled"
            | "topup.created"
            | "topup.failed"
            | "topup.reversed"
            | "topup.succeeded"
            | "transfer.created"
            | "transfer.failed"
            | "transfer.paid"
            | "transfer.reversed"
            | "transfer.updated"
          )[];
          /** Specifies which fields in the response should be expanded. */
          expand?: string[];
          /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          metadata?: Partial<{ [key: string]: string }> & Partial<"">;
          /** The URL of the webhook endpoint. */
          url?: string;
        };
      };
    };
  };
  /** <p>You can also delete webhook endpoints via the <a href="https://dashboard.stripe.com/account/webhooks">webhook endpoint management</a> page of the Stripe dashboard.</p> */
  DeleteWebhookEndpointsWebhookEndpoint: {
    parameters: {
      path: {
        webhook_endpoint: string;
      };
    };
    responses: {
      /** Successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["deleted_webhook_endpoint"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": { [key: string]: any };
      };
    };
  };
}
